
NRF_RX_Temp_l476rg_ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb0  08007eb0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb8  08007eb8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000078  08007f38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20000684  08007f38  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001711d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa8  00000000  00000000  000371c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0003a170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  0003b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002889f  00000000  00000000  0003c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b86  00000000  00000000  00064a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef0d5  00000000  00000000  000785bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e3c  00000000  00000000  001676e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fb8 	.word	0x08006fb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006fb8 	.word	0x08006fb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000572:	2003      	movs	r0, #3
 8000574:	f000 f960 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000578:	2000      	movs	r0, #0
 800057a:	f000 f80d 	bl	8000598 <HAL_InitTick>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000584:	2301      	movs	r3, #1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	e001      	b.n	800058e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800058a:	f005 f98f 	bl	80058ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800058e:	79fb      	ldrb	r3, [r7, #7]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_InitTick+0x6c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d023      	beq.n	80005f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_InitTick+0x70>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_InitTick+0x6c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f96d 	bl	80008a2 <HAL_SYSTICK_Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10f      	bne.n	80005ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d809      	bhi.n	80005e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	2200      	movs	r2, #0
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005dc:	f000 f937 	bl	800084e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <HAL_InitTick+0x74>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	e007      	b.n	80005f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e004      	b.n	80005f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	e001      	b.n	80005f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000004 	.word	0x20000004
 8000608:	20000010 	.word	0x20000010
 800060c:	20000000 	.word	0x20000000

08000610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_IncTick+0x20>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x24>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_IncTick+0x24>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000004 	.word	0x20000004
 8000634:	200004a8 	.word	0x200004a8

08000638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <HAL_GetTick+0x14>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200004a8 	.word	0x200004a8

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000658:	f7ff ffee 	bl	8000638 <HAL_GetTick>
 800065c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000668:	d005      	beq.n	8000676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_Delay+0x44>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4413      	add	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000676:	bf00      	nop
 8000678:	f7ff ffde 	bl	8000638 <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8f7      	bhi.n	8000678 <HAL_Delay+0x28>
  {
  }
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ca:	e17f      	b.n	8000bcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 8171 	beq.w	8000bc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d00b      	beq.n	8000904 <HAL_GPIO_Init+0x48>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d007      	beq.n	8000904 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f8:	2b11      	cmp	r3, #17
 80008fa:	d003      	beq.n	8000904 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b12      	cmp	r3, #18
 8000902:	d130      	bne.n	8000966 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800093a:	2201      	movs	r2, #1
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	091b      	lsrs	r3, r3, #4
 8000950:	f003 0201 	and.w	r2, r3, #1
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	2b03      	cmp	r3, #3
 8000970:	d118      	bne.n	80009a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000976:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000978:	2201      	movs	r2, #1
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4013      	ands	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	f003 0201 	and.w	r2, r3, #1
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4313      	orrs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2203      	movs	r2, #3
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d003      	beq.n	80009e4 <HAL_GPIO_Init+0x128>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b12      	cmp	r3, #18
 80009e2:	d123      	bne.n	8000a2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	08da      	lsrs	r2, r3, #3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3208      	adds	r2, #8
 80009ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	f003 0307 	and.w	r3, r3, #7
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	220f      	movs	r2, #15
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	691a      	ldr	r2, [r3, #16]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	08da      	lsrs	r2, r3, #3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3208      	adds	r2, #8
 8000a26:	6939      	ldr	r1, [r7, #16]
 8000a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0203 	and.w	r2, r3, #3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f000 80ac 	beq.w	8000bc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	4a5e      	ldr	r2, [pc, #376]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7a:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a86:	4a5a      	ldr	r2, [pc, #360]	; (8000bf0 <HAL_GPIO_Init+0x334>)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ab0:	d025      	beq.n	8000afe <HAL_GPIO_Init+0x242>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4f      	ldr	r2, [pc, #316]	; (8000bf4 <HAL_GPIO_Init+0x338>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d01f      	beq.n	8000afa <HAL_GPIO_Init+0x23e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4e      	ldr	r2, [pc, #312]	; (8000bf8 <HAL_GPIO_Init+0x33c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d019      	beq.n	8000af6 <HAL_GPIO_Init+0x23a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4d      	ldr	r2, [pc, #308]	; (8000bfc <HAL_GPIO_Init+0x340>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d013      	beq.n	8000af2 <HAL_GPIO_Init+0x236>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a4c      	ldr	r2, [pc, #304]	; (8000c00 <HAL_GPIO_Init+0x344>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d00d      	beq.n	8000aee <HAL_GPIO_Init+0x232>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4b      	ldr	r2, [pc, #300]	; (8000c04 <HAL_GPIO_Init+0x348>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d007      	beq.n	8000aea <HAL_GPIO_Init+0x22e>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a4a      	ldr	r2, [pc, #296]	; (8000c08 <HAL_GPIO_Init+0x34c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_GPIO_Init+0x22a>
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	e00c      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	e00a      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000aea:	2305      	movs	r3, #5
 8000aec:	e008      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000aee:	2304      	movs	r3, #4
 8000af0:	e006      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000af2:	2303      	movs	r3, #3
 8000af4:	e004      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000af6:	2302      	movs	r3, #2
 8000af8:	e002      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000afa:	2301      	movs	r3, #1
 8000afc:	e000      	b.n	8000b00 <HAL_GPIO_Init+0x244>
 8000afe:	2300      	movs	r3, #0
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	f002 0203 	and.w	r2, r2, #3
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b10:	4937      	ldr	r1, [pc, #220]	; (8000bf0 <HAL_GPIO_Init+0x334>)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3302      	adds	r3, #2
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b42:	4a32      	ldr	r2, [pc, #200]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b48:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b6c:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b96:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_GPIO_Init+0x350>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f47f ae78 	bne.w	80008cc <HAL_GPIO_Init+0x10>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000
 8000bf4:	48000400 	.word	0x48000400
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	48001000 	.word	0x48001000
 8000c04:	48001400 	.word	0x48001400
 8000c08:	48001800 	.word	0x48001800
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c20:	787b      	ldrb	r3, [r7, #1]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c26:	887a      	ldrh	r2, [r7, #2]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c2c:	e002      	b.n	8000c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 fd68 	bl	8005734 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e081      	b.n	8000d86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d106      	bne.n	8000c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f004 fbb2 	bl	8005400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2224      	movs	r2, #36	; 0x24
 8000ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0201 	bic.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d107      	bne.n	8000cea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	e006      	b.n	8000cf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000cf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d104      	bne.n	8000d0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	ea42 0103 	orr.w	r1, r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	021a      	lsls	r2, r3, #8
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69d9      	ldr	r1, [r3, #28]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a1a      	ldr	r2, [r3, #32]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2220      	movs	r2, #32
 8000d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	817b      	strh	r3, [r7, #10]
 8000da0:	4613      	mov	r3, r2
 8000da2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b20      	cmp	r3, #32
 8000dae:	f040 80da 	bne.w	8000f66 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d101      	bne.n	8000dc0 <HAL_I2C_Master_Transmit+0x30>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e0d3      	b.n	8000f68 <HAL_I2C_Master_Transmit+0x1d8>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000dc8:	f7ff fc36 	bl	8000638 <HAL_GetTick>
 8000dcc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2319      	movs	r3, #25
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f000 f9f7 	bl	80011ce <I2C_WaitOnFlagUntilTimeout>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e0be      	b.n	8000f68 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2221      	movs	r2, #33	; 0x21
 8000dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2210      	movs	r2, #16
 8000df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	893a      	ldrh	r2, [r7, #8]
 8000e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	2bff      	cmp	r3, #255	; 0xff
 8000e1a:	d90e      	bls.n	8000e3a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	8979      	ldrh	r1, [r7, #10]
 8000e2a:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <HAL_I2C_Master_Transmit+0x1e0>)
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f000 faee 	bl	8001414 <I2C_TransferConfig>
 8000e38:	e06c      	b.n	8000f14 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	8979      	ldrh	r1, [r7, #10]
 8000e4c:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <HAL_I2C_Master_Transmit+0x1e0>)
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f000 fadd 	bl	8001414 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000e5a:	e05b      	b.n	8000f14 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	6a39      	ldr	r1, [r7, #32]
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f000 f9f4 	bl	800124e <I2C_WaitOnTXISFlagUntilTimeout>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e07b      	b.n	8000f68 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d034      	beq.n	8000f14 <HAL_I2C_Master_Transmit+0x184>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d130      	bne.n	8000f14 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f000 f986 	bl	80011ce <I2C_WaitOnFlagUntilTimeout>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e04d      	b.n	8000f68 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	2bff      	cmp	r3, #255	; 0xff
 8000ed4:	d90e      	bls.n	8000ef4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	22ff      	movs	r2, #255	; 0xff
 8000eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	8979      	ldrh	r1, [r7, #10]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 fa91 	bl	8001414 <I2C_TransferConfig>
 8000ef2:	e00f      	b.n	8000f14 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	8979      	ldrh	r1, [r7, #10]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f000 fa80 	bl	8001414 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d19e      	bne.n	8000e5c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	6a39      	ldr	r1, [r7, #32]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f9d3 	bl	80012ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e01a      	b.n	8000f68 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2220      	movs	r2, #32
 8000f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6859      	ldr	r1, [r3, #4]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_I2C_Master_Transmit+0x1e4>)
 8000f46:	400b      	ands	r3, r1
 8000f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8000f66:	2302      	movs	r3, #2
  }
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	80002000 	.word	0x80002000
 8000f74:	fe00e800 	.word	0xfe00e800

08000f78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	460b      	mov	r3, r1
 8000f86:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	f040 80f1 	bne.w	800117c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fa8:	d101      	bne.n	8000fae <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8000faa:	2302      	movs	r3, #2
 8000fac:	e0e7      	b.n	800117e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_I2C_IsDeviceReady+0x44>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e0e0      	b.n	800117e <HAL_I2C_IsDeviceReady+0x206>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2224      	movs	r2, #36	; 0x24
 8000fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d107      	bne.n	8000fea <HAL_I2C_IsDeviceReady+0x72>
 8000fda:	897b      	ldrh	r3, [r7, #10]
 8000fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe8:	e004      	b.n	8000ff4 <HAL_I2C_IsDeviceReady+0x7c>
 8000fea:	897b      	ldrh	r3, [r7, #10]
 8000fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ff0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fb1d 	bl	8000638 <HAL_GetTick>
 8000ffe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	2b20      	cmp	r3, #32
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	2b10      	cmp	r3, #16
 8001022:	bf0c      	ite	eq
 8001024:	2301      	moveq	r3, #1
 8001026:	2300      	movne	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800102c:	e034      	b.n	8001098 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001034:	d01a      	beq.n	800106c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001036:	f7ff faff 	bl	8000638 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d302      	bcc.n	800104c <HAL_I2C_IsDeviceReady+0xd4>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10f      	bne.n	800106c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2220      	movs	r2, #32
 8001050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	f043 0220 	orr.w	r2, r3, #32
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e088      	b.n	800117e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	2b20      	cmp	r3, #32
 8001078:	bf0c      	ite	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	2300      	movne	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b10      	cmp	r3, #16
 800108e:	bf0c      	ite	eq
 8001090:	2301      	moveq	r3, #1
 8001092:	2300      	movne	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <HAL_I2C_IsDeviceReady+0x12c>
 800109e:	7fbb      	ldrb	r3, [r7, #30]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0c4      	beq.n	800102e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	2b10      	cmp	r3, #16
 80010b0:	d01a      	beq.n	80010e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	2120      	movs	r1, #32
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 f886 	bl	80011ce <I2C_WaitOnFlagUntilTimeout>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e058      	b.n	800117e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2220      	movs	r2, #32
 80010d2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2220      	movs	r2, #32
 80010d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e04a      	b.n	800117e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	2120      	movs	r1, #32
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 f86b 	bl	80011ce <I2C_WaitOnFlagUntilTimeout>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e03d      	b.n	800117e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2210      	movs	r2, #16
 8001108:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2220      	movs	r2, #32
 8001110:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	429a      	cmp	r2, r3
 8001118:	d118      	bne.n	800114c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001128:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2200      	movs	r2, #0
 8001132:	2120      	movs	r1, #32
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f84a 	bl	80011ce <I2C_WaitOnFlagUntilTimeout>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e01c      	b.n	800117e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2220      	movs	r2, #32
 800114a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	f63f af3b 	bhi.w	8000fd2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2220      	movs	r2, #32
 8001160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f043 0220 	orr.w	r2, r3, #32
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800117c:	2302      	movs	r3, #2
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b02      	cmp	r3, #2
 800119a:	d103      	bne.n	80011a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d007      	beq.n	80011c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	619a      	str	r2, [r3, #24]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4613      	mov	r3, r2
 80011dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011de:	e022      	b.n	8001226 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e6:	d01e      	beq.n	8001226 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011e8:	f7ff fa26 	bl	8000638 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d302      	bcc.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d113      	bne.n	8001226 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f043 0220 	orr.w	r2, r3, #32
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2220      	movs	r2, #32
 800120e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4013      	ands	r3, r2
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	429a      	cmp	r2, r3
 8001234:	bf0c      	ite	eq
 8001236:	2301      	moveq	r3, #1
 8001238:	2300      	movne	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	429a      	cmp	r2, r3
 8001242:	d0cd      	beq.n	80011e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800125a:	e02c      	b.n	80012b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f871 	bl	8001348 <I2C_IsAcknowledgeFailed>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e02a      	b.n	80012c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001276:	d01e      	beq.n	80012b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001278:	f7ff f9de 	bl	8000638 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	429a      	cmp	r2, r3
 8001286:	d302      	bcc.n	800128e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d113      	bne.n	80012b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f043 0220 	orr.w	r2, r3, #32
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2220      	movs	r2, #32
 800129e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e007      	b.n	80012c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d1cb      	bne.n	800125c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012da:	e028      	b.n	800132e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f831 	bl	8001348 <I2C_IsAcknowledgeFailed>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e026      	b.n	800133e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012f0:	f7ff f9a2 	bl	8000638 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d302      	bcc.n	8001306 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d113      	bne.n	800132e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f043 0220 	orr.w	r2, r3, #32
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2220      	movs	r2, #32
 8001316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e007      	b.n	800133e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b20      	cmp	r3, #32
 800133a:	d1cf      	bne.n	80012dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b10      	cmp	r3, #16
 8001360:	d151      	bne.n	8001406 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001362:	e022      	b.n	80013aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800136a:	d01e      	beq.n	80013aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800136c:	f7ff f964 	bl	8000638 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	429a      	cmp	r2, r3
 800137a:	d302      	bcc.n	8001382 <I2C_IsAcknowledgeFailed+0x3a>
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d113      	bne.n	80013aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f043 0220 	orr.w	r2, r3, #32
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2220      	movs	r2, #32
 8001392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e02e      	b.n	8001408 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	d1d5      	bne.n	8001364 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2210      	movs	r2, #16
 80013be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2220      	movs	r2, #32
 80013c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fedc 	bl	8001186 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <I2C_IsAcknowledgeFailed+0xc8>)
 80013da:	400b      	ands	r3, r1
 80013dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f043 0204 	orr.w	r2, r3, #4
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2220      	movs	r2, #32
 80013ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	fe00e800 	.word	0xfe00e800

08001414 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	817b      	strh	r3, [r7, #10]
 8001422:	4613      	mov	r3, r2
 8001424:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	0d5b      	lsrs	r3, r3, #21
 8001430:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <I2C_TransferConfig+0x58>)
 8001436:	430b      	orrs	r3, r1
 8001438:	43db      	mvns	r3, r3
 800143a:	ea02 0103 	and.w	r1, r2, r3
 800143e:	897b      	ldrh	r3, [r7, #10]
 8001440:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001444:	7a7b      	ldrb	r3, [r7, #9]
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	431a      	orrs	r2, r3
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	431a      	orrs	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	03ff63ff 	.word	0x03ff63ff

08001470 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b20      	cmp	r3, #32
 8001484:	d138      	bne.n	80014f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001490:	2302      	movs	r3, #2
 8001492:	e032      	b.n	80014fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2224      	movs	r2, #36	; 0x24
 80014a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6819      	ldr	r1, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2220      	movs	r2, #32
 80014e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e000      	b.n	80014fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014f8:	2302      	movs	r3, #2
  }
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b20      	cmp	r3, #32
 800151a:	d139      	bne.n	8001590 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001526:	2302      	movs	r3, #2
 8001528:	e033      	b.n	8001592 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2224      	movs	r2, #36	; 0x24
 8001536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001558:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	e000      	b.n	8001592 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001590:	2302      	movs	r3, #2
  }
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40007000 	.word	0x40007000

080015bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ca:	d130      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d8:	d038      	beq.n	800164c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015e2:	4a1e      	ldr	r2, [pc, #120]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2232      	movs	r2, #50	; 0x32
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0c9b      	lsrs	r3, r3, #18
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001600:	e002      	b.n	8001608 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3b01      	subs	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001614:	d102      	bne.n	800161c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f2      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001628:	d110      	bne.n	800164c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e00f      	b.n	800164e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d007      	beq.n	800164c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001644:	4a05      	ldr	r2, [pc, #20]	; (800165c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40007000 	.word	0x40007000
 8001660:	20000010 	.word	0x20000010
 8001664:	431bde83 	.word	0x431bde83

08001668 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e3d4      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167a:	4ba1      	ldr	r3, [pc, #644]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001684:	4b9e      	ldr	r3, [pc, #632]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80e4 	beq.w	8001864 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <HAL_RCC_OscConfig+0x4a>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	f040 808b 	bne.w	80017c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	f040 8087 	bne.w	80017c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b2:	4b93      	ldr	r3, [pc, #588]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x62>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e3ac      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1a      	ldr	r2, [r3, #32]
 80016ce:	4b8c      	ldr	r3, [pc, #560]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d004      	beq.n	80016e4 <HAL_RCC_OscConfig+0x7c>
 80016da:	4b89      	ldr	r3, [pc, #548]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e2:	e005      	b.n	80016f0 <HAL_RCC_OscConfig+0x88>
 80016e4:	4b86      	ldr	r3, [pc, #536]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d223      	bcs.n	800173c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fd41 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e38d      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001708:	4b7d      	ldr	r3, [pc, #500]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a7c      	ldr	r2, [pc, #496]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4977      	ldr	r1, [pc, #476]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001726:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	4972      	ldr	r1, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
 800173a:	e025      	b.n	8001788 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173c:	4b70      	ldr	r3, [pc, #448]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6f      	ldr	r2, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b6d      	ldr	r3, [pc, #436]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	496a      	ldr	r1, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175a:	4b69      	ldr	r3, [pc, #420]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	4965      	ldr	r1, [pc, #404]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fd01 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e34d      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001788:	f000 fc36 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b5c      	ldr	r3, [pc, #368]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	495a      	ldr	r1, [pc, #360]	; (8001904 <HAL_RCC_OscConfig+0x29c>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_OscConfig+0x2a0>)
 80017a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017a8:	4b58      	ldr	r3, [pc, #352]	; (800190c <HAL_RCC_OscConfig+0x2a4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fef3 	bl	8000598 <HAL_InitTick>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d052      	beq.n	8001862 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	e331      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d032      	beq.n	800182e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017c8:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017d4:	f7fe ff30 	bl	8000638 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017dc:	f7fe ff2c 	bl	8000638 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e31a      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a40      	ldr	r2, [pc, #256]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	493b      	ldr	r1, [pc, #236]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001818:	4b39      	ldr	r3, [pc, #228]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	4936      	ldr	r1, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	e01a      	b.n	8001864 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a33      	ldr	r2, [pc, #204]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800183a:	f7fe fefd 	bl	8000638 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001842:	f7fe fef9 	bl	8000638 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e2e7      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x1da>
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001862:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d074      	beq.n	800195a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b08      	cmp	r3, #8
 8001874:	d005      	beq.n	8001882 <HAL_RCC_OscConfig+0x21a>
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b0c      	cmp	r3, #12
 800187a:	d10e      	bne.n	800189a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d10b      	bne.n	800189a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d064      	beq.n	8001958 <HAL_RCC_OscConfig+0x2f0>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d160      	bne.n	8001958 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e2c4      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x24a>
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	e01d      	b.n	80018ee <HAL_RCC_OscConfig+0x286>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x26e>
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e00b      	b.n	80018ee <HAL_RCC_OscConfig+0x286>
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_RCC_OscConfig+0x298>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01c      	beq.n	8001930 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7fe fe9f 	bl	8000638 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fc:	e011      	b.n	8001922 <HAL_RCC_OscConfig+0x2ba>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	08007dd0 	.word	0x08007dd0
 8001908:	20000010 	.word	0x20000010
 800190c:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7fe fe92 	bl	8000638 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e280      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001922:	4baf      	ldr	r3, [pc, #700]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x2a8>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7fe fe82 	bl	8000638 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7fe fe7e 	bl	8000638 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e26c      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194a:	4ba5      	ldr	r3, [pc, #660]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x2d0>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d060      	beq.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b04      	cmp	r3, #4
 800196a:	d005      	beq.n	8001978 <HAL_RCC_OscConfig+0x310>
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d119      	bne.n	80019a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d116      	bne.n	80019a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001978:	4b99      	ldr	r3, [pc, #612]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_OscConfig+0x328>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e249      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	4b93      	ldr	r3, [pc, #588]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	4990      	ldr	r1, [pc, #576]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a4:	e040      	b.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d023      	beq.n	80019f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ae:	4b8c      	ldr	r3, [pc, #560]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a8b      	ldr	r2, [pc, #556]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7fe fe3d 	bl	8000638 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c2:	f7fe fe39 	bl	8000638 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e227      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d4:	4b82      	ldr	r3, [pc, #520]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	497c      	ldr	r1, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e018      	b.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a79      	ldr	r2, [pc, #484]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 80019fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7fe fe19 	bl	8000638 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7fe fe15 	bl	8000638 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e203      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a1c:	4b70      	ldr	r3, [pc, #448]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d03c      	beq.n	8001aae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01c      	beq.n	8001a76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a42:	4a67      	ldr	r2, [pc, #412]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7fe fdf4 	bl	8000638 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7fe fdf0 	bl	8000638 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1de      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a66:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ef      	beq.n	8001a54 <HAL_RCC_OscConfig+0x3ec>
 8001a74:	e01b      	b.n	8001aae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7c:	4a58      	ldr	r2, [pc, #352]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7fe fdd7 	bl	8000638 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7fe fdd3 	bl	8000638 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e1c1      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ef      	bne.n	8001a8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a6 	beq.w	8001c08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ac0:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10d      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	4a43      	ldr	r2, [pc, #268]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad8:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <HAL_RCC_OscConfig+0x57c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d118      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001af4:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_OscConfig+0x57c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <HAL_RCC_OscConfig+0x57c>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b00:	f7fe fd9a 	bl	8000638 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b08:	f7fe fd96 	bl	8000638 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e184      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <HAL_RCC_OscConfig+0x57c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_RCC_OscConfig+0x4d8>
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b3e:	e024      	b.n	8001b8a <HAL_RCC_OscConfig+0x522>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d110      	bne.n	8001b6a <HAL_RCC_OscConfig+0x502>
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	4a24      	ldr	r2, [pc, #144]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b68:	e00f      	b.n	8001b8a <HAL_RCC_OscConfig+0x522>
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b70:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001b82:	f023 0304 	bic.w	r3, r3, #4
 8001b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7fe fd51 	bl	8000638 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7fe fd4d 	bl	8000638 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e139      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_OscConfig+0x578>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ed      	beq.n	8001b9a <HAL_RCC_OscConfig+0x532>
 8001bbe:	e01a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7fe fd3a 	bl	8000638 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc6:	e00f      	b.n	8001be8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fd36 	bl	8000638 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d906      	bls.n	8001be8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e122      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	4b90      	ldr	r3, [pc, #576]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e8      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b8b      	ldr	r3, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	4a8a      	ldr	r2, [pc, #552]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8108 	beq.w	8001e22 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f040 80d0 	bne.w	8001dbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c1c:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d130      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d127      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d11f      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c5c:	2a07      	cmp	r2, #7
 8001c5e:	bf14      	ite	ne
 8001c60:	2201      	movne	r2, #1
 8001c62:	2200      	moveq	r2, #0
 8001c64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d113      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d06e      	beq.n	8001d70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2b0c      	cmp	r3, #12
 8001c96:	d069      	beq.n	8001d6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c98:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b7      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b5d      	ldr	r3, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a5c      	ldr	r2, [pc, #368]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc0:	f7fe fcba 	bl	8000638 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe fcb6 	bl	8000638 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0a4      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cda:	4b54      	ldr	r3, [pc, #336]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce6:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b51      	ldr	r3, [pc, #324]	; (8001e30 <HAL_RCC_OscConfig+0x7c8>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cf6:	3a01      	subs	r2, #1
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d00:	0212      	lsls	r2, r2, #8
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d08:	0852      	lsrs	r2, r2, #1
 8001d0a:	3a01      	subs	r2, #1
 8001d0c:	0552      	lsls	r2, r2, #21
 8001d0e:	4311      	orrs	r1, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d14:	0852      	lsrs	r2, r2, #1
 8001d16:	3a01      	subs	r2, #1
 8001d18:	0652      	lsls	r2, r2, #25
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d20:	0912      	lsrs	r2, r2, #4
 8001d22:	0452      	lsls	r2, r2, #17
 8001d24:	430a      	orrs	r2, r1
 8001d26:	4941      	ldr	r1, [pc, #260]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a3e      	ldr	r2, [pc, #248]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d38:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a3b      	ldr	r2, [pc, #236]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d44:	f7fe fc78 	bl	8000638 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7fe fc74 	bl	8000638 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e062      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d6a:	e05a      	b.n	8001e22 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e059      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d152      	bne.n	8001e22 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d94:	f7fe fc50 	bl	8000638 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fc4c 	bl	8000638 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e03a      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x734>
 8001dba:	e032      	b.n	8001e22 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d02d      	beq.n	8001e1e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001de0:	f023 0303 	bic.w	r3, r3, #3
 8001de4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001dec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7fe fc1f 	bl	8000638 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe fc1b 	bl	8000638 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e009      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_OscConfig+0x7c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x796>
 8001e1c:	e001      	b.n	8001e22 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	f99d808c 	.word	0xf99d808c

08001e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0c8      	b.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b66      	ldr	r3, [pc, #408]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d910      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	4961      	ldr	r1, [pc, #388]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0b0      	b.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d04c      	beq.n	8001f1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8c:	4b56      	ldr	r3, [pc, #344]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d121      	bne.n	8001edc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e09e      	b.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea4:	4b50      	ldr	r3, [pc, #320]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d115      	bne.n	8001edc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e092      	b.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ebc:	4b4a      	ldr	r3, [pc, #296]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e086      	b.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e07e      	b.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 0203 	bic.w	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	493f      	ldr	r1, [pc, #252]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eee:	f7fe fba3 	bl	8000638 <HAL_GetTick>
 8001ef2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef6:	f7fe fb9f 	bl	8000638 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e066      	b.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0c:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 020c 	and.w	r2, r3, #12
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d1eb      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	492c      	ldr	r1, [pc, #176]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d210      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4924      	ldr	r1, [pc, #144]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e036      	b.n	8001fda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4918      	ldr	r1, [pc, #96]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4910      	ldr	r1, [pc, #64]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001faa:	f000 f825 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	490c      	ldr	r1, [pc, #48]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fae2 	bl	8000598 <HAL_InitTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08007dd0 	.word	0x08007dd0
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x34>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d121      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11e      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e005      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d102      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	e004      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d101      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 800207e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d134      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0xa6>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d003      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0xac>
 800209c:	e005      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 80020a6:	617b      	str	r3, [r7, #20]
      break;
 80020a8:	e002      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	617b      	str	r3, [r7, #20]
      break;
 80020ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	3301      	adds	r3, #1
 80020bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	fb02 f203 	mul.w	r2, r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0e5b      	lsrs	r3, r3, #25
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	3301      	adds	r3, #1
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020f0:	69bb      	ldr	r3, [r7, #24]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	08007de8 	.word	0x08007de8
 8002108:	00f42400 	.word	0x00f42400
 800210c:	007a1200 	.word	0x007a1200

08002110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000010 	.word	0x20000010

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800212c:	f7ff fff0 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4904      	ldr	r1, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08007de0 	.word	0x08007de0

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002158:	f7ff ffda 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0adb      	lsrs	r3, r3, #11
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <HAL_RCC_GetPCLK2Freq+0x28>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08007de0 	.word	0x08007de0

08002180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002198:	f7ff fa02 	bl	80015a0 <HAL_PWREx_GetVoltageRange>
 800219c:	6178      	str	r0, [r7, #20]
 800219e:	e014      	b.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6593      	str	r3, [r2, #88]	; 0x58
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021b8:	f7ff f9f2 	bl	80015a0 <HAL_PWREx_GetVoltageRange>
 80021bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d0:	d10b      	bne.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b80      	cmp	r3, #128	; 0x80
 80021d6:	d919      	bls.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2ba0      	cmp	r3, #160	; 0xa0
 80021dc:	d902      	bls.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021de:	2302      	movs	r3, #2
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e013      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e4:	2301      	movs	r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e010      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d902      	bls.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021f0:	2303      	movs	r3, #3
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e00a      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d102      	bne.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021fc:	2302      	movs	r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e004      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b70      	cmp	r3, #112	; 0x70
 8002206:	d101      	bne.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002208:	2301      	movs	r3, #1
 800220a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 0207 	bic.w	r2, r3, #7
 8002214:	4909      	ldr	r1, [pc, #36]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	40022000 	.word	0x40022000

08002240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002248:	2300      	movs	r3, #0
 800224a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800224c:	2300      	movs	r3, #0
 800224e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002258:	2b00      	cmp	r3, #0
 800225a:	d041      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002260:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002264:	d02a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002266:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800226a:	d824      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800226c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002270:	d008      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002276:	d81e      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800227c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002280:	d010      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002282:	e018      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002284:	4b86      	ldr	r3, [pc, #536]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a85      	ldr	r2, [pc, #532]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002290:	e015      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fabb 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a2:	e00c      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3320      	adds	r3, #32
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fba6 	bl	80029fc <RCCEx_PLLSAI2_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b4:	e003      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ba:	e000      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c4:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d2:	4973      	ldr	r1, [pc, #460]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022da:	e001      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d041      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022f4:	d02a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022fa:	d824      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002300:	d008      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002306:	d81e      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800230c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002310:	d010      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002312:	e018      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002314:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a61      	ldr	r2, [pc, #388]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002320:	e015      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fa73 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002332:	e00c      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3320      	adds	r3, #32
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fb5e 	bl	80029fc <RCCEx_PLLSAI2_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002344:	e003      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	74fb      	strb	r3, [r7, #19]
      break;
 800234a:	e000      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800234c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002354:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002362:	494f      	ldr	r1, [pc, #316]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800236a:	e001      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a0 	beq.w	80024be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b0:	2301      	movs	r3, #1
 80023b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b4:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c0:	f7fe f93a 	bl	8000638 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c6:	e009      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe f936 	bl	8000638 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d902      	bls.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	74fb      	strb	r3, [r7, #19]
        break;
 80023da:	e005      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023dc:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ef      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d15c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01f      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	429a      	cmp	r2, r3
 800240a:	d019      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002416:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002438:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe f8f5 	bl	8000638 <HAL_GetTick>
 800244e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002450:	e00b      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe f8f1 	bl	8000638 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d902      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	74fb      	strb	r3, [r7, #19]
            break;
 8002468:	e006      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ec      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800248e:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002496:	e009      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
 800249c:	e006      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ac:	7c7b      	ldrb	r3, [r7, #17]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b9e      	ldr	r3, [pc, #632]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	4a9d      	ldr	r2, [pc, #628]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ca:	4b98      	ldr	r3, [pc, #608]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f023 0203 	bic.w	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	4994      	ldr	r1, [pc, #592]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ec:	4b8f      	ldr	r3, [pc, #572]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 020c 	bic.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	498c      	ldr	r1, [pc, #560]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800250e:	4b87      	ldr	r3, [pc, #540]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	4983      	ldr	r1, [pc, #524]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002530:	4b7e      	ldr	r3, [pc, #504]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	497b      	ldr	r1, [pc, #492]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	4972      	ldr	r1, [pc, #456]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002574:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	496a      	ldr	r1, [pc, #424]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	4961      	ldr	r1, [pc, #388]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b8:	4b5c      	ldr	r3, [pc, #368]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c6:	4959      	ldr	r1, [pc, #356]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b54      	ldr	r3, [pc, #336]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	4950      	ldr	r1, [pc, #320]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b4b      	ldr	r3, [pc, #300]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	4948      	ldr	r1, [pc, #288]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	493f      	ldr	r1, [pc, #252]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d028      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264e:	4937      	ldr	r1, [pc, #220]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800265e:	d106      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a31      	ldr	r2, [pc, #196]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266a:	60d3      	str	r3, [r2, #12]
 800266c:	e011      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002676:	d10c      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f8c8 	bl	8002814 <RCCEx_PLLSAI1_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d028      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	491f      	ldr	r1, [pc, #124]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026bc:	d106      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c8:	60d3      	str	r3, [r2, #12]
 80026ca:	e011      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	2101      	movs	r1, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f899 	bl	8002814 <RCCEx_PLLSAI1_Config>
 80026e2:	4603      	mov	r3, r0
 80026e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d02b      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800271a:	d109      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a02      	ldr	r2, [pc, #8]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002726:	60d3      	str	r3, [r2, #12]
 8002728:	e014      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002738:	d10c      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f867 	bl	8002814 <RCCEx_PLLSAI1_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02f      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800276e:	4928      	ldr	r1, [pc, #160]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800277e:	d10d      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2102      	movs	r1, #2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f844 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d014      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	74bb      	strb	r3, [r7, #18]
 800279a:	e011      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3320      	adds	r3, #32
 80027aa:	2102      	movs	r1, #2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f925 	bl	80029fc <RCCEx_PLLSAI2_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027da:	490d      	ldr	r1, [pc, #52]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fe:	4904      	ldr	r1, [pc, #16]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002806:	7cbb      	ldrb	r3, [r7, #18]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000

08002814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002822:	4b75      	ldr	r3, [pc, #468]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d018      	beq.n	8002860 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800282e:	4b72      	ldr	r3, [pc, #456]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0203 	and.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d10d      	bne.n	800285a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
       ||
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002846:	4b6c      	ldr	r3, [pc, #432]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
       ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d047      	beq.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e044      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d018      	beq.n	800289a <RCCEx_PLLSAI1_Config+0x86>
 8002868:	2b03      	cmp	r3, #3
 800286a:	d825      	bhi.n	80028b8 <RCCEx_PLLSAI1_Config+0xa4>
 800286c:	2b01      	cmp	r3, #1
 800286e:	d002      	beq.n	8002876 <RCCEx_PLLSAI1_Config+0x62>
 8002870:	2b02      	cmp	r3, #2
 8002872:	d009      	beq.n	8002888 <RCCEx_PLLSAI1_Config+0x74>
 8002874:	e020      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002876:	4b60      	ldr	r3, [pc, #384]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d11d      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002886:	e01a      	b.n	80028be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002888:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d116      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002898:	e013      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800289a:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028a6:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028b6:	e006      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e004      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028be:	bf00      	nop
 80028c0:	e002      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ce:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	430b      	orrs	r3, r1
 80028e4:	4944      	ldr	r1, [pc, #272]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d17d      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a40      	ldr	r2, [pc, #256]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fd fe9c 	bl	8000638 <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002902:	e009      	b.n	8002918 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002904:	f7fd fe98 	bl	8000638 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	73fb      	strb	r3, [r7, #15]
        break;
 8002916:	e005      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002918:	4b37      	ldr	r3, [pc, #220]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ef      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d160      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d111      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6892      	ldr	r2, [r2, #8]
 8002940:	0211      	lsls	r1, r2, #8
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68d2      	ldr	r2, [r2, #12]
 8002946:	0912      	lsrs	r2, r2, #4
 8002948:	0452      	lsls	r2, r2, #17
 800294a:	430a      	orrs	r2, r1
 800294c:	492a      	ldr	r1, [pc, #168]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	610b      	str	r3, [r1, #16]
 8002952:	e027      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d112      	bne.n	8002980 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002962:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6892      	ldr	r2, [r2, #8]
 800296a:	0211      	lsls	r1, r2, #8
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6912      	ldr	r2, [r2, #16]
 8002970:	0852      	lsrs	r2, r2, #1
 8002972:	3a01      	subs	r2, #1
 8002974:	0552      	lsls	r2, r2, #21
 8002976:	430a      	orrs	r2, r1
 8002978:	491f      	ldr	r1, [pc, #124]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	610b      	str	r3, [r1, #16]
 800297e:	e011      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6952      	ldr	r2, [r2, #20]
 8002996:	0852      	lsrs	r2, r2, #1
 8002998:	3a01      	subs	r2, #1
 800299a:	0652      	lsls	r2, r2, #25
 800299c:	430a      	orrs	r2, r1
 800299e:	4916      	ldr	r1, [pc, #88]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fd fe42 	bl	8000638 <HAL_GetTick>
 80029b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029b6:	e009      	b.n	80029cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b8:	f7fd fe3e 	bl	8000638 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d902      	bls.n	80029cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	73fb      	strb	r3, [r7, #15]
          break;
 80029ca:	e005      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ef      	beq.n	80029b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	4904      	ldr	r1, [pc, #16]	; (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0a:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a2e:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d047      	beq.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	e044      	b.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d018      	beq.n	8002a82 <RCCEx_PLLSAI2_Config+0x86>
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d825      	bhi.n	8002aa0 <RCCEx_PLLSAI2_Config+0xa4>
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d002      	beq.n	8002a5e <RCCEx_PLLSAI2_Config+0x62>
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d009      	beq.n	8002a70 <RCCEx_PLLSAI2_Config+0x74>
 8002a5c:	e020      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a5e:	4b55      	ldr	r3, [pc, #340]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e01a      	b.n	8002aa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e013      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a82:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10f      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a9e:	e006      	b.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa4:	e004      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	430b      	orrs	r3, r1
 8002acc:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d167      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ad8:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7fd fda8 	bl	8000638 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aea:	e009      	b.n	8002b00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aec:	f7fd fda4 	bl	8000638 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	73fb      	strb	r3, [r7, #15]
        break;
 8002afe:	e005      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ef      	bne.n	8002aec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d14a      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b18:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	0211      	lsls	r1, r2, #8
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	0912      	lsrs	r2, r2, #4
 8002b30:	0452      	lsls	r2, r2, #17
 8002b32:	430a      	orrs	r2, r1
 8002b34:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	614b      	str	r3, [r1, #20]
 8002b3a:	e011      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
 8002b4c:	0211      	lsls	r1, r2, #8
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6912      	ldr	r2, [r2, #16]
 8002b52:	0852      	lsrs	r2, r2, #1
 8002b54:	3a01      	subs	r2, #1
 8002b56:	0652      	lsls	r2, r2, #25
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fd fd64 	bl	8000638 <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b72:	e009      	b.n	8002b88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b74:	f7fd fd60 	bl	8000638 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	73fb      	strb	r3, [r7, #15]
          break;
 8002b86:	e005      	b.n	8002b94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4904      	ldr	r1, [pc, #16]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e095      	b.n	8002cf6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d108      	bne.n	8002be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bda:	d009      	beq.n	8002bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
 8002be2:	e005      	b.n	8002bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f002 fe0c 	bl	8005828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c30:	d902      	bls.n	8002c38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e002      	b.n	8002c3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c46:	d007      	beq.n	8002c58 <HAL_SPI_Init+0xa0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	ea42 0103 	orr.w	r1, r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	f003 0204 	and.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cd4:	ea42 0103 	orr.w	r1, r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08a      	sub	sp, #40	; 0x28
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x26>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e1fb      	b.n	800311c <HAL_SPI_TransmitReceive+0x41e>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d2c:	f7fd fc84 	bl	8000638 <HAL_GetTick>
 8002d30:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d38:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d48:	7efb      	ldrb	r3, [r7, #27]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d00e      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x6e>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d54:	d106      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x66>
 8002d5e:	7efb      	ldrb	r3, [r7, #27]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d003      	beq.n	8002d6c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d6a:	e1cd      	b.n	8003108 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x80>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x80>
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d84:	e1c0      	b.n	8003108 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d003      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2205      	movs	r2, #5
 8002d96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	887a      	ldrh	r2, [r7, #2]
 8002db2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	887a      	ldrh	r2, [r7, #2]
 8002dc6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ddc:	d802      	bhi.n	8002de4 <HAL_SPI_TransmitReceive+0xe6>
 8002dde:	8a3b      	ldrh	r3, [r7, #16]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d908      	bls.n	8002df6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	e007      	b.n	8002e06 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e04:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d007      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e2c:	d97c      	bls.n	8002f28 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x13e>
 8002e36:	8a7b      	ldrh	r3, [r7, #18]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d169      	bne.n	8002f10 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	881a      	ldrh	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	1c9a      	adds	r2, r3, #2
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e60:	e056      	b.n	8002f10 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_SPI_TransmitReceive+0x1aa>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0x1aa>
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d113      	bne.n	8002ea8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	1c9a      	adds	r2, r3, #2
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_SPI_TransmitReceive+0x1f2>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ef0:	f7fd fba2 	bl	8000638 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d807      	bhi.n	8002f10 <HAL_SPI_TransmitReceive+0x212>
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f06:	d003      	beq.n	8002f10 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f0e:	e0fb      	b.n	8003108 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1a3      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x164>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d19d      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x164>
 8002f26:	e0df      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0x23a>
 8002f30:	8a7b      	ldrh	r3, [r7, #18]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	f040 80cb 	bne.w	80030ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d912      	bls.n	8002f68 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	1c9a      	adds	r2, r3, #2
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b02      	subs	r3, #2
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f66:	e0b2      	b.n	80030ce <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f8e:	e09e      	b.n	80030ce <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d134      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x30a>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d02f      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x30a>
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d12c      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d912      	bls.n	8002fde <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	881a      	ldrh	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b02      	subs	r3, #2
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fdc:	e012      	b.n	8003004 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d148      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x3aa>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d042      	beq.n	80030a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d923      	bls.n	8003076 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	b292      	uxth	r2, r2
 800303a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b02      	subs	r3, #2
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d81f      	bhi.n	80030a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	e016      	b.n	80030a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f103 020c 	add.w	r2, r3, #12
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030a4:	2301      	movs	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030a8:	f7fd fac6 	bl	8000638 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d803      	bhi.n	80030c0 <HAL_SPI_TransmitReceive+0x3c2>
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030be:	d102      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x3c8>
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80030cc:	e01c      	b.n	8003108 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f47f af5b 	bne.w	8002f90 <HAL_SPI_TransmitReceive+0x292>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f47f af54 	bne.w	8002f90 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f92f 	bl	8003350 <SPI_EndRxTxTransaction>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	661a      	str	r2, [r3, #96]	; 0x60
 8003104:	e000      	b.n	8003108 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003106:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800311c:	4618      	mov	r0, r3
 800311e:	3728      	adds	r7, #40	; 0x28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003134:	f7fd fa80 	bl	8000638 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	4413      	add	r3, r2
 8003142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003144:	f7fd fa78 	bl	8000638 <HAL_GetTick>
 8003148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800314a:	4b39      	ldr	r3, [pc, #228]	; (8003230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	015b      	lsls	r3, r3, #5
 8003150:	0d1b      	lsrs	r3, r3, #20
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800315a:	e054      	b.n	8003206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003162:	d050      	beq.n	8003206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003164:	f7fd fa68 	bl	8000638 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	429a      	cmp	r2, r3
 8003172:	d902      	bls.n	800317a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d13d      	bne.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003192:	d111      	bne.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319c:	d004      	beq.n	80031a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a6:	d107      	bne.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c0:	d10f      	bne.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e017      	b.n	8003226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	3b01      	subs	r3, #1
 8003204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	bf0c      	ite	eq
 8003216:	2301      	moveq	r3, #1
 8003218:	2300      	movne	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	429a      	cmp	r2, r3
 8003222:	d19b      	bne.n	800315c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000010 	.word	0x20000010

08003234 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003242:	f7fd f9f9 	bl	8000638 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4413      	add	r3, r2
 8003250:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003252:	f7fd f9f1 	bl	8000638 <HAL_GetTick>
 8003256:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003258:	4b3c      	ldr	r3, [pc, #240]	; (800334c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00da      	lsls	r2, r3, #3
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	0d1b      	lsrs	r3, r3, #20
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003270:	e05f      	b.n	8003332 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003278:	d106      	bne.n	8003288 <SPI_WaitFifoStateUntilTimeout+0x54>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328e:	d050      	beq.n	8003332 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003290:	f7fd f9d2 	bl	8000638 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	429a      	cmp	r2, r3
 800329e:	d902      	bls.n	80032a6 <SPI_WaitFifoStateUntilTimeout+0x72>
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d13d      	bne.n	8003322 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032be:	d111      	bne.n	80032e4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c8:	d004      	beq.n	80032d4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d107      	bne.n	80032e4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ec:	d10f      	bne.n	800330e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800330c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e010      	b.n	8003344 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3b01      	subs	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d197      	bne.n	8003272 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000010 	.word	0x20000010

08003350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff ff63 	bl	8003234 <SPI_WaitFifoStateUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e027      	b.n	80033d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2200      	movs	r2, #0
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7ff fec8 	bl	8003124 <SPI_WaitFlagStateUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e014      	b.n	80033d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff ff3c 	bl	8003234 <SPI_WaitFifoStateUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e000      	b.n	80033d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e040      	b.n	8003470 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f002 fb9e 	bl	8005b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8c0 	bl	80035a0 <UART_SetConfig>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e022      	b.n	8003470 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fb3e 	bl	8003ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fbc5 	bl	8003bf8 <UART_CheckIdleState>
 800346e:	4603      	mov	r3, r0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	2b20      	cmp	r3, #32
 800348e:	f040 8081 	bne.w	8003594 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_UART_Transmit+0x26>
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e079      	b.n	8003596 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Transmit+0x38>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e072      	b.n	8003596 <HAL_UART_Transmit+0x11e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2221      	movs	r2, #33	; 0x21
 80034c2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80034c4:	f7fd f8b8 	bl	8000638 <HAL_GetTick>
 80034c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e2:	d108      	bne.n	80034f6 <HAL_UART_Transmit+0x7e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	e003      	b.n	80034fe <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003506:	e02d      	b.n	8003564 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fbb5 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e039      	b.n	8003596 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	881a      	ldrh	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003534:	b292      	uxth	r2, r2
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	3302      	adds	r3, #2
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e008      	b.n	8003552 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b292      	uxth	r2, r2
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1cb      	bne.n	8003508 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2200      	movs	r2, #0
 8003578:	2140      	movs	r1, #64	; 0x40
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fb81 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e005      	b.n	8003596 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4bad      	ldr	r3, [pc, #692]	; (8003880 <UART_SetConfig+0x2e0>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	69f9      	ldr	r1, [r7, #28]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4aa2      	ldr	r2, [pc, #648]	; (8003884 <UART_SetConfig+0x2e4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	4313      	orrs	r3, r2
 8003606:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	430a      	orrs	r2, r1
 800361a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a99      	ldr	r2, [pc, #612]	; (8003888 <UART_SetConfig+0x2e8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d121      	bne.n	800366a <UART_SetConfig+0xca>
 8003626:	4b99      	ldr	r3, [pc, #612]	; (800388c <UART_SetConfig+0x2ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b03      	cmp	r3, #3
 8003632:	d817      	bhi.n	8003664 <UART_SetConfig+0xc4>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <UART_SetConfig+0x9c>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	0800364d 	.word	0x0800364d
 8003640:	08003659 	.word	0x08003659
 8003644:	08003653 	.word	0x08003653
 8003648:	0800365f 	.word	0x0800365f
 800364c:	2301      	movs	r3, #1
 800364e:	76fb      	strb	r3, [r7, #27]
 8003650:	e0e7      	b.n	8003822 <UART_SetConfig+0x282>
 8003652:	2302      	movs	r3, #2
 8003654:	76fb      	strb	r3, [r7, #27]
 8003656:	e0e4      	b.n	8003822 <UART_SetConfig+0x282>
 8003658:	2304      	movs	r3, #4
 800365a:	76fb      	strb	r3, [r7, #27]
 800365c:	e0e1      	b.n	8003822 <UART_SetConfig+0x282>
 800365e:	2308      	movs	r3, #8
 8003660:	76fb      	strb	r3, [r7, #27]
 8003662:	e0de      	b.n	8003822 <UART_SetConfig+0x282>
 8003664:	2310      	movs	r3, #16
 8003666:	76fb      	strb	r3, [r7, #27]
 8003668:	e0db      	b.n	8003822 <UART_SetConfig+0x282>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a88      	ldr	r2, [pc, #544]	; (8003890 <UART_SetConfig+0x2f0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d132      	bne.n	80036da <UART_SetConfig+0x13a>
 8003674:	4b85      	ldr	r3, [pc, #532]	; (800388c <UART_SetConfig+0x2ec>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d828      	bhi.n	80036d4 <UART_SetConfig+0x134>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0xe8>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036bd 	.word	0x080036bd
 800368c:	080036d5 	.word	0x080036d5
 8003690:	080036d5 	.word	0x080036d5
 8003694:	080036d5 	.word	0x080036d5
 8003698:	080036c9 	.word	0x080036c9
 800369c:	080036d5 	.word	0x080036d5
 80036a0:	080036d5 	.word	0x080036d5
 80036a4:	080036d5 	.word	0x080036d5
 80036a8:	080036c3 	.word	0x080036c3
 80036ac:	080036d5 	.word	0x080036d5
 80036b0:	080036d5 	.word	0x080036d5
 80036b4:	080036d5 	.word	0x080036d5
 80036b8:	080036cf 	.word	0x080036cf
 80036bc:	2300      	movs	r3, #0
 80036be:	76fb      	strb	r3, [r7, #27]
 80036c0:	e0af      	b.n	8003822 <UART_SetConfig+0x282>
 80036c2:	2302      	movs	r3, #2
 80036c4:	76fb      	strb	r3, [r7, #27]
 80036c6:	e0ac      	b.n	8003822 <UART_SetConfig+0x282>
 80036c8:	2304      	movs	r3, #4
 80036ca:	76fb      	strb	r3, [r7, #27]
 80036cc:	e0a9      	b.n	8003822 <UART_SetConfig+0x282>
 80036ce:	2308      	movs	r3, #8
 80036d0:	76fb      	strb	r3, [r7, #27]
 80036d2:	e0a6      	b.n	8003822 <UART_SetConfig+0x282>
 80036d4:	2310      	movs	r3, #16
 80036d6:	76fb      	strb	r3, [r7, #27]
 80036d8:	e0a3      	b.n	8003822 <UART_SetConfig+0x282>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6d      	ldr	r2, [pc, #436]	; (8003894 <UART_SetConfig+0x2f4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d120      	bne.n	8003726 <UART_SetConfig+0x186>
 80036e4:	4b69      	ldr	r3, [pc, #420]	; (800388c <UART_SetConfig+0x2ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036ee:	2b30      	cmp	r3, #48	; 0x30
 80036f0:	d013      	beq.n	800371a <UART_SetConfig+0x17a>
 80036f2:	2b30      	cmp	r3, #48	; 0x30
 80036f4:	d814      	bhi.n	8003720 <UART_SetConfig+0x180>
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d009      	beq.n	800370e <UART_SetConfig+0x16e>
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d810      	bhi.n	8003720 <UART_SetConfig+0x180>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <UART_SetConfig+0x168>
 8003702:	2b10      	cmp	r3, #16
 8003704:	d006      	beq.n	8003714 <UART_SetConfig+0x174>
 8003706:	e00b      	b.n	8003720 <UART_SetConfig+0x180>
 8003708:	2300      	movs	r3, #0
 800370a:	76fb      	strb	r3, [r7, #27]
 800370c:	e089      	b.n	8003822 <UART_SetConfig+0x282>
 800370e:	2302      	movs	r3, #2
 8003710:	76fb      	strb	r3, [r7, #27]
 8003712:	e086      	b.n	8003822 <UART_SetConfig+0x282>
 8003714:	2304      	movs	r3, #4
 8003716:	76fb      	strb	r3, [r7, #27]
 8003718:	e083      	b.n	8003822 <UART_SetConfig+0x282>
 800371a:	2308      	movs	r3, #8
 800371c:	76fb      	strb	r3, [r7, #27]
 800371e:	e080      	b.n	8003822 <UART_SetConfig+0x282>
 8003720:	2310      	movs	r3, #16
 8003722:	76fb      	strb	r3, [r7, #27]
 8003724:	e07d      	b.n	8003822 <UART_SetConfig+0x282>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5b      	ldr	r2, [pc, #364]	; (8003898 <UART_SetConfig+0x2f8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d120      	bne.n	8003772 <UART_SetConfig+0x1d2>
 8003730:	4b56      	ldr	r3, [pc, #344]	; (800388c <UART_SetConfig+0x2ec>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800373a:	2bc0      	cmp	r3, #192	; 0xc0
 800373c:	d013      	beq.n	8003766 <UART_SetConfig+0x1c6>
 800373e:	2bc0      	cmp	r3, #192	; 0xc0
 8003740:	d814      	bhi.n	800376c <UART_SetConfig+0x1cc>
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d009      	beq.n	800375a <UART_SetConfig+0x1ba>
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d810      	bhi.n	800376c <UART_SetConfig+0x1cc>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <UART_SetConfig+0x1b4>
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d006      	beq.n	8003760 <UART_SetConfig+0x1c0>
 8003752:	e00b      	b.n	800376c <UART_SetConfig+0x1cc>
 8003754:	2300      	movs	r3, #0
 8003756:	76fb      	strb	r3, [r7, #27]
 8003758:	e063      	b.n	8003822 <UART_SetConfig+0x282>
 800375a:	2302      	movs	r3, #2
 800375c:	76fb      	strb	r3, [r7, #27]
 800375e:	e060      	b.n	8003822 <UART_SetConfig+0x282>
 8003760:	2304      	movs	r3, #4
 8003762:	76fb      	strb	r3, [r7, #27]
 8003764:	e05d      	b.n	8003822 <UART_SetConfig+0x282>
 8003766:	2308      	movs	r3, #8
 8003768:	76fb      	strb	r3, [r7, #27]
 800376a:	e05a      	b.n	8003822 <UART_SetConfig+0x282>
 800376c:	2310      	movs	r3, #16
 800376e:	76fb      	strb	r3, [r7, #27]
 8003770:	e057      	b.n	8003822 <UART_SetConfig+0x282>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a49      	ldr	r2, [pc, #292]	; (800389c <UART_SetConfig+0x2fc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d125      	bne.n	80037c8 <UART_SetConfig+0x228>
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <UART_SetConfig+0x2ec>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800378a:	d017      	beq.n	80037bc <UART_SetConfig+0x21c>
 800378c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003790:	d817      	bhi.n	80037c2 <UART_SetConfig+0x222>
 8003792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003796:	d00b      	beq.n	80037b0 <UART_SetConfig+0x210>
 8003798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379c:	d811      	bhi.n	80037c2 <UART_SetConfig+0x222>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <UART_SetConfig+0x20a>
 80037a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a6:	d006      	beq.n	80037b6 <UART_SetConfig+0x216>
 80037a8:	e00b      	b.n	80037c2 <UART_SetConfig+0x222>
 80037aa:	2300      	movs	r3, #0
 80037ac:	76fb      	strb	r3, [r7, #27]
 80037ae:	e038      	b.n	8003822 <UART_SetConfig+0x282>
 80037b0:	2302      	movs	r3, #2
 80037b2:	76fb      	strb	r3, [r7, #27]
 80037b4:	e035      	b.n	8003822 <UART_SetConfig+0x282>
 80037b6:	2304      	movs	r3, #4
 80037b8:	76fb      	strb	r3, [r7, #27]
 80037ba:	e032      	b.n	8003822 <UART_SetConfig+0x282>
 80037bc:	2308      	movs	r3, #8
 80037be:	76fb      	strb	r3, [r7, #27]
 80037c0:	e02f      	b.n	8003822 <UART_SetConfig+0x282>
 80037c2:	2310      	movs	r3, #16
 80037c4:	76fb      	strb	r3, [r7, #27]
 80037c6:	e02c      	b.n	8003822 <UART_SetConfig+0x282>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2d      	ldr	r2, [pc, #180]	; (8003884 <UART_SetConfig+0x2e4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d125      	bne.n	800381e <UART_SetConfig+0x27e>
 80037d2:	4b2e      	ldr	r3, [pc, #184]	; (800388c <UART_SetConfig+0x2ec>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e0:	d017      	beq.n	8003812 <UART_SetConfig+0x272>
 80037e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e6:	d817      	bhi.n	8003818 <UART_SetConfig+0x278>
 80037e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ec:	d00b      	beq.n	8003806 <UART_SetConfig+0x266>
 80037ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f2:	d811      	bhi.n	8003818 <UART_SetConfig+0x278>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <UART_SetConfig+0x260>
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d006      	beq.n	800380c <UART_SetConfig+0x26c>
 80037fe:	e00b      	b.n	8003818 <UART_SetConfig+0x278>
 8003800:	2300      	movs	r3, #0
 8003802:	76fb      	strb	r3, [r7, #27]
 8003804:	e00d      	b.n	8003822 <UART_SetConfig+0x282>
 8003806:	2302      	movs	r3, #2
 8003808:	76fb      	strb	r3, [r7, #27]
 800380a:	e00a      	b.n	8003822 <UART_SetConfig+0x282>
 800380c:	2304      	movs	r3, #4
 800380e:	76fb      	strb	r3, [r7, #27]
 8003810:	e007      	b.n	8003822 <UART_SetConfig+0x282>
 8003812:	2308      	movs	r3, #8
 8003814:	76fb      	strb	r3, [r7, #27]
 8003816:	e004      	b.n	8003822 <UART_SetConfig+0x282>
 8003818:	2310      	movs	r3, #16
 800381a:	76fb      	strb	r3, [r7, #27]
 800381c:	e001      	b.n	8003822 <UART_SetConfig+0x282>
 800381e:	2310      	movs	r3, #16
 8003820:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a17      	ldr	r2, [pc, #92]	; (8003884 <UART_SetConfig+0x2e4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	f040 8087 	bne.w	800393c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800382e:	7efb      	ldrb	r3, [r7, #27]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d837      	bhi.n	80038a4 <UART_SetConfig+0x304>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0x29c>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	08003861 	.word	0x08003861
 8003840:	080038a5 	.word	0x080038a5
 8003844:	08003869 	.word	0x08003869
 8003848:	080038a5 	.word	0x080038a5
 800384c:	0800386f 	.word	0x0800386f
 8003850:	080038a5 	.word	0x080038a5
 8003854:	080038a5 	.word	0x080038a5
 8003858:	080038a5 	.word	0x080038a5
 800385c:	08003877 	.word	0x08003877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7fe fc62 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003864:	6178      	str	r0, [r7, #20]
        break;
 8003866:	e022      	b.n	80038ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <UART_SetConfig+0x300>)
 800386a:	617b      	str	r3, [r7, #20]
        break;
 800386c:	e01f      	b.n	80038ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386e:	f7fe fbc3 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003872:	6178      	str	r0, [r7, #20]
        break;
 8003874:	e01b      	b.n	80038ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387a:	617b      	str	r3, [r7, #20]
        break;
 800387c:	e017      	b.n	80038ae <UART_SetConfig+0x30e>
 800387e:	bf00      	nop
 8003880:	efff69f3 	.word	0xefff69f3
 8003884:	40008000 	.word	0x40008000
 8003888:	40013800 	.word	0x40013800
 800388c:	40021000 	.word	0x40021000
 8003890:	40004400 	.word	0x40004400
 8003894:	40004800 	.word	0x40004800
 8003898:	40004c00 	.word	0x40004c00
 800389c:	40005000 	.word	0x40005000
 80038a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	76bb      	strb	r3, [r7, #26]
        break;
 80038ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80f1 	beq.w	8003a98 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d305      	bcc.n	80038d2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d902      	bls.n	80038d8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	76bb      	strb	r3, [r7, #26]
 80038d6:	e0df      	b.n	8003a98 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4618      	mov	r0, r3
 80038dc:	f04f 0100 	mov.w	r1, #0
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	020b      	lsls	r3, r1, #8
 80038ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038ee:	0202      	lsls	r2, r0, #8
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	6849      	ldr	r1, [r1, #4]
 80038f4:	0849      	lsrs	r1, r1, #1
 80038f6:	4608      	mov	r0, r1
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	1814      	adds	r4, r2, r0
 80038fe:	eb43 0501 	adc.w	r5, r3, r1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	461a      	mov	r2, r3
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	f7fc fcae 	bl	8000270 <__aeabi_uldivmod>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4613      	mov	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003922:	d308      	bcc.n	8003936 <UART_SetConfig+0x396>
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392a:	d204      	bcs.n	8003936 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	60da      	str	r2, [r3, #12]
 8003934:	e0b0      	b.n	8003a98 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	76bb      	strb	r3, [r7, #26]
 800393a:	e0ad      	b.n	8003a98 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003944:	d15c      	bne.n	8003a00 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003946:	7efb      	ldrb	r3, [r7, #27]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d828      	bhi.n	800399e <UART_SetConfig+0x3fe>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <UART_SetConfig+0x3b4>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003979 	.word	0x08003979
 8003958:	08003981 	.word	0x08003981
 800395c:	08003989 	.word	0x08003989
 8003960:	0800399f 	.word	0x0800399f
 8003964:	0800398f 	.word	0x0800398f
 8003968:	0800399f 	.word	0x0800399f
 800396c:	0800399f 	.word	0x0800399f
 8003970:	0800399f 	.word	0x0800399f
 8003974:	08003997 	.word	0x08003997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003978:	f7fe fbd6 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 800397c:	6178      	str	r0, [r7, #20]
        break;
 800397e:	e013      	b.n	80039a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7fe fbe8 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003984:	6178      	str	r0, [r7, #20]
        break;
 8003986:	e00f      	b.n	80039a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003988:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <UART_SetConfig+0x510>)
 800398a:	617b      	str	r3, [r7, #20]
        break;
 800398c:	e00c      	b.n	80039a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398e:	f7fe fb33 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003992:	6178      	str	r0, [r7, #20]
        break;
 8003994:	e008      	b.n	80039a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399a:	617b      	str	r3, [r7, #20]
        break;
 800399c:	e004      	b.n	80039a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	76bb      	strb	r3, [r7, #26]
        break;
 80039a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d074      	beq.n	8003a98 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005a      	lsls	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b0f      	cmp	r3, #15
 80039ca:	d916      	bls.n	80039fa <UART_SetConfig+0x45a>
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d212      	bcs.n	80039fa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f023 030f 	bic.w	r3, r3, #15
 80039dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	89fb      	ldrh	r3, [r7, #14]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	89fa      	ldrh	r2, [r7, #14]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	e04e      	b.n	8003a98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	76bb      	strb	r3, [r7, #26]
 80039fe:	e04b      	b.n	8003a98 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a00:	7efb      	ldrb	r3, [r7, #27]
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d827      	bhi.n	8003a56 <UART_SetConfig+0x4b6>
 8003a06:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <UART_SetConfig+0x46c>)
 8003a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a39 	.word	0x08003a39
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003a57 	.word	0x08003a57
 8003a1c:	08003a47 	.word	0x08003a47
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a57 	.word	0x08003a57
 8003a28:	08003a57 	.word	0x08003a57
 8003a2c:	08003a4f 	.word	0x08003a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a30:	f7fe fb7a 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003a34:	6178      	str	r0, [r7, #20]
        break;
 8003a36:	e013      	b.n	8003a60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7fe fb8c 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003a3c:	6178      	str	r0, [r7, #20]
        break;
 8003a3e:	e00f      	b.n	8003a60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <UART_SetConfig+0x510>)
 8003a42:	617b      	str	r3, [r7, #20]
        break;
 8003a44:	e00c      	b.n	8003a60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a46:	f7fe fad7 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003a4a:	6178      	str	r0, [r7, #20]
        break;
 8003a4c:	e008      	b.n	8003a60 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a52:	617b      	str	r3, [r7, #20]
        break;
 8003a54:	e004      	b.n	8003a60 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	76bb      	strb	r3, [r7, #26]
        break;
 8003a5e:	bf00      	nop
    }

    if (pclk != 0U)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d018      	beq.n	8003a98 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	085a      	lsrs	r2, r3, #1
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	441a      	add	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b0f      	cmp	r3, #15
 8003a80:	d908      	bls.n	8003a94 <UART_SetConfig+0x4f4>
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a88:	d204      	bcs.n	8003a94 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	e001      	b.n	8003a98 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003aa4:	7ebb      	ldrb	r3, [r7, #26]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bdb0      	pop	{r4, r5, r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	00f42400 	.word	0x00f42400

08003ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01a      	beq.n	8003bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb2:	d10a      	bne.n	8003bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c06:	f7fc fd17 	bl	8000638 <HAL_GetTick>
 8003c0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d10e      	bne.n	8003c38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f82a 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e020      	b.n	8003c7a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d10e      	bne.n	8003c64 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f814 	bl	8003c82 <UART_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e00a      	b.n	8003c7a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c92:	e05d      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c9a:	d059      	beq.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9c:	f7fc fccc 	bl	8000638 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11b      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e042      	b.n	8003d70 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d02b      	beq.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d06:	d123      	bne.n	8003d50 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d20:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e00f      	b.n	8003d70 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d092      	beq.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_nRF24L01P_Init>:
#include "nRF24L01P.h"
extern UART_HandleTypeDef huart1;
HAL_StatusTypeDef HAL_nRF24L01P_Init(nRF24L01P *nRF)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	HAL_StatusTypeDef retValue = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE) != HAL_OK)
 8003d84:	2101      	movs	r1, #1
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fbfe 	bl	8004588 <HAL_nRF24L01P_PowerUP>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_nRF24L01P_Init+0x1e>
	{
		return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e123      	b.n	8003fde <HAL_nRF24L01P_Init+0x266>
	}
	
	do {
			if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8003d96:	f107 030e 	add.w	r3, r7, #14
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fec7 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_nRF24L01P_Init+0x36>
			{
				return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e117      	b.n	8003fde <HAL_nRF24L01P_Init+0x266>
			}
	} while((regValue & 0x02) == 0x00); // Did device powered up? 
 8003dae:	7bbb      	ldrb	r3, [r7, #14]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ee      	beq.n	8003d96 <HAL_nRF24L01P_Init+0x1e>
	
	/* ---- InitProcess ---- */
	retValue |= HAL_nRF24L01P_SetPRXWidth(nRF, nRF->PayloadWidth, nRF_DATA_PIPE_0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7a9b      	ldrb	r3, [r3, #10]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f995 	bl	80040f0 <HAL_nRF24L01P_SetPRXWidth>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	461a      	mov	r2, r3
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetPRXAddress(nRF, nRF->RX_Address, nRF_DATA_PIPE_0);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f9e7 	bl	80041ac <HAL_nRF24L01P_SetPRXAddress>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetPTXAddress(nRF, nRF->TX_Address);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9c4 	bl	800417c <HAL_nRF24L01P_SetPTXAddress>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_RXDataReadyIRQ(nRF, nRF_ENABLE);
 8003dfe:	2101      	movs	r1, #1
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fb59 	bl	80044b8 <HAL_nRF24L01P_RXDataReadyIRQ>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_TXDataSentIRQ(nRF, nRF_ENABLE);
 8003e10:	2101      	movs	r1, #1
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb1f 	bl	8004456 <HAL_nRF24L01P_TXDataSentIRQ>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_MaxReTransmitIRQ(nRF, nRF_ENABLE);
 8003e22:	2101      	movs	r1, #1
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fae5 	bl	80043f4 <HAL_nRF24L01P_MaxReTransmitIRQ>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_CRC(nRF, nRF_ENABLE);
 8003e34:	2101      	movs	r1, #1
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fc08 	bl	800464c <HAL_nRF24L01P_CRC>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetCRCWidth(nRF, nRF->CRC_Width);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	791b      	ldrb	r3, [r3, #4]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fbcc 	bl	80045ea <HAL_nRF24L01P_SetCRCWidth>
 8003e52:	4603      	mov	r3, r0
 8003e54:	461a      	mov	r2, r3
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetAddressWidth(nRF, nRF->ADDR_Width);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	795b      	ldrb	r3, [r3, #5]
 8003e60:	4619      	mov	r1, r3
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fcad 	bl	80047c2 <HAL_nRF24L01P_SetAddressWidth>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRFChannel(nRF, nRF->RF_Channel);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	7a5b      	ldrb	r3, [r3, #9]
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fd39 	bl	80048f0 <HAL_nRF24L01P_SetRFChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	461a      	mov	r2, r3
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetDataRate(nRF, nRF->Data_Rate);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	799b      	ldrb	r3, [r3, #6]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fd6f 	bl	8004972 <HAL_nRF24L01P_SetDataRate>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRetransmissionCount(nRF, nRF->RetransmitCount);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7adb      	ldrb	r3, [r3, #11]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fcf2 	bl	800488e <HAL_nRF24L01P_SetRetransmissionCount>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	461a      	mov	r2, r3
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRetransmissionDelay(nRF, nRF->RetransmitDelay);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7b1b      	ldrb	r3, [r3, #12]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fcb2 	bl	8004824 <HAL_nRF24L01P_SetRetransmissionDelay>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_DynACK(nRF, nRF_ENABLE);
 8003eca:	2101      	movs	r1, #1
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fa60 	bl	8004392 <HAL_nRF24L01P_DynACK>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_ACKPayload(nRF, nRF_ENABLE);
 8003edc:	2101      	movs	r1, #1
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa26 	bl	8004330 <HAL_nRF24L01P_ACKPayload>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_DynPayload(nRF, nRF_ENABLE);
 8003eee:	2101      	movs	r1, #1
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f9ec 	bl	80042ce <HAL_nRF24L01P_DynPayload>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_RXPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8003f00:	2201      	movs	r2, #1
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fc17 	bl	8004738 <HAL_nRF24L01P_RXPipe>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_DPLPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8003f14:	2201      	movs	r2, #1
 8003f16:	2100      	movs	r1, #0
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f997 	bl	800424c <HAL_nRF24L01P_DPLPipe>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fbbe 	bl	80046ae <HAL_nRF24L01P_AutoACK>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_1, nRF_DISABLE);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2101      	movs	r1, #1
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fbb4 	bl	80046ae <HAL_nRF24L01P_AutoACK>
 8003f46:	4603      	mov	r3, r0
 8003f48:	461a      	mov	r2, r3
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_2, nRF_DISABLE);
 8003f50:	2200      	movs	r2, #0
 8003f52:	2102      	movs	r1, #2
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fbaa 	bl	80046ae <HAL_nRF24L01P_AutoACK>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_3, nRF_DISABLE);
 8003f64:	2200      	movs	r2, #0
 8003f66:	2103      	movs	r1, #3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fba0 	bl	80046ae <HAL_nRF24L01P_AutoACK>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	461a      	mov	r2, r3
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_4, nRF_DISABLE);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2104      	movs	r1, #4
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fb96 	bl	80046ae <HAL_nRF24L01P_AutoACK>
 8003f82:	4603      	mov	r3, r0
 8003f84:	461a      	mov	r2, r3
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_5, nRF_DISABLE);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2105      	movs	r1, #5
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fb8c 	bl	80046ae <HAL_nRF24L01P_AutoACK>
 8003f96:	4603      	mov	r3, r0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_ClearInterrupts(nRF);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fcc0 	bl	8004926 <HAL_nRF24L01P_ClearInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fab1 	bl	800451a <HAL_nRF24L01P_TXRX>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	461a      	mov	r2, r3
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_FlushRX(nRF);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fd3e 	bl	8004a44 <HAL_nRF24L01P_FlushRX>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	461a      	mov	r2, r3
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	73fb      	strb	r3, [r7, #15]
	
	if(retValue != HAL_OK)
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_nRF24L01P_Init+0x264>
	{
		return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_nRF24L01P_Init+0x266>
	}
	return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_nRF24L01P_IRQ_Handler>:

HAL_StatusTypeDef HAL_nRF24L01P_IRQ_Handler(nRF24L01P *nRF)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regStatus;
	//printf("INT OK!\r\n");
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regStatus) != HAL_OK)
 8003fee:	f107 030f 	add.w	r3, r7, #15
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2107      	movs	r1, #7
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fd9b 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_nRF24L01P_IRQ_Handler+0x20>
	{
		return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e070      	b.n	80040e8 <HAL_nRF24L01P_IRQ_Handler+0x102>
	}	
	/* ---- RX FIFO Int.---- */
	if((regStatus & (1 << 6)) != 0)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d023      	beq.n	8004058 <HAL_nRF24L01P_IRQ_Handler+0x72>
	{
		uint8_t regFIFO_Status;
		HAL_nRF24L01P_CE_Low(nRF);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fe8d 	bl	8004d30 <HAL_nRF24L01P_CE_Low>
		do {
		HAL_nRF24L01P_ReadRXPayload(nRF, (uint8_t*)nRF->RX_Buffer);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fd2b 	bl	8004a78 <HAL_nRF24L01P_ReadRXPayload>
		regStatus |= (1 << 6);
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004028:	b2db      	uxtb	r3, r3
 800402a:	73fb      	strb	r3, [r7, #15]
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 800402c:	f107 030f 	add.w	r3, r7, #15
 8004030:	461a      	mov	r2, r3
 8004032:	2107      	movs	r1, #7
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fd5e 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_ReadRegister(nRF, nRF_FIFO_STATUS, &regFIFO_Status);
 800403a:	f107 030e 	add.w	r3, r7, #14
 800403e:	461a      	mov	r2, r3
 8004040:	2117      	movs	r1, #23
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fd75 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
		} while((regFIFO_Status & 0x01) == 0x00);
 8004048:	7bbb      	ldrb	r3, [r7, #14]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0e1      	beq.n	8004016 <HAL_nRF24L01P_IRQ_Handler+0x30>
		HAL_nRF24L01P_CE_High(nRF);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fe5c 	bl	8004d10 <HAL_nRF24L01P_CE_High>
	}
	/* ---- TX Sent Int.---- */
	if((regStatus & (1 << 5)) != 0)
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d018      	beq.n	8004094 <HAL_nRF24L01P_IRQ_Handler+0xae>
	{
		HAL_nRF24L01P_CE_Low(nRF);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fe64 	bl	8004d30 <HAL_nRF24L01P_CE_Low>
		regStatus |= (1 << 5);
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	f043 0320 	orr.w	r3, r3, #32
 800406e:	b2db      	uxtb	r3, r3
 8004070:	73fb      	strb	r3, [r7, #15]
		HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8004072:	2101      	movs	r1, #1
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fa50 	bl	800451a <HAL_nRF24L01P_TXRX>
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 800407a:	f107 030f 	add.w	r3, r7, #15
 800407e:	461a      	mov	r2, r3
 8004080:	2107      	movs	r1, #7
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fd37 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_CE_High(nRF);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fe41 	bl	8004d10 <HAL_nRF24L01P_CE_High>
		nRF->Busy = 0;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	761a      	strb	r2, [r3, #24]
	}
	/* ---- MAXReTX Int.---- */
	if((regStatus & (1 << 4)) != 0)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	d023      	beq.n	80040e6 <HAL_nRF24L01P_IRQ_Handler+0x100>
	{
		regStatus |= (1 << 4);
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	f043 0310 	orr.w	r3, r3, #16
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	73fb      	strb	r3, [r7, #15]
		
		HAL_nRF24L01P_FlushTX(nRF);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fcb1 	bl	8004a10 <HAL_nRF24L01P_FlushTX>
		HAL_nRF24L01P_PowerUP(nRF, nRF_DISABLE);	// bi kapatip a�alim da d�zelsin...
 80040ae:	2100      	movs	r1, #0
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fa69 	bl	8004588 <HAL_nRF24L01P_PowerUP>
		HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE);
 80040b6:	2101      	movs	r1, #1
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fa65 	bl	8004588 <HAL_nRF24L01P_PowerUP>
		
		HAL_nRF24L01P_CE_Low(nRF);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fe36 	bl	8004d30 <HAL_nRF24L01P_CE_Low>
		HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 80040c4:	2101      	movs	r1, #1
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa27 	bl	800451a <HAL_nRF24L01P_TXRX>
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 80040cc:	f107 030f 	add.w	r3, r7, #15
 80040d0:	461a      	mov	r2, r3
 80040d2:	2107      	movs	r1, #7
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fd0e 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_CE_High(nRF);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fe18 	bl	8004d10 <HAL_nRF24L01P_CE_High>
		nRF->Busy = 0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	761a      	strb	r2, [r3, #24]
	}
	return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_nRF24L01P_SetPRXWidth>:
	while(nRF->Busy);	// TODO: Add *timeout* functionality
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXWidth(nRF24L01P *nRF, nRF_PRX_WIDTH Width, nRF_DATA_PIPE Pipe)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
 80040fc:	4613      	mov	r3, r2
 80040fe:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regAddr, regData;
	regData = Width & 0x3F;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004106:	b2db      	uxtb	r3, r3
 8004108:	73bb      	strb	r3, [r7, #14]
	/* ---- Pre Process ---- */
	switch(Pipe)
 800410a:	78bb      	ldrb	r3, [r7, #2]
 800410c:	2b05      	cmp	r3, #5
 800410e:	d821      	bhi.n	8004154 <HAL_nRF24L01P_SetPRXWidth+0x64>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_nRF24L01P_SetPRXWidth+0x28>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004131 	.word	0x08004131
 800411c:	08004137 	.word	0x08004137
 8004120:	0800413d 	.word	0x0800413d
 8004124:	08004143 	.word	0x08004143
 8004128:	08004149 	.word	0x08004149
 800412c:	0800414f 	.word	0x0800414f
	{
		case 0: //P0
			regAddr = nRF_RX_PW_P0;
 8004130:	2311      	movs	r3, #17
 8004132:	73fb      	strb	r3, [r7, #15]
		break;
 8004134:	e010      	b.n	8004158 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 1: //P1
			regAddr = nRF_RX_PW_P1;
 8004136:	2312      	movs	r3, #18
 8004138:	73fb      	strb	r3, [r7, #15]
		break;
 800413a:	e00d      	b.n	8004158 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 2: //P2
			regAddr = nRF_RX_PW_P2;
 800413c:	2313      	movs	r3, #19
 800413e:	73fb      	strb	r3, [r7, #15]
		break;
 8004140:	e00a      	b.n	8004158 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 3: //P3
			regAddr = nRF_RX_PW_P3;
 8004142:	2314      	movs	r3, #20
 8004144:	73fb      	strb	r3, [r7, #15]
		break;
 8004146:	e007      	b.n	8004158 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 4: //P4
			regAddr = nRF_RX_PW_P4;
 8004148:	2315      	movs	r3, #21
 800414a:	73fb      	strb	r3, [r7, #15]
		break;
 800414c:	e004      	b.n	8004158 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 5: //P5
			regAddr = nRF_RX_PW_P5;
 800414e:	2316      	movs	r3, #22
 8004150:	73fb      	strb	r3, [r7, #15]
		break;
 8004152:	e001      	b.n	8004158 <HAL_nRF24L01P_SetPRXWidth+0x68>
		default:
			return HAL_ERROR;		
 8004154:	2301      	movs	r3, #1
 8004156:	e00c      	b.n	8004172 <HAL_nRF24L01P_SetPRXWidth+0x82>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, regAddr, &regData)  != HAL_OK)
 8004158:	f107 020e 	add.w	r2, r7, #14
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fcc8 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_nRF24L01P_SetPRXWidth+0x80>
	{
		return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_nRF24L01P_SetPRXWidth+0x82>
	}
	return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_nRF24L01P_SetPTXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPTXAddress(nRF24L01P *nRF, uint8_t *pRegData)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af02      	add	r7, sp, #8
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + nRF_TX_ADDR, pRegData, Zero, 5) != HAL_OK)
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	2205      	movs	r2, #5
 800418c:	9200      	str	r2, [sp, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	2130      	movs	r1, #48	; 0x30
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fce9 	bl	8004b6a <HAL_nRF24L01P_SendCommand>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_nRF24L01P_SetPTXAddress+0x26>
	{
		return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <HAL_nRF24L01P_SetPTXAddress+0x28>
	}
	return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_nRF24L01P_SetPRXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXAddress(nRF24L01P *nRF, uint8_t *pRegData, nRF_DATA_PIPE Pipe)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	4613      	mov	r3, r2
 80041b8:	71fb      	strb	r3, [r7, #7]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	uint8_t Size;
	uint8_t regAddr;
	/* ---- Pre Process ---- */
	switch(Pipe)
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d82d      	bhi.n	800421c <HAL_nRF24L01P_SetPRXAddress+0x70>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <HAL_nRF24L01P_SetPRXAddress+0x1c>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041e1 	.word	0x080041e1
 80041cc:	080041eb 	.word	0x080041eb
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	080041ff 	.word	0x080041ff
 80041d8:	08004209 	.word	0x08004209
 80041dc:	08004213 	.word	0x08004213
	{
		case 0: //P0
			Size = 5;
 80041e0:	2305      	movs	r3, #5
 80041e2:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P0;
 80041e4:	230a      	movs	r3, #10
 80041e6:	75bb      	strb	r3, [r7, #22]
		break;
 80041e8:	e01a      	b.n	8004220 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 1: //P1
			Size = 5;
 80041ea:	2305      	movs	r3, #5
 80041ec:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P1;
 80041ee:	230b      	movs	r3, #11
 80041f0:	75bb      	strb	r3, [r7, #22]
		break;
 80041f2:	e015      	b.n	8004220 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 2: //P2
			Size = 1;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P2;
 80041f8:	230c      	movs	r3, #12
 80041fa:	75bb      	strb	r3, [r7, #22]
		break;
 80041fc:	e010      	b.n	8004220 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 3: //P3
			Size = 1;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P3;
 8004202:	230d      	movs	r3, #13
 8004204:	75bb      	strb	r3, [r7, #22]
		break;
 8004206:	e00b      	b.n	8004220 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 4: //P4
			Size = 1;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P4;
 800420c:	230e      	movs	r3, #14
 800420e:	75bb      	strb	r3, [r7, #22]
		break;
 8004210:	e006      	b.n	8004220 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 5: //P5
			Size = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P5;
 8004216:	230f      	movs	r3, #15
 8004218:	75bb      	strb	r3, [r7, #22]
		break;
 800421a:	e001      	b.n	8004220 <HAL_nRF24L01P_SetPRXAddress+0x74>
		default:
			return HAL_ERROR;		
 800421c:	2301      	movs	r3, #1
 800421e:	e011      	b.n	8004244 <HAL_nRF24L01P_SetPRXAddress+0x98>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, Zero, Size) != HAL_OK)
 8004220:	7dbb      	ldrb	r3, [r7, #22]
 8004222:	3320      	adds	r3, #32
 8004224:	b2d9      	uxtb	r1, r3
 8004226:	f107 0210 	add.w	r2, r7, #16
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fc99 	bl	8004b6a <HAL_nRF24L01P_SendCommand>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_nRF24L01P_SetPRXAddress+0x96>
	{
		return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_nRF24L01P_SetPRXAddress+0x98>
	}
	return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_nRF24L01P_DPLPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_DPLPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE DPL_State)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]
 8004258:	4613      	mov	r3, r2
 800425a:	70bb      	strb	r3, [r7, #2]
		/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 800425c:	f107 030f 	add.w	r3, r7, #15
 8004260:	461a      	mov	r2, r3
 8004262:	211c      	movs	r1, #28
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fc64 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_nRF24L01P_DPLPipe+0x28>
	{
		return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e028      	b.n	80042c6 <HAL_nRF24L01P_DPLPipe+0x7a>
	}
	
	if(DPL_State)
 8004274:	78bb      	ldrb	r3, [r7, #2]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_nRF24L01P_DPLPipe+0x46>
	{
		regValue |= (1 << Pipe);
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	2201      	movs	r2, #1
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	b25a      	sxtb	r2, r3
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	b25b      	sxtb	r3, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	b25b      	sxtb	r3, r3
 800428c:	b2db      	uxtb	r3, r3
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e00c      	b.n	80042ac <HAL_nRF24L01P_DPLPipe+0x60>
	} else {
		regValue &= ~(1 << Pipe);
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	2201      	movs	r2, #1
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	b25b      	sxtb	r3, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	b25a      	sxtb	r2, r3
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	b25b      	sxtb	r3, r3
 80042a4:	4013      	ands	r3, r2
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 80042ac:	f107 030f 	add.w	r3, r7, #15
 80042b0:	461a      	mov	r2, r3
 80042b2:	211c      	movs	r1, #28
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fc1e 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_nRF24L01P_DPLPipe+0x78>
	{
		return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_nRF24L01P_DPLPipe+0x7a>
	}
	return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_nRF24L01P_DynPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_DynPayload(nRF24L01P *nRF, nRF_STATE DPL_State)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 80042da:	f107 030f 	add.w	r3, r7, #15
 80042de:	461a      	mov	r2, r3
 80042e0:	211d      	movs	r1, #29
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fc25 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_nRF24L01P_DynPayload+0x24>
	{
		return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e01a      	b.n	8004328 <HAL_nRF24L01P_DynPayload+0x5a>
	}
	
	if(DPL_State)
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_nRF24L01P_DynPayload+0x36>
	{
		regValue |= (1 << 2);
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	f043 0304 	orr.w	r3, r3, #4
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	73fb      	strb	r3, [r7, #15]
 8004302:	e004      	b.n	800430e <HAL_nRF24L01P_DynPayload+0x40>
	} else {
		regValue &= ~(1 << 2);
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	f023 0304 	bic.w	r3, r3, #4
 800430a:	b2db      	uxtb	r3, r3
 800430c:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 800430e:	f107 030f 	add.w	r3, r7, #15
 8004312:	461a      	mov	r2, r3
 8004314:	211d      	movs	r1, #29
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fbed 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_nRF24L01P_DynPayload+0x58>
	{
		return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_nRF24L01P_DynPayload+0x5a>
	}
	return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_nRF24L01P_ACKPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ACKPayload(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 800433c:	f107 030f 	add.w	r3, r7, #15
 8004340:	461a      	mov	r2, r3
 8004342:	211d      	movs	r1, #29
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fbf4 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_nRF24L01P_ACKPayload+0x24>
	{
		return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e01a      	b.n	800438a <HAL_nRF24L01P_ACKPayload+0x5a>
	}
	
	if(ACK_State)
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_nRF24L01P_ACKPayload+0x36>
	{
		regValue |= (1 << 1);
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	b2db      	uxtb	r3, r3
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	e004      	b.n	8004370 <HAL_nRF24L01P_ACKPayload+0x40>
	} else {
		regValue &= ~(1 << 1);
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	f023 0302 	bic.w	r3, r3, #2
 800436c:	b2db      	uxtb	r3, r3
 800436e:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8004370:	f107 030f 	add.w	r3, r7, #15
 8004374:	461a      	mov	r2, r3
 8004376:	211d      	movs	r1, #29
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fbbc 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_nRF24L01P_ACKPayload+0x58>
	{
		return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <HAL_nRF24L01P_ACKPayload+0x5a>
	}
	return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_nRF24L01P_DynACK>:

HAL_StatusTypeDef HAL_nRF24L01P_DynACK(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 800439e:	f107 030f 	add.w	r3, r7, #15
 80043a2:	461a      	mov	r2, r3
 80043a4:	211d      	movs	r1, #29
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fbc3 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_nRF24L01P_DynACK+0x24>
	{
		return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e01a      	b.n	80043ec <HAL_nRF24L01P_DynACK+0x5a>
	}
	
	if(ACK_State)
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_nRF24L01P_DynACK+0x36>
	{
		regValue |= (1 << 0);
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	e004      	b.n	80043d2 <HAL_nRF24L01P_DynACK+0x40>
	} else {
		regValue &= ~(1 << 0);
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 80043d2:	f107 030f 	add.w	r3, r7, #15
 80043d6:	461a      	mov	r2, r3
 80043d8:	211d      	movs	r1, #29
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fb8b 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_nRF24L01P_DynACK+0x58>
	{
		return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_nRF24L01P_DynACK+0x5a>
	}
	return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_nRF24L01P_MaxReTransmitIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_MaxReTransmitIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8004400:	f107 030f 	add.w	r3, r7, #15
 8004404:	461a      	mov	r2, r3
 8004406:	2100      	movs	r1, #0
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fb92 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_nRF24L01P_MaxReTransmitIRQ+0x24>
	{
		return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e01a      	b.n	800444e <HAL_nRF24L01P_MaxReTransmitIRQ+0x5a>
	}
	
	if(IRQ_State)
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_nRF24L01P_MaxReTransmitIRQ+0x36>
	{
		regValue &= ~(1 << 4);
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	f023 0310 	bic.w	r3, r3, #16
 8004424:	b2db      	uxtb	r3, r3
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	e004      	b.n	8004434 <HAL_nRF24L01P_MaxReTransmitIRQ+0x40>
	} else {
		regValue |= (1 << 4);
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	f043 0310 	orr.w	r3, r3, #16
 8004430:	b2db      	uxtb	r3, r3
 8004432:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8004434:	f107 030f 	add.w	r3, r7, #15
 8004438:	461a      	mov	r2, r3
 800443a:	2100      	movs	r1, #0
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fb5a 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_nRF24L01P_MaxReTransmitIRQ+0x58>
	{
		return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_nRF24L01P_MaxReTransmitIRQ+0x5a>
	}
	return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_nRF24L01P_TXDataSentIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_TXDataSentIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8004462:	f107 030f 	add.w	r3, r7, #15
 8004466:	461a      	mov	r2, r3
 8004468:	2100      	movs	r1, #0
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fb61 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_nRF24L01P_TXDataSentIRQ+0x24>
	{
		return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01a      	b.n	80044b0 <HAL_nRF24L01P_TXDataSentIRQ+0x5a>
	}
	
	if(IRQ_State)
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_nRF24L01P_TXDataSentIRQ+0x36>
	{
		regValue &= ~(1 << 5);
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	f023 0320 	bic.w	r3, r3, #32
 8004486:	b2db      	uxtb	r3, r3
 8004488:	73fb      	strb	r3, [r7, #15]
 800448a:	e004      	b.n	8004496 <HAL_nRF24L01P_TXDataSentIRQ+0x40>
	} else {
		regValue |= (1 << 5);
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	f043 0320 	orr.w	r3, r3, #32
 8004492:	b2db      	uxtb	r3, r3
 8004494:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8004496:	f107 030f 	add.w	r3, r7, #15
 800449a:	461a      	mov	r2, r3
 800449c:	2100      	movs	r1, #0
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fb29 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_nRF24L01P_TXDataSentIRQ+0x58>
	{
		return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_nRF24L01P_TXDataSentIRQ+0x5a>
	}
	return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_nRF24L01P_RXDataReadyIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_RXDataReadyIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80044c4:	f107 030f 	add.w	r3, r7, #15
 80044c8:	461a      	mov	r2, r3
 80044ca:	2100      	movs	r1, #0
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fb30 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_nRF24L01P_RXDataReadyIRQ+0x24>
	{
		return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e01a      	b.n	8004512 <HAL_nRF24L01P_RXDataReadyIRQ+0x5a>
	}
	
	if(IRQ_State)
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_nRF24L01P_RXDataReadyIRQ+0x36>
	{
		regValue &= ~(1 << 6);
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	e004      	b.n	80044f8 <HAL_nRF24L01P_RXDataReadyIRQ+0x40>
	} else {
		regValue |= (1 << 6);
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80044f8:	f107 030f 	add.w	r3, r7, #15
 80044fc:	461a      	mov	r2, r3
 80044fe:	2100      	movs	r1, #0
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 faf8 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_nRF24L01P_RXDataReadyIRQ+0x58>
	{
		return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_nRF24L01P_RXDataReadyIRQ+0x5a>
	}
	return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_nRF24L01P_TXRX>:

HAL_StatusTypeDef HAL_nRF24L01P_TXRX(nRF24L01P *nRF, nRF_TXRX_STATE TxRx_State)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8004526:	f107 030f 	add.w	r3, r7, #15
 800452a:	461a      	mov	r2, r3
 800452c:	2100      	movs	r1, #0
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 faff 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_nRF24L01P_TXRX+0x24>
	{
		return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e020      	b.n	8004580 <HAL_nRF24L01P_TXRX+0x66>
	}
	
	if(TxRx_State)
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_nRF24L01P_TXRX+0x3c>
	{
		regValue |= (1);
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	73fb      	strb	r3, [r7, #15]
		nRF->State = nRF_STATE_TX;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	721a      	strb	r2, [r3, #8]
 8004554:	e007      	b.n	8004566 <HAL_nRF24L01P_TXRX+0x4c>
	} else {
		regValue &= ~(1);
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	b2db      	uxtb	r3, r3
 800455e:	73fb      	strb	r3, [r7, #15]
		nRF->State = nRF_STATE_RX;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	721a      	strb	r2, [r3, #8]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8004566:	f107 030f 	add.w	r3, r7, #15
 800456a:	461a      	mov	r2, r3
 800456c:	2100      	movs	r1, #0
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fac1 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_nRF24L01P_TXRX+0x64>
	{
		return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <HAL_nRF24L01P_TXRX+0x66>
	}
	return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_nRF24L01P_PowerUP>:

HAL_StatusTypeDef HAL_nRF24L01P_PowerUP(nRF24L01P *nRF, nRF_STATE Power)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8004594:	f107 030f 	add.w	r3, r7, #15
 8004598:	461a      	mov	r2, r3
 800459a:	2100      	movs	r1, #0
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fac8 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_nRF24L01P_PowerUP+0x24>
	{
		return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e01a      	b.n	80045e2 <HAL_nRF24L01P_PowerUP+0x5a>
	}
	
	if(Power)
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_nRF24L01P_PowerUP+0x36>
	{
		regValue |= (1 << 1);
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	73fb      	strb	r3, [r7, #15]
 80045bc:	e004      	b.n	80045c8 <HAL_nRF24L01P_PowerUP+0x40>
	} else {
		regValue &= ~(1 << 1);
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	f023 0302 	bic.w	r3, r3, #2
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80045c8:	f107 030f 	add.w	r3, r7, #15
 80045cc:	461a      	mov	r2, r3
 80045ce:	2100      	movs	r1, #0
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa90 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_nRF24L01P_PowerUP+0x58>
	{
		return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_nRF24L01P_PowerUP+0x5a>
	}
	return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_nRF24L01P_SetCRCWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetCRCWidth(nRF24L01P *nRF, nRF_CRC_WIDTH CRC_Width)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80045f6:	f107 030f 	add.w	r3, r7, #15
 80045fa:	461a      	mov	r2, r3
 80045fc:	2100      	movs	r1, #0
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa97 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_nRF24L01P_SetCRCWidth+0x24>
	{
		return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e01a      	b.n	8004644 <HAL_nRF24L01P_SetCRCWidth+0x5a>
	}
	
	if(CRC_Width)
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_nRF24L01P_SetCRCWidth+0x36>
	{
		regValue |= (1 << 2);
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	f043 0304 	orr.w	r3, r3, #4
 800461a:	b2db      	uxtb	r3, r3
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	e004      	b.n	800462a <HAL_nRF24L01P_SetCRCWidth+0x40>
	} else {
		regValue &= ~(1 << 2);
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	b2db      	uxtb	r3, r3
 8004628:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800462a:	f107 030f 	add.w	r3, r7, #15
 800462e:	461a      	mov	r2, r3
 8004630:	2100      	movs	r1, #0
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fa5f 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_nRF24L01P_SetCRCWidth+0x58>
	{
		return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_nRF24L01P_SetCRCWidth+0x5a>
	}
	return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_nRF24L01P_CRC>:

HAL_StatusTypeDef HAL_nRF24L01P_CRC(nRF24L01P *nRF, nRF_STATE CRC_State)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8004658:	f107 030f 	add.w	r3, r7, #15
 800465c:	461a      	mov	r2, r3
 800465e:	2100      	movs	r1, #0
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fa66 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_nRF24L01P_CRC+0x24>
	{
		return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e01a      	b.n	80046a6 <HAL_nRF24L01P_CRC+0x5a>
	}
	
	if(CRC_State)
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_nRF24L01P_CRC+0x36>
	{
		regValue |= (1 << 3);
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	f043 0308 	orr.w	r3, r3, #8
 800467c:	b2db      	uxtb	r3, r3
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	e004      	b.n	800468c <HAL_nRF24L01P_CRC+0x40>
	} else {
		regValue &= ~(1 << 3);
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	f023 0308 	bic.w	r3, r3, #8
 8004688:	b2db      	uxtb	r3, r3
 800468a:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800468c:	f107 030f 	add.w	r3, r7, #15
 8004690:	461a      	mov	r2, r3
 8004692:	2100      	movs	r1, #0
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa2e 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_nRF24L01P_CRC+0x58>
	{
		return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_nRF24L01P_CRC+0x5a>
	}
	return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_nRF24L01P_AutoACK>:

HAL_StatusTypeDef HAL_nRF24L01P_AutoACK(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE ACK_State)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	70fb      	strb	r3, [r7, #3]
 80046ba:	4613      	mov	r3, r2
 80046bc:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 80046be:	f107 030f 	add.w	r3, r7, #15
 80046c2:	461a      	mov	r2, r3
 80046c4:	2101      	movs	r1, #1
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa33 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_nRF24L01P_AutoACK+0x28>
	{
		return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e02c      	b.n	8004730 <HAL_nRF24L01P_AutoACK+0x82>
	}
	
	Pipe &= (0x3F); //nRF_EN_AA reg's 6. and 7. bits are Reserved
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046dc:	70fb      	strb	r3, [r7, #3]
	if(ACK_State)
 80046de:	78bb      	ldrb	r3, [r7, #2]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <HAL_nRF24L01P_AutoACK+0x4e>
	{
		regValue |= (1 << Pipe); //nRF_EN_AA reg is Configured
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	2201      	movs	r2, #1
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	b25a      	sxtb	r2, r3
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	b25b      	sxtb	r3, r3
 80046f2:	4313      	orrs	r3, r2
 80046f4:	b25b      	sxtb	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	73fb      	strb	r3, [r7, #15]
 80046fa:	e00c      	b.n	8004716 <HAL_nRF24L01P_AutoACK+0x68>
	} else {
		regValue &= ~(1 << Pipe); //nRF_EN_AA reg is Configured		
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	2201      	movs	r2, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	b25b      	sxtb	r3, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	b25a      	sxtb	r2, r3
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	b25b      	sxtb	r3, r3
 800470e:	4013      	ands	r3, r2
 8004710:	b25b      	sxtb	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 8004716:	f107 030f 	add.w	r3, r7, #15
 800471a:	461a      	mov	r2, r3
 800471c:	2101      	movs	r1, #1
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f9e9 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_nRF24L01P_AutoACK+0x80>
	{
		return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_nRF24L01P_AutoACK+0x82>
	}
	return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_nRF24L01P_RXPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_RXPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE Pipe_State)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
 8004744:	4613      	mov	r3, r2
 8004746:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 8004748:	f107 030f 	add.w	r3, r7, #15
 800474c:	461a      	mov	r2, r3
 800474e:	2102      	movs	r1, #2
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f9ee 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_nRF24L01P_RXPipe+0x28>
	{
		return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e02c      	b.n	80047ba <HAL_nRF24L01P_RXPipe+0x82>
	}
	
	Pipe &= (0x3F); //nRF_EN_RXADDR reg's 7. bit is Reserved
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004766:	70fb      	strb	r3, [r7, #3]
	if(Pipe_State)
 8004768:	78bb      	ldrb	r3, [r7, #2]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_nRF24L01P_RXPipe+0x4e>
	{
		regValue |= (1 << Pipe);
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	2201      	movs	r2, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	b25a      	sxtb	r2, r3
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	b25b      	sxtb	r3, r3
 800477c:	4313      	orrs	r3, r2
 800477e:	b25b      	sxtb	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e00c      	b.n	80047a0 <HAL_nRF24L01P_RXPipe+0x68>
	} else {
		regValue &= ~(1 << Pipe);
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	2201      	movs	r2, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	b25b      	sxtb	r3, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	b25a      	sxtb	r2, r3
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	b25b      	sxtb	r3, r3
 8004798:	4013      	ands	r3, r2
 800479a:	b25b      	sxtb	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	73fb      	strb	r3, [r7, #15]
	} //nRF_EN_RXADDR reg is Configured
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 80047a0:	f107 030f 	add.w	r3, r7, #15
 80047a4:	461a      	mov	r2, r3
 80047a6:	2102      	movs	r1, #2
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f9a4 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_nRF24L01P_RXPipe+0x80>
	{
		return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <HAL_nRF24L01P_RXPipe+0x82>
	}
	return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_nRF24L01P_SetAddressWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetAddressWidth(nRF24L01P *nRF, nRF_ADDR_WIDTH AddrWidth)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 80047ce:	f107 030f 	add.w	r3, r7, #15
 80047d2:	461a      	mov	r2, r3
 80047d4:	2103      	movs	r1, #3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f9ab 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_nRF24L01P_SetAddressWidth+0x24>
	{
		return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e01a      	b.n	800481c <HAL_nRF24L01P_SetAddressWidth+0x5a>
	}
	
	AddrWidth &= (0x03);
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	70fb      	strb	r3, [r7, #3]
	regValue &= (0xFC); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Cleared
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	f023 0303 	bic.w	r3, r3, #3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	73fb      	strb	r3, [r7, #15]
	regValue |= (AddrWidth); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Configured
 80047f8:	7bfa      	ldrb	r2, [r7, #15]
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 8004802:	f107 030f 	add.w	r3, r7, #15
 8004806:	461a      	mov	r2, r3
 8004808:	2103      	movs	r1, #3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f973 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_nRF24L01P_SetAddressWidth+0x58>
	{
		return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_nRF24L01P_SetAddressWidth+0x5a>
	}
	return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_nRF24L01P_SetRetransmissionDelay>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionDelay(nRF24L01P *nRF, nRF_RETX_DELAY Delay)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8004830:	f107 030f 	add.w	r3, r7, #15
 8004834:	461a      	mov	r2, r3
 8004836:	2104      	movs	r1, #4
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f97a 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_nRF24L01P_SetRetransmissionDelay+0x24>
	{
		return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e01e      	b.n	8004886 <HAL_nRF24L01P_SetRetransmissionDelay+0x62>
	}
	
	Delay &= (0x0F);
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	70fb      	strb	r3, [r7, #3]
	regValue &= (0x0F); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Cleared
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	b2db      	uxtb	r3, r3
 8004858:	73fb      	strb	r3, [r7, #15]
	regValue |= (Delay << 4); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Configured
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	b25a      	sxtb	r2, r3
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	b25b      	sxtb	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b25b      	sxtb	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 800486c:	f107 030f 	add.w	r3, r7, #15
 8004870:	461a      	mov	r2, r3
 8004872:	2104      	movs	r1, #4
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f93e 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_nRF24L01P_SetRetransmissionDelay+0x60>
	{
		return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_nRF24L01P_SetRetransmissionDelay+0x62>
	}
	return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_nRF24L01P_SetRetransmissionCount>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionCount(nRF24L01P *nRF, nRF_RETX_COUNT Count)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 800489a:	f107 030f 	add.w	r3, r7, #15
 800489e:	461a      	mov	r2, r3
 80048a0:	2104      	movs	r1, #4
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f945 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_nRF24L01P_SetRetransmissionCount+0x24>
	{
		return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e01a      	b.n	80048e8 <HAL_nRF24L01P_SetRetransmissionCount+0x5a>
	}
	
	Count &= (0x0F);
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	70fb      	strb	r3, [r7, #3]
	regValue &= (0xF0); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Cleared
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	f023 030f 	bic.w	r3, r3, #15
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	73fb      	strb	r3, [r7, #15]
	regValue |= (Count); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Configured
 80048c4:	7bfa      	ldrb	r2, [r7, #15]
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 80048ce:	f107 030f 	add.w	r3, r7, #15
 80048d2:	461a      	mov	r2, r3
 80048d4:	2104      	movs	r1, #4
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f90d 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_nRF24L01P_SetRetransmissionCount+0x58>
	{
		return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_nRF24L01P_SetRetransmissionCount+0x5a>
	}
	return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_nRF24L01P_SetRFChannel>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRFChannel(nRF24L01P *nRF, uint8_t Channel)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
	/* ---- Pre Process ---- */
	Channel &= 0x7F;	// nRF_RF_CH 7. bit is RESERVED
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004902:	b2db      	uxtb	r3, r3
 8004904:	70fb      	strb	r3, [r7, #3]
										// Freq. = (2400 + "Channel" Value) MHz 
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_CH, &Channel) != HAL_OK)
 8004906:	1cfb      	adds	r3, r7, #3
 8004908:	461a      	mov	r2, r3
 800490a:	2105      	movs	r1, #5
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8f2 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_nRF24L01P_SetRFChannel+0x2c>
	{
		return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_nRF24L01P_SetRFChannel+0x2e>
	}
	return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_nRF24L01P_ClearInterrupts>:

HAL_StatusTypeDef HAL_nRF24L01P_ClearInterrupts(nRF24L01P *nRF)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 800492e:	f107 030f 	add.w	r3, r7, #15
 8004932:	461a      	mov	r2, r3
 8004934:	2107      	movs	r1, #7
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f8fb 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_nRF24L01P_ClearInterrupts+0x20>
	{
		return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e011      	b.n	800496a <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	
	regValue |= (0x07 << 4); //nRF_STATUS reg's 4.,5. and 6. bits are RESET
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800494c:	b2db      	uxtb	r3, r3
 800494e:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 8004950:	f107 030f 	add.w	r3, r7, #15
 8004954:	461a      	mov	r2, r3
 8004956:	2107      	movs	r1, #7
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f8cc 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_nRF24L01P_ClearInterrupts+0x42>
	{
		return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_nRF24L01P_SetDataRate>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_SetDataRate(nRF24L01P *nRF, nRF_DATA_RATE Rate)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 800497e:	f107 030f 	add.w	r3, r7, #15
 8004982:	461a      	mov	r2, r3
 8004984:	2106      	movs	r1, #6
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8d3 	bl	8004b32 <HAL_nRF24L01P_ReadRegister>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_nRF24L01P_SetDataRate+0x24>
	{
		return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e038      	b.n	8004a08 <HAL_nRF24L01P_SetDataRate+0x96>
	}
	switch(Rate)
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d01b      	beq.n	80049d4 <HAL_nRF24L01P_SetDataRate+0x62>
 800499c:	2b02      	cmp	r3, #2
 800499e:	dc24      	bgt.n	80049ea <HAL_nRF24L01P_SetDataRate+0x78>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00c      	beq.n	80049be <HAL_nRF24L01P_SetDataRate+0x4c>
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d120      	bne.n	80049ea <HAL_nRF24L01P_SetDataRate+0x78>
	{
		case nRF_DATA_RATE_250KBPS:
			regValue |=  (0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is SET
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	f043 0320 	orr.w	r3, r3, #32
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	73fb      	strb	r3, [r7, #15]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	f023 0308 	bic.w	r3, r3, #8
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	73fb      	strb	r3, [r7, #15]
		break;
 80049bc:	e017      	b.n	80049ee <HAL_nRF24L01P_SetDataRate+0x7c>
		case nRF_DATA_RATE_1MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	f023 0320 	bic.w	r3, r3, #32
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	73fb      	strb	r3, [r7, #15]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	f023 0308 	bic.w	r3, r3, #8
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	73fb      	strb	r3, [r7, #15]
		break;
 80049d2:	e00c      	b.n	80049ee <HAL_nRF24L01P_SetDataRate+0x7c>
		case nRF_DATA_RATE_2MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	f023 0320 	bic.w	r3, r3, #32
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	73fb      	strb	r3, [r7, #15]
			regValue |=  (0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is SET
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	f043 0308 	orr.w	r3, r3, #8
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	73fb      	strb	r3, [r7, #15]
		break;
 80049e8:	e001      	b.n	80049ee <HAL_nRF24L01P_SetDataRate+0x7c>
		default:
			return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e00c      	b.n	8004a08 <HAL_nRF24L01P_SetDataRate+0x96>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 80049ee:	f107 030f 	add.w	r3, r7, #15
 80049f2:	461a      	mov	r2, r3
 80049f4:	2106      	movs	r1, #6
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f87d 	bl	8004af6 <HAL_nRF24L01P_WriteRegister>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_nRF24L01P_SetDataRate+0x94>
	{
		return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_nRF24L01P_SetDataRate+0x96>
	}
	return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_nRF24L01P_FlushTX>:

HAL_StatusTypeDef HAL_nRF24L01P_FlushTX(nRF24L01P *nRF)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_TX, &Zero, &Zero, 0) != HAL_OK)
 8004a1c:	f107 030f 	add.w	r3, r7, #15
 8004a20:	f107 020f 	add.w	r2, r7, #15
 8004a24:	2100      	movs	r1, #0
 8004a26:	9100      	str	r1, [sp, #0]
 8004a28:	21e1      	movs	r1, #225	; 0xe1
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f89d 	bl	8004b6a <HAL_nRF24L01P_SendCommand>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_nRF24L01P_FlushTX+0x2a>
	{
		return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_nRF24L01P_FlushTX+0x2c>
	}
	return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_nRF24L01P_FlushRX>:

HAL_StatusTypeDef HAL_nRF24L01P_FlushRX(nRF24L01P *nRF)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	73fb      	strb	r3, [r7, #15]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_RX, &Zero, &Zero, 0) != HAL_OK)
 8004a50:	f107 030f 	add.w	r3, r7, #15
 8004a54:	f107 020f 	add.w	r2, r7, #15
 8004a58:	2100      	movs	r1, #0
 8004a5a:	9100      	str	r1, [sp, #0]
 8004a5c:	21e2      	movs	r1, #226	; 0xe2
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f883 	bl	8004b6a <HAL_nRF24L01P_SendCommand>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_nRF24L01P_FlushRX+0x2a>
	{
		return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_nRF24L01P_FlushRX+0x2c>
	}
	return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_nRF24L01P_ReadRXPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRXPayload(nRF24L01P *nRF, uint8_t *pRegData)
{
 8004a78:	b5b0      	push	{r4, r5, r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	466b      	mov	r3, sp
 8004a84:	461d      	mov	r5, r3
	/* ---- Local Vars. ---- */
	uint8_t Zero[nRF->PayloadWidth];
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7a9c      	ldrb	r4, [r3, #10]
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	b2e0      	uxtb	r0, r4
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	00cb      	lsls	r3, r1, #3
 8004aa0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004aa4:	00c2      	lsls	r2, r0, #3
 8004aa6:	b2e0      	uxtb	r0, r4
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	00cb      	lsls	r3, r1, #3
 8004ab6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004aba:	00c2      	lsls	r2, r0, #3
 8004abc:	4623      	mov	r3, r4
 8004abe:	3307      	adds	r3, #7
 8004ac0:	08db      	lsrs	r3, r3, #3
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	ebad 0d03 	sub.w	sp, sp, r3
 8004ac8:	ab02      	add	r3, sp, #8
 8004aca:	3300      	adds	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_RX_PAYLOAD, Zero, pRegData, nRF->PayloadWidth) != HAL_OK)
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7a9b      	ldrb	r3, [r3, #10]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2161      	movs	r1, #97	; 0x61
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f845 	bl	8004b6a <HAL_nRF24L01P_SendCommand>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_nRF24L01P_ReadRXPayload+0x72>
	{
		return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <HAL_nRF24L01P_ReadRXPayload+0x74>
	}
	return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	46ad      	mov	sp, r5
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bdb0      	pop	{r4, r5, r7, pc}

08004af6 <HAL_nRF24L01P_WriteRegister>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_WriteRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b088      	sub	sp, #32
 8004afa:	af02      	add	r7, sp, #8
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	460b      	mov	r3, r1
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	72fb      	strb	r3, [r7, #11]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 8004b04:	2300      	movs	r3, #0
 8004b06:	75fb      	strb	r3, [r7, #23]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, &Zero, 1) != HAL_OK)
 8004b08:	7afb      	ldrb	r3, [r7, #11]
 8004b0a:	3320      	adds	r3, #32
 8004b0c:	b2d9      	uxtb	r1, r3
 8004b0e:	f107 0317 	add.w	r3, r7, #23
 8004b12:	2201      	movs	r2, #1
 8004b14:	9200      	str	r2, [sp, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f826 	bl	8004b6a <HAL_nRF24L01P_SendCommand>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_nRF24L01P_WriteRegister+0x32>
	{
		return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_nRF24L01P_WriteRegister+0x34>
	}
	return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_nRF24L01P_ReadRegister>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b088      	sub	sp, #32
 8004b36:	af02      	add	r7, sp, #8
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	72fb      	strb	r3, [r7, #11]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 8004b40:	2300      	movs	r3, #0
 8004b42:	75fb      	strb	r3, [r7, #23]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_REGISTER + regAddr, &Zero, pRegData, 1) != HAL_OK)
 8004b44:	f107 0217 	add.w	r2, r7, #23
 8004b48:	7af9      	ldrb	r1, [r7, #11]
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f80a 	bl	8004b6a <HAL_nRF24L01P_SendCommand>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_nRF24L01P_ReadRegister+0x2e>
	{
		return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_nRF24L01P_ReadRegister+0x30>
	}
	return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_nRF24L01P_SendCommand>:

HAL_StatusTypeDef HAL_nRF24L01P_SendCommand(nRF24L01P *nRF, uint8_t Command, uint8_t *TxBuffer, uint8_t *RxBuffer, uint8_t Size)
{
 8004b6a:	b5b0      	push	{r4, r5, r7, lr}
 8004b6c:	b08c      	sub	sp, #48	; 0x30
 8004b6e:	af02      	add	r7, sp, #8
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	460b      	mov	r3, r1
 8004b78:	72fb      	strb	r3, [r7, #11]
 8004b7a:	466b      	mov	r3, sp
 8004b7c:	461d      	mov	r5, r3
	/* ---- Local Vars. ---- */
	uint8_t tempTxBuffer[Size + 1];
 8004b7e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004b82:	1c5c      	adds	r4, r3, #1
 8004b84:	1e63      	subs	r3, r4, #1
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	4623      	mov	r3, r4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	00cb      	lsls	r3, r1, #3
 8004b9a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004b9e:	00c2      	lsls	r2, r0, #3
 8004ba0:	4623      	mov	r3, r4
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	00cb      	lsls	r3, r1, #3
 8004bb2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004bb6:	00c2      	lsls	r2, r0, #3
 8004bb8:	4623      	mov	r3, r4
 8004bba:	3307      	adds	r3, #7
 8004bbc:	08db      	lsrs	r3, r3, #3
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	ebad 0d03 	sub.w	sp, sp, r3
 8004bc4:	ab02      	add	r3, sp, #8
 8004bc6:	3300      	adds	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
	uint8_t tempRxBuffer[Size + 1];
 8004bca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004bce:	1c5c      	adds	r4, r3, #1
 8004bd0:	1e63      	subs	r3, r4, #1
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00cb      	lsls	r3, r1, #3
 8004be6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004bea:	00c2      	lsls	r2, r0, #3
 8004bec:	4623      	mov	r3, r4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f04f 0100 	mov.w	r1, #0
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	00cb      	lsls	r3, r1, #3
 8004bfe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004c02:	00c2      	lsls	r2, r0, #3
 8004c04:	4623      	mov	r3, r4
 8004c06:	3307      	adds	r3, #7
 8004c08:	08db      	lsrs	r3, r3, #3
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	ebad 0d03 	sub.w	sp, sp, r3
 8004c10:	ab02      	add	r3, sp, #8
 8004c12:	3300      	adds	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
	/* ---- Pre Process ---- */
	tempTxBuffer[0] = Command;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	7afa      	ldrb	r2, [r7, #11]
 8004c1a:	701a      	strb	r2, [r3, #0]
	tempRxBuffer[0] = 0x00;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c28:	e014      	b.n	8004c54 <HAL_nRF24L01P_SendCommand+0xea>
	{
		tempTxBuffer[i + 1] = TxBuffer[i]; // Fill tempTxBuffer with Command + All of TxBuffer
 8004c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	441a      	add	r2, r3
 8004c32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c36:	3301      	adds	r3, #1
 8004c38:	7811      	ldrb	r1, [r2, #0]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	54d1      	strb	r1, [r2, r3]
		tempRxBuffer[i + 1] = 0x00;
 8004c3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c42:	3301      	adds	r3, #1
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	2100      	movs	r1, #0
 8004c48:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Size; i++)
 8004c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c4e:	3301      	adds	r3, #1
 8004c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c54:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004c58:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d3e4      	bcc.n	8004c2a <HAL_nRF24L01P_SendCommand+0xc0>
	}
	/* ---- Fcn Process ---- */
	HAL_nRF24L01P_nSS_Low(nRF); // notSlaveSelect pin is Low
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f845 	bl	8004cf0 <HAL_nRF24L01P_nSS_Low>
	if(HAL_SPI_TransmitReceive(nRF->hspi, tempTxBuffer, tempRxBuffer, Size + 1, nRF_SPI_TIMEOUT) != HAL_OK)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004c7c:	9400      	str	r4, [sp, #0]
 8004c7e:	f7fe f83e 	bl	8002cfe <HAL_SPI_TransmitReceive>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_nRF24L01P_SendCommand+0x122>
	{
		return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e01c      	b.n	8004cc6 <HAL_nRF24L01P_SendCommand+0x15c>
	}
	/* ---- PostProcess ---- */
	for(uint8_t i = 0; i < Size; i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c92:	e00e      	b.n	8004cb2 <HAL_nRF24L01P_SendCommand+0x148>
	{
		RxBuffer[i] = tempRxBuffer[i + 1];
 8004c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	440b      	add	r3, r1
 8004ca2:	6979      	ldr	r1, [r7, #20]
 8004ca4:	5c8a      	ldrb	r2, [r1, r2]
 8004ca6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 8004ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cac:	3301      	adds	r3, #1
 8004cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004cb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004cb6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3ea      	bcc.n	8004c94 <HAL_nRF24L01P_SendCommand+0x12a>
	}
	HAL_nRF24L01P_nSS_High(nRF); // notSlaveSelect pin is High
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f806 	bl	8004cd0 <HAL_nRF24L01P_nSS_High>
	for(uint8_t j = 0; j < Size; j++)
	{
	 printf("RX = 0x%.2x ",RxBuffer[j]);
	}
	printf("\r\n");*/
	return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	46ad      	mov	sp, r5
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3728      	adds	r7, #40	; 0x28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bdb0      	pop	{r4, r5, r7, pc}

08004cd0 <HAL_nRF24L01P_nSS_High>:

void HAL_nRF24L01P_nSS_High(nRF24L01P *nRF)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_SET);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	f7fb ff94 	bl	8000c10 <HAL_GPIO_WritePin>
}
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_nRF24L01P_nSS_Low>:
void HAL_nRF24L01P_nSS_Low(nRF24L01P *nRF)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_RESET);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d00:	2200      	movs	r2, #0
 8004d02:	4619      	mov	r1, r3
 8004d04:	f7fb ff84 	bl	8000c10 <HAL_GPIO_WritePin>
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_nRF24L01P_CE_High>:
void HAL_nRF24L01P_CE_High(nRF24L01P *nRF)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_CE_GPIO_PORT, nRF->nRF_CE_GPIO_PIN, GPIO_PIN_SET);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004d20:	2201      	movs	r2, #1
 8004d22:	4619      	mov	r1, r3
 8004d24:	f7fb ff74 	bl	8000c10 <HAL_GPIO_WritePin>
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_nRF24L01P_CE_Low>:
void HAL_nRF24L01P_CE_Low(nRF24L01P *nRF)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_CE_GPIO_PORT, nRF->nRF_CE_GPIO_PIN, GPIO_PIN_RESET);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004d40:	2200      	movs	r2, #0
 8004d42:	4619      	mov	r1, r3
 8004d44:	f7fb ff64 	bl	8000c10 <HAL_GPIO_WritePin>
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8004d56:	f000 fa21 	bl	800519c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004d5a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2178      	movs	r1, #120	; 0x78
 8004d62:	485b      	ldr	r0, [pc, #364]	; (8004ed0 <SSD1306_Init+0x180>)
 8004d64:	f7fc f908 	bl	8000f78 <HAL_I2C_IsDeviceReady>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e0a9      	b.n	8004ec6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8004d72:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004d76:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004d78:	e002      	b.n	8004d80 <SSD1306_Init+0x30>
		p--;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f9      	bne.n	8004d7a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8004d86:	22ae      	movs	r2, #174	; 0xae
 8004d88:	2100      	movs	r1, #0
 8004d8a:	2078      	movs	r0, #120	; 0x78
 8004d8c:	f000 fa64 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8004d90:	2220      	movs	r2, #32
 8004d92:	2100      	movs	r1, #0
 8004d94:	2078      	movs	r0, #120	; 0x78
 8004d96:	f000 fa5f 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	2078      	movs	r0, #120	; 0x78
 8004da0:	f000 fa5a 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004da4:	22b0      	movs	r2, #176	; 0xb0
 8004da6:	2100      	movs	r1, #0
 8004da8:	2078      	movs	r0, #120	; 0x78
 8004daa:	f000 fa55 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004dae:	22c8      	movs	r2, #200	; 0xc8
 8004db0:	2100      	movs	r1, #0
 8004db2:	2078      	movs	r0, #120	; 0x78
 8004db4:	f000 fa50 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004db8:	2200      	movs	r2, #0
 8004dba:	2100      	movs	r1, #0
 8004dbc:	2078      	movs	r0, #120	; 0x78
 8004dbe:	f000 fa4b 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	2078      	movs	r0, #120	; 0x78
 8004dc8:	f000 fa46 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004dcc:	2240      	movs	r2, #64	; 0x40
 8004dce:	2100      	movs	r1, #0
 8004dd0:	2078      	movs	r0, #120	; 0x78
 8004dd2:	f000 fa41 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004dd6:	2281      	movs	r2, #129	; 0x81
 8004dd8:	2100      	movs	r1, #0
 8004dda:	2078      	movs	r0, #120	; 0x78
 8004ddc:	f000 fa3c 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004de0:	22ff      	movs	r2, #255	; 0xff
 8004de2:	2100      	movs	r1, #0
 8004de4:	2078      	movs	r0, #120	; 0x78
 8004de6:	f000 fa37 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004dea:	22a1      	movs	r2, #161	; 0xa1
 8004dec:	2100      	movs	r1, #0
 8004dee:	2078      	movs	r0, #120	; 0x78
 8004df0:	f000 fa32 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004df4:	22a6      	movs	r2, #166	; 0xa6
 8004df6:	2100      	movs	r1, #0
 8004df8:	2078      	movs	r0, #120	; 0x78
 8004dfa:	f000 fa2d 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8004dfe:	22a8      	movs	r2, #168	; 0xa8
 8004e00:	2100      	movs	r1, #0
 8004e02:	2078      	movs	r0, #120	; 0x78
 8004e04:	f000 fa28 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004e08:	223f      	movs	r2, #63	; 0x3f
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2078      	movs	r0, #120	; 0x78
 8004e0e:	f000 fa23 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004e12:	22a4      	movs	r2, #164	; 0xa4
 8004e14:	2100      	movs	r1, #0
 8004e16:	2078      	movs	r0, #120	; 0x78
 8004e18:	f000 fa1e 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004e1c:	22d3      	movs	r2, #211	; 0xd3
 8004e1e:	2100      	movs	r1, #0
 8004e20:	2078      	movs	r0, #120	; 0x78
 8004e22:	f000 fa19 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2078      	movs	r0, #120	; 0x78
 8004e2c:	f000 fa14 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004e30:	22d5      	movs	r2, #213	; 0xd5
 8004e32:	2100      	movs	r1, #0
 8004e34:	2078      	movs	r0, #120	; 0x78
 8004e36:	f000 fa0f 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004e3a:	22f0      	movs	r2, #240	; 0xf0
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	2078      	movs	r0, #120	; 0x78
 8004e40:	f000 fa0a 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004e44:	22d9      	movs	r2, #217	; 0xd9
 8004e46:	2100      	movs	r1, #0
 8004e48:	2078      	movs	r0, #120	; 0x78
 8004e4a:	f000 fa05 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004e4e:	2222      	movs	r2, #34	; 0x22
 8004e50:	2100      	movs	r1, #0
 8004e52:	2078      	movs	r0, #120	; 0x78
 8004e54:	f000 fa00 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004e58:	22da      	movs	r2, #218	; 0xda
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	2078      	movs	r0, #120	; 0x78
 8004e5e:	f000 f9fb 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8004e62:	2212      	movs	r2, #18
 8004e64:	2100      	movs	r1, #0
 8004e66:	2078      	movs	r0, #120	; 0x78
 8004e68:	f000 f9f6 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004e6c:	22db      	movs	r2, #219	; 0xdb
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2078      	movs	r0, #120	; 0x78
 8004e72:	f000 f9f1 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004e76:	2220      	movs	r2, #32
 8004e78:	2100      	movs	r1, #0
 8004e7a:	2078      	movs	r0, #120	; 0x78
 8004e7c:	f000 f9ec 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004e80:	228d      	movs	r2, #141	; 0x8d
 8004e82:	2100      	movs	r1, #0
 8004e84:	2078      	movs	r0, #120	; 0x78
 8004e86:	f000 f9e7 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004e8a:	2214      	movs	r2, #20
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	2078      	movs	r0, #120	; 0x78
 8004e90:	f000 f9e2 	bl	8005258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004e94:	22af      	movs	r2, #175	; 0xaf
 8004e96:	2100      	movs	r1, #0
 8004e98:	2078      	movs	r0, #120	; 0x78
 8004e9a:	f000 f9dd 	bl	8005258 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8004e9e:	222e      	movs	r2, #46	; 0x2e
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	2078      	movs	r0, #120	; 0x78
 8004ea4:	f000 f9d8 	bl	8005258 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f000 f843 	bl	8004f34 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8004eae:	f000 f813 	bl	8004ed8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <SSD1306_Init+0x184>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <SSD1306_Init+0x184>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <SSD1306_Init+0x184>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8004ec4:	2301      	movs	r3, #1
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	200004ac 	.word	0x200004ac
 8004ed4:	20000494 	.word	0x20000494

08004ed8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8004ede:	2300      	movs	r3, #0
 8004ee0:	71fb      	strb	r3, [r7, #7]
 8004ee2:	e01d      	b.n	8004f20 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	3b50      	subs	r3, #80	; 0x50
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	2100      	movs	r1, #0
 8004eee:	2078      	movs	r0, #120	; 0x78
 8004ef0:	f000 f9b2 	bl	8005258 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2078      	movs	r0, #120	; 0x78
 8004efa:	f000 f9ad 	bl	8005258 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004efe:	2210      	movs	r2, #16
 8004f00:	2100      	movs	r1, #0
 8004f02:	2078      	movs	r0, #120	; 0x78
 8004f04:	f000 f9a8 	bl	8005258 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	01db      	lsls	r3, r3, #7
 8004f0c:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <SSD1306_UpdateScreen+0x58>)
 8004f0e:	441a      	add	r2, r3
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	2140      	movs	r1, #64	; 0x40
 8004f14:	2078      	movs	r0, #120	; 0x78
 8004f16:	f000 f957 	bl	80051c8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	71fb      	strb	r3, [r7, #7]
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	2b07      	cmp	r3, #7
 8004f24:	d9de      	bls.n	8004ee4 <SSD1306_UpdateScreen+0xc>
	}
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000094 	.word	0x20000094

08004f34 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <SSD1306_Fill+0x14>
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <SSD1306_Fill+0x16>
 8004f48:	23ff      	movs	r3, #255	; 0xff
 8004f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4803      	ldr	r0, [pc, #12]	; (8004f60 <SSD1306_Fill+0x2c>)
 8004f52:	f000 fe8b 	bl	8005c6c <memset>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20000094 	.word	0x20000094

08004f64 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	80fb      	strh	r3, [r7, #6]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	80bb      	strh	r3, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	70fb      	strb	r3, [r7, #3]
	if (
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	2b7f      	cmp	r3, #127	; 0x7f
 8004f7a:	d848      	bhi.n	800500e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004f7c:	88bb      	ldrh	r3, [r7, #4]
 8004f7e:	2b3f      	cmp	r3, #63	; 0x3f
 8004f80:	d845      	bhi.n	800500e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004f82:	4b26      	ldr	r3, [pc, #152]	; (800501c <SSD1306_DrawPixel+0xb8>)
 8004f84:	791b      	ldrb	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d11a      	bne.n	8004fd4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	88bb      	ldrh	r3, [r7, #4]
 8004fa2:	08db      	lsrs	r3, r3, #3
 8004fa4:	b298      	uxth	r0, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	01db      	lsls	r3, r3, #7
 8004faa:	4413      	add	r3, r2
 8004fac:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <SSD1306_DrawPixel+0xbc>)
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
 8004fb0:	b25a      	sxtb	r2, r3
 8004fb2:	88bb      	ldrh	r3, [r7, #4]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	2101      	movs	r1, #1
 8004fba:	fa01 f303 	lsl.w	r3, r1, r3
 8004fbe:	b25b      	sxtb	r3, r3
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	b259      	sxtb	r1, r3
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	01db      	lsls	r3, r3, #7
 8004fca:	4413      	add	r3, r2
 8004fcc:	b2c9      	uxtb	r1, r1
 8004fce:	4a14      	ldr	r2, [pc, #80]	; (8005020 <SSD1306_DrawPixel+0xbc>)
 8004fd0:	54d1      	strb	r1, [r2, r3]
 8004fd2:	e01d      	b.n	8005010 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004fd4:	88fa      	ldrh	r2, [r7, #6]
 8004fd6:	88bb      	ldrh	r3, [r7, #4]
 8004fd8:	08db      	lsrs	r3, r3, #3
 8004fda:	b298      	uxth	r0, r3
 8004fdc:	4603      	mov	r3, r0
 8004fde:	01db      	lsls	r3, r3, #7
 8004fe0:	4413      	add	r3, r2
 8004fe2:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <SSD1306_DrawPixel+0xbc>)
 8004fe4:	5cd3      	ldrb	r3, [r2, r3]
 8004fe6:	b25a      	sxtb	r2, r3
 8004fe8:	88bb      	ldrh	r3, [r7, #4]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	2101      	movs	r1, #1
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	b25b      	sxtb	r3, r3
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	b259      	sxtb	r1, r3
 8004ffe:	88fa      	ldrh	r2, [r7, #6]
 8005000:	4603      	mov	r3, r0
 8005002:	01db      	lsls	r3, r3, #7
 8005004:	4413      	add	r3, r2
 8005006:	b2c9      	uxtb	r1, r1
 8005008:	4a05      	ldr	r2, [pc, #20]	; (8005020 <SSD1306_DrawPixel+0xbc>)
 800500a:	54d1      	strb	r1, [r2, r3]
 800500c:	e000      	b.n	8005010 <SSD1306_DrawPixel+0xac>
		return;
 800500e:	bf00      	nop
	}
}
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000494 	.word	0x20000494
 8005020:	20000094 	.word	0x20000094

08005024 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	4603      	mov	r3, r0
 800502c:	460a      	mov	r2, r1
 800502e:	80fb      	strh	r3, [r7, #6]
 8005030:	4613      	mov	r3, r2
 8005032:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005034:	4a05      	ldr	r2, [pc, #20]	; (800504c <SSD1306_GotoXY+0x28>)
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800503a:	4a04      	ldr	r2, [pc, #16]	; (800504c <SSD1306_GotoXY+0x28>)
 800503c:	88bb      	ldrh	r3, [r7, #4]
 800503e:	8053      	strh	r3, [r2, #2]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	20000494 	.word	0x20000494

08005050 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	71fb      	strb	r3, [r7, #7]
 800505c:	4613      	mov	r3, r2
 800505e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005060:	4b3a      	ldr	r3, [pc, #232]	; (800514c <SSD1306_Putc+0xfc>)
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	4413      	add	r3, r2
	if (
 800506c:	2b7f      	cmp	r3, #127	; 0x7f
 800506e:	dc07      	bgt.n	8005080 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005070:	4b36      	ldr	r3, [pc, #216]	; (800514c <SSD1306_Putc+0xfc>)
 8005072:	885b      	ldrh	r3, [r3, #2]
 8005074:	461a      	mov	r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800507c:	2b3f      	cmp	r3, #63	; 0x3f
 800507e:	dd01      	ble.n	8005084 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005080:	2300      	movs	r3, #0
 8005082:	e05e      	b.n	8005142 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	e04b      	b.n	8005122 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	3b20      	subs	r3, #32
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	7849      	ldrb	r1, [r1, #1]
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	4619      	mov	r1, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	440b      	add	r3, r1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	e030      	b.n	8005110 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80050be:	4b23      	ldr	r3, [pc, #140]	; (800514c <SSD1306_Putc+0xfc>)
 80050c0:	881a      	ldrh	r2, [r3, #0]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	b298      	uxth	r0, r3
 80050ca:	4b20      	ldr	r3, [pc, #128]	; (800514c <SSD1306_Putc+0xfc>)
 80050cc:	885a      	ldrh	r2, [r3, #2]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	79ba      	ldrb	r2, [r7, #6]
 80050d8:	4619      	mov	r1, r3
 80050da:	f7ff ff43 	bl	8004f64 <SSD1306_DrawPixel>
 80050de:	e014      	b.n	800510a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80050e0:	4b1a      	ldr	r3, [pc, #104]	; (800514c <SSD1306_Putc+0xfc>)
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	4413      	add	r3, r2
 80050ea:	b298      	uxth	r0, r3
 80050ec:	4b17      	ldr	r3, [pc, #92]	; (800514c <SSD1306_Putc+0xfc>)
 80050ee:	885a      	ldrh	r2, [r3, #2]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	4413      	add	r3, r2
 80050f6:	b299      	uxth	r1, r3
 80050f8:	79bb      	ldrb	r3, [r7, #6]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2300      	movne	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	f7ff ff2d 	bl	8004f64 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3301      	adds	r3, #1
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4293      	cmp	r3, r2
 800511a:	d3c8      	bcc.n	80050ae <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3301      	adds	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	461a      	mov	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4293      	cmp	r3, r2
 800512c:	d3ad      	bcc.n	800508a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <SSD1306_Putc+0xfc>)
 8005130:	881a      	ldrh	r2, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	4413      	add	r3, r2
 800513a:	b29a      	uxth	r2, r3
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <SSD1306_Putc+0xfc>)
 800513e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8005140:	79fb      	ldrb	r3, [r7, #7]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000494 	.word	0x20000494

08005150 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800515e:	e012      	b.n	8005186 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	79fa      	ldrb	r2, [r7, #7]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff ff71 	bl	8005050 <SSD1306_Putc>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d002      	beq.n	8005180 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	e008      	b.n	8005192 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3301      	adds	r3, #1
 8005184:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e8      	bne.n	8005160 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	781b      	ldrb	r3, [r3, #0]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <ssd1306_I2C_Init+0x28>)
 80051a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80051a6:	e002      	b.n	80051ae <ssd1306_I2C_Init+0x12>
		p--;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f9      	bne.n	80051a8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	0003d090 	.word	0x0003d090

080051c8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b0c7      	sub	sp, #284	; 0x11c
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	4604      	mov	r4, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	4639      	mov	r1, r7
 80051d4:	600a      	str	r2, [r1, #0]
 80051d6:	4619      	mov	r1, r3
 80051d8:	1dfb      	adds	r3, r7, #7
 80051da:	4622      	mov	r2, r4
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	1dbb      	adds	r3, r7, #6
 80051e0:	4602      	mov	r2, r0
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	460a      	mov	r2, r1
 80051e8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80051ea:	f107 030c 	add.w	r3, r7, #12
 80051ee:	1dba      	adds	r2, r7, #6
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80051fa:	e010      	b.n	800521e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80051fc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005200:	463a      	mov	r2, r7
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	441a      	add	r2, r3
 8005206:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800520a:	3301      	adds	r3, #1
 800520c:	7811      	ldrb	r1, [r2, #0]
 800520e:	f107 020c 	add.w	r2, r7, #12
 8005212:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8005214:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005218:	3301      	adds	r3, #1
 800521a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800521e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005222:	b29b      	uxth	r3, r3
 8005224:	1d3a      	adds	r2, r7, #4
 8005226:	8812      	ldrh	r2, [r2, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d8e7      	bhi.n	80051fc <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800522c:	1dfb      	adds	r3, r7, #7
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b299      	uxth	r1, r3
 8005232:	1d3b      	adds	r3, r7, #4
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	b29b      	uxth	r3, r3
 800523a:	f107 020c 	add.w	r2, r7, #12
 800523e:	200a      	movs	r0, #10
 8005240:	9000      	str	r0, [sp, #0]
 8005242:	4804      	ldr	r0, [pc, #16]	; (8005254 <ssd1306_I2C_WriteMulti+0x8c>)
 8005244:	f7fb fda4 	bl	8000d90 <HAL_I2C_Master_Transmit>
}
 8005248:	bf00      	nop
 800524a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800524e:	46bd      	mov	sp, r7
 8005250:	bd90      	pop	{r4, r7, pc}
 8005252:	bf00      	nop
 8005254:	200004ac 	.word	0x200004ac

08005258 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af02      	add	r7, sp, #8
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
 8005262:	460b      	mov	r3, r1
 8005264:	71bb      	strb	r3, [r7, #6]
 8005266:	4613      	mov	r3, r2
 8005268:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800526a:	79bb      	ldrb	r3, [r7, #6]
 800526c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800526e:	797b      	ldrb	r3, [r7, #5]
 8005270:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	b299      	uxth	r1, r3
 8005276:	f107 020c 	add.w	r2, r7, #12
 800527a:	230a      	movs	r3, #10
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	2302      	movs	r3, #2
 8005280:	4803      	ldr	r0, [pc, #12]	; (8005290 <ssd1306_I2C_Write+0x38>)
 8005282:	f7fb fd85 	bl	8000d90 <HAL_I2C_Master_Transmit>
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	200004ac 	.word	0x200004ac

08005294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800529a:	f107 030c 	add.w	r3, r7, #12
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	605a      	str	r2, [r3, #4]
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	60da      	str	r2, [r3, #12]
 80052a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052aa:	4b32      	ldr	r3, [pc, #200]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	4a31      	ldr	r2, [pc, #196]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052b6:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052c2:	4b2c      	ldr	r3, [pc, #176]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052c8:	f043 0304 	orr.w	r3, r3, #4
 80052cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ce:	4b29      	ldr	r3, [pc, #164]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052da:	4b26      	ldr	r3, [pc, #152]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052de:	4a25      	ldr	r2, [pc, #148]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052e0:	f043 0302 	orr.w	r3, r3, #2
 80052e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052e6:	4b23      	ldr	r3, [pc, #140]	; (8005374 <MX_GPIO_Init+0xe0>)
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF24_nSS_GPIO_Port, nRF24_nSS_Pin, GPIO_PIN_SET);
 80052f2:	2201      	movs	r2, #1
 80052f4:	2180      	movs	r1, #128	; 0x80
 80052f6:	4820      	ldr	r0, [pc, #128]	; (8005378 <MX_GPIO_Init+0xe4>)
 80052f8:	f7fb fc8a 	bl	8000c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_SET);
 80052fc:	2201      	movs	r2, #1
 80052fe:	2140      	movs	r1, #64	; 0x40
 8005300:	481e      	ldr	r0, [pc, #120]	; (800537c <MX_GPIO_Init+0xe8>)
 8005302:	f7fb fc85 	bl	8000c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF24_nSS_Pin;
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800530a:	2301      	movs	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005312:	2303      	movs	r3, #3
 8005314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nRF24_nSS_GPIO_Port, &GPIO_InitStruct);
 8005316:	f107 030c 	add.w	r3, r7, #12
 800531a:	4619      	mov	r1, r3
 800531c:	4816      	ldr	r0, [pc, #88]	; (8005378 <MX_GPIO_Init+0xe4>)
 800531e:	f7fb facd 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF24_INT_Pin;
 8005322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <MX_GPIO_Init+0xec>)
 800532a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(nRF24_INT_GPIO_Port, &GPIO_InitStruct);
 8005330:	f107 030c 	add.w	r3, r7, #12
 8005334:	4619      	mov	r1, r3
 8005336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800533a:	f7fb fabf 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF24_CE_Pin;
 800533e:	2340      	movs	r3, #64	; 0x40
 8005340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005342:	2301      	movs	r3, #1
 8005344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534a:	2303      	movs	r3, #3
 800534c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nRF24_CE_GPIO_Port, &GPIO_InitStruct);
 800534e:	f107 030c 	add.w	r3, r7, #12
 8005352:	4619      	mov	r1, r3
 8005354:	4809      	ldr	r0, [pc, #36]	; (800537c <MX_GPIO_Init+0xe8>)
 8005356:	f7fb fab1 	bl	80008bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800535a:	2200      	movs	r2, #0
 800535c:	2100      	movs	r1, #0
 800535e:	2017      	movs	r0, #23
 8005360:	f7fb fa75 	bl	800084e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005364:	2017      	movs	r0, #23
 8005366:	f7fb fa8e 	bl	8000886 <HAL_NVIC_EnableIRQ>

}
 800536a:	bf00      	nop
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000
 8005378:	48000800 	.word	0x48000800
 800537c:	48000400 	.word	0x48000400
 8005380:	10210000 	.word	0x10210000

08005384 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <MX_I2C1_Init+0x74>)
 800538a:	4a1c      	ldr	r2, [pc, #112]	; (80053fc <MX_I2C1_Init+0x78>)
 800538c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800538e:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <MX_I2C1_Init+0x74>)
 8005390:	f640 6214 	movw	r2, #3604	; 0xe14
 8005394:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005396:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <MX_I2C1_Init+0x74>)
 8005398:	2200      	movs	r2, #0
 800539a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800539c:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <MX_I2C1_Init+0x74>)
 800539e:	2201      	movs	r2, #1
 80053a0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <MX_I2C1_Init+0x74>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80053a8:	4b13      	ldr	r3, [pc, #76]	; (80053f8 <MX_I2C1_Init+0x74>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80053ae:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <MX_I2C1_Init+0x74>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <MX_I2C1_Init+0x74>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <MX_I2C1_Init+0x74>)
 80053bc:	2200      	movs	r2, #0
 80053be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053c0:	480d      	ldr	r0, [pc, #52]	; (80053f8 <MX_I2C1_Init+0x74>)
 80053c2:	f7fb fc55 	bl	8000c70 <HAL_I2C_Init>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80053cc:	f000 f9e0 	bl	8005790 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80053d0:	2100      	movs	r1, #0
 80053d2:	4809      	ldr	r0, [pc, #36]	; (80053f8 <MX_I2C1_Init+0x74>)
 80053d4:	f7fc f84c 	bl	8001470 <HAL_I2CEx_ConfigAnalogFilter>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80053de:	f000 f9d7 	bl	8005790 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80053e2:	2100      	movs	r1, #0
 80053e4:	4804      	ldr	r0, [pc, #16]	; (80053f8 <MX_I2C1_Init+0x74>)
 80053e6:	f7fc f88e 	bl	8001506 <HAL_I2CEx_ConfigDigitalFilter>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80053f0:	f000 f9ce 	bl	8005790 <Error_Handler>
  }

}
 80053f4:	bf00      	nop
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200004ac 	.word	0x200004ac
 80053fc:	40005400 	.word	0x40005400

08005400 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	609a      	str	r2, [r3, #8]
 8005414:	60da      	str	r2, [r3, #12]
 8005416:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a17      	ldr	r2, [pc, #92]	; (800547c <HAL_I2C_MspInit+0x7c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d128      	bne.n	8005474 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005422:	4b17      	ldr	r3, [pc, #92]	; (8005480 <HAL_I2C_MspInit+0x80>)
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_I2C_MspInit+0x80>)
 8005428:	f043 0302 	orr.w	r3, r3, #2
 800542c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800542e:	4b14      	ldr	r3, [pc, #80]	; (8005480 <HAL_I2C_MspInit+0x80>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800543a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800543e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005440:	2312      	movs	r3, #18
 8005442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005444:	2301      	movs	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005448:	2303      	movs	r3, #3
 800544a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800544c:	2304      	movs	r3, #4
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	4619      	mov	r1, r3
 8005456:	480b      	ldr	r0, [pc, #44]	; (8005484 <HAL_I2C_MspInit+0x84>)
 8005458:	f7fb fa30 	bl	80008bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800545c:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_I2C_MspInit+0x80>)
 800545e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005460:	4a07      	ldr	r2, [pc, #28]	; (8005480 <HAL_I2C_MspInit+0x80>)
 8005462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005466:	6593      	str	r3, [r2, #88]	; 0x58
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HAL_I2C_MspInit+0x80>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005474:	bf00      	nop
 8005476:	3728      	adds	r7, #40	; 0x28
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40005400 	.word	0x40005400
 8005480:	40021000 	.word	0x40021000
 8005484:	48000400 	.word	0x48000400

08005488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800548e:	f7fb f86b 	bl	8000568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005492:	f000 f8d7 	bl	8005644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005496:	f7ff fefd 	bl	8005294 <MX_GPIO_Init>
  MX_SPI1_Init();
 800549a:	f000 f987 	bl	80057ac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800549e:	f000 fb1f 	bl	8005ae0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80054a2:	f7ff ff6f 	bl	8005384 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    myNRF.hspi = &hspi1;														// You should make this definition at CubeMX
 80054a6:	4b54      	ldr	r3, [pc, #336]	; (80055f8 <main+0x170>)
 80054a8:	4a54      	ldr	r2, [pc, #336]	; (80055fc <main+0x174>)
 80054aa:	601a      	str	r2, [r3, #0]
  	myNRF.CRC_Width = nRF_CRC_WIDTH_HALFWORD;
 80054ac:	4b52      	ldr	r3, [pc, #328]	; (80055f8 <main+0x170>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	711a      	strb	r2, [r3, #4]
  	myNRF.ADDR_Width = nRF_ADDR_WIDTH_5;
 80054b2:	4b51      	ldr	r3, [pc, #324]	; (80055f8 <main+0x170>)
 80054b4:	2203      	movs	r2, #3
 80054b6:	715a      	strb	r2, [r3, #5]
  	myNRF.Data_Rate = nRF_DATA_RATE_2MBPS;
 80054b8:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <main+0x170>)
 80054ba:	2202      	movs	r2, #2
 80054bc:	719a      	strb	r2, [r3, #6]
  	myNRF.TX_Power = nRF_TX_PWR_0dBm;
 80054be:	4b4e      	ldr	r3, [pc, #312]	; (80055f8 <main+0x170>)
 80054c0:	2203      	movs	r2, #3
 80054c2:	71da      	strb	r2, [r3, #7]
  	myNRF.State = nRF_STATE_RX;
 80054c4:	4b4c      	ldr	r3, [pc, #304]	; (80055f8 <main+0x170>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	721a      	strb	r2, [r3, #8]

  	myNRF.RF_Channel = 120;
 80054ca:	4b4b      	ldr	r3, [pc, #300]	; (80055f8 <main+0x170>)
 80054cc:	2278      	movs	r2, #120	; 0x78
 80054ce:	725a      	strb	r2, [r3, #9]
  	myNRF.PayloadWidth = nRF_RXPW_8BYTES;
 80054d0:	4b49      	ldr	r3, [pc, #292]	; (80055f8 <main+0x170>)
 80054d2:	2208      	movs	r2, #8
 80054d4:	729a      	strb	r2, [r3, #10]
  	myNRF.RetransmitCount = nRF_RETX_DISABLED;;
 80054d6:	4b48      	ldr	r3, [pc, #288]	; (80055f8 <main+0x170>)
 80054d8:	2200      	movs	r2, #0
 80054da:	72da      	strb	r2, [r3, #11]
  	myNRF.RetransmitDelay = nRF_RETX_DELAY_1000uS;
 80054dc:	4b46      	ldr	r3, [pc, #280]	; (80055f8 <main+0x170>)
 80054de:	2203      	movs	r2, #3
 80054e0:	731a      	strb	r2, [r3, #12]

  	myNRF.RX_Address = (uint8_t *)RXAddr;
 80054e2:	4b45      	ldr	r3, [pc, #276]	; (80055f8 <main+0x170>)
 80054e4:	4a46      	ldr	r2, [pc, #280]	; (8005600 <main+0x178>)
 80054e6:	611a      	str	r2, [r3, #16]
  	myNRF.TX_Address = (uint8_t *)TXAddr;
 80054e8:	4b43      	ldr	r3, [pc, #268]	; (80055f8 <main+0x170>)
 80054ea:	4a46      	ldr	r2, [pc, #280]	; (8005604 <main+0x17c>)
 80054ec:	615a      	str	r2, [r3, #20]

  	myNRF.RX_Buffer = RXBuffer;
 80054ee:	4b42      	ldr	r3, [pc, #264]	; (80055f8 <main+0x170>)
 80054f0:	4a45      	ldr	r2, [pc, #276]	; (8005608 <main+0x180>)
 80054f2:	61da      	str	r2, [r3, #28]
  	myNRF.TX_Buffer = TXBuffer;
 80054f4:	4b40      	ldr	r3, [pc, #256]	; (80055f8 <main+0x170>)
 80054f6:	4a45      	ldr	r2, [pc, #276]	; (800560c <main+0x184>)
 80054f8:	621a      	str	r2, [r3, #32]

  	myNRF.nRF_nSS_GPIO_PORT = nRF24_nSS_GPIO_Port;	// You should make this definition at CubeMX
 80054fa:	4b3f      	ldr	r3, [pc, #252]	; (80055f8 <main+0x170>)
 80054fc:	4a44      	ldr	r2, [pc, #272]	; (8005610 <main+0x188>)
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24
  	myNRF.nRF_nSS_GPIO_PIN = nRF24_nSS_Pin;					// You should make this definition at CubeMX
 8005500:	4b3d      	ldr	r3, [pc, #244]	; (80055f8 <main+0x170>)
 8005502:	2280      	movs	r2, #128	; 0x80
 8005504:	851a      	strh	r2, [r3, #40]	; 0x28

  	myNRF.nRF_CE_GPIO_PORT = nRF24_CE_GPIO_Port;		// You should make this definition at CubeMX
 8005506:	4b3c      	ldr	r3, [pc, #240]	; (80055f8 <main+0x170>)
 8005508:	4a42      	ldr	r2, [pc, #264]	; (8005614 <main+0x18c>)
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c
  	myNRF.nRF_CE_GPIO_PIN = nRF24_CE_Pin;						// You should make this definition at CubeMX
 800550c:	4b3a      	ldr	r3, [pc, #232]	; (80055f8 <main+0x170>)
 800550e:	2240      	movs	r2, #64	; 0x40
 8005510:	861a      	strh	r2, [r3, #48]	; 0x30

  	if(HAL_nRF24L01P_Init((nRF24L01P *)&myNRF) != HAL_OK)
 8005512:	4839      	ldr	r0, [pc, #228]	; (80055f8 <main+0x170>)
 8005514:	f7fe fc30 	bl	8003d78 <HAL_nRF24L01P_Init>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <main+0xa2>
  	{
  		printf("nRF24 Init fucked UP!\r\n");
 800551e:	483e      	ldr	r0, [pc, #248]	; (8005618 <main+0x190>)
 8005520:	f000 fc32 	bl	8005d88 <puts>
  		Error_Handler();
 8005524:	f000 f934 	bl	8005790 <Error_Handler>
 8005528:	e002      	b.n	8005530 <main+0xa8>
  	} else {
  		printf("nRF24 Init is OK!\r\n");
 800552a:	483c      	ldr	r0, [pc, #240]	; (800561c <main+0x194>)
 800552c:	f000 fc2c 	bl	8005d88 <puts>
  	}

  	uartSent = 1;
 8005530:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <main+0x198>)
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]

  	printf("Application has started!\r\n");
 8005536:	483b      	ldr	r0, [pc, #236]	; (8005624 <main+0x19c>)
 8005538:	f000 fc26 	bl	8005d88 <puts>

  	SSD1306_Init();
 800553c:	f7ff fc08 	bl	8004d50 <SSD1306_Init>
  	SSD1306_Fill(0);
 8005540:	2000      	movs	r0, #0
 8005542:	f7ff fcf7 	bl	8004f34 <SSD1306_Fill>
  	SSD1306_GotoXY(0,0);
 8005546:	2100      	movs	r1, #0
 8005548:	2000      	movs	r0, #0
 800554a:	f7ff fd6b 	bl	8005024 <SSD1306_GotoXY>
  	SSD1306_Puts("NRF24 Temp.", &Font_11x18, SSD1306_COLOR_WHITE);
 800554e:	2201      	movs	r2, #1
 8005550:	4935      	ldr	r1, [pc, #212]	; (8005628 <main+0x1a0>)
 8005552:	4836      	ldr	r0, [pc, #216]	; (800562c <main+0x1a4>)
 8005554:	f7ff fdfc 	bl	8005150 <SSD1306_Puts>
  	SSD1306_UpdateScreen();
 8005558:	f7ff fcbe 	bl	8004ed8 <SSD1306_UpdateScreen>
  	SSD1306_GotoXY(0,22);
 800555c:	2116      	movs	r1, #22
 800555e:	2000      	movs	r0, #0
 8005560:	f7ff fd60 	bl	8005024 <SSD1306_GotoXY>
  	SSD1306_Puts("Receiver", &Font_11x18, SSD1306_COLOR_WHITE);
 8005564:	2201      	movs	r2, #1
 8005566:	4930      	ldr	r1, [pc, #192]	; (8005628 <main+0x1a0>)
 8005568:	4831      	ldr	r0, [pc, #196]	; (8005630 <main+0x1a8>)
 800556a:	f7ff fdf1 	bl	8005150 <SSD1306_Puts>
  	SSD1306_UpdateScreen();
 800556e:	f7ff fcb3 	bl	8004ed8 <SSD1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if((myNRF.RX_Buffer[0] != 0x00) && !myNRF.Busy && uartSent)
 8005572:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <main+0x170>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f9      	beq.n	8005572 <main+0xea>
 800557e:	4b1e      	ldr	r3, [pc, #120]	; (80055f8 <main+0x170>)
 8005580:	7e1b      	ldrb	r3, [r3, #24]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f4      	bne.n	8005572 <main+0xea>
 8005588:	4b25      	ldr	r3, [pc, #148]	; (8005620 <main+0x198>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <main+0xea>
	  		{
		        sprintf(strrec,"%s",myNRF.RX_Buffer);
 8005590:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <main+0x170>)
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	461a      	mov	r2, r3
 8005596:	4927      	ldr	r1, [pc, #156]	; (8005634 <main+0x1ac>)
 8005598:	4827      	ldr	r0, [pc, #156]	; (8005638 <main+0x1b0>)
 800559a:	f000 fbfd 	bl	8005d98 <siprintf>
		        for (int i=5;i<8;i++)
 800559e:	2305      	movs	r3, #5
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	e007      	b.n	80055b4 <main+0x12c>
		        	 strrec[i]='\0';
 80055a4:	4a24      	ldr	r2, [pc, #144]	; (8005638 <main+0x1b0>)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4413      	add	r3, r2
 80055aa:	2200      	movs	r2, #0
 80055ac:	701a      	strb	r2, [r3, #0]
		        for (int i=5;i<8;i++)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3301      	adds	r3, #1
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b07      	cmp	r3, #7
 80055b8:	ddf4      	ble.n	80055a4 <main+0x11c>
	  			SSD1306_GotoXY(0,45);
 80055ba:	212d      	movs	r1, #45	; 0x2d
 80055bc:	2000      	movs	r0, #0
 80055be:	f7ff fd31 	bl	8005024 <SSD1306_GotoXY>
	  			SSD1306_Puts("Temp:", &Font_11x18, SSD1306_COLOR_WHITE);
 80055c2:	2201      	movs	r2, #1
 80055c4:	4918      	ldr	r1, [pc, #96]	; (8005628 <main+0x1a0>)
 80055c6:	481d      	ldr	r0, [pc, #116]	; (800563c <main+0x1b4>)
 80055c8:	f7ff fdc2 	bl	8005150 <SSD1306_Puts>
	  			SSD1306_UpdateScreen();
 80055cc:	f7ff fc84 	bl	8004ed8 <SSD1306_UpdateScreen>
	  			SSD1306_GotoXY(62,45);
 80055d0:	212d      	movs	r1, #45	; 0x2d
 80055d2:	203e      	movs	r0, #62	; 0x3e
 80055d4:	f7ff fd26 	bl	8005024 <SSD1306_GotoXY>
	  			SSD1306_Puts(strrec, &Font_11x18, SSD1306_COLOR_WHITE);
 80055d8:	2201      	movs	r2, #1
 80055da:	4913      	ldr	r1, [pc, #76]	; (8005628 <main+0x1a0>)
 80055dc:	4816      	ldr	r0, [pc, #88]	; (8005638 <main+0x1b0>)
 80055de:	f7ff fdb7 	bl	8005150 <SSD1306_Puts>
	  		    SSD1306_UpdateScreen();
 80055e2:	f7ff fc79 	bl	8004ed8 <SSD1306_UpdateScreen>
	  			printf("%s\r\n",strrec);
 80055e6:	4914      	ldr	r1, [pc, #80]	; (8005638 <main+0x1b0>)
 80055e8:	4815      	ldr	r0, [pc, #84]	; (8005640 <main+0x1b8>)
 80055ea:	f000 fb47 	bl	8005c7c <iprintf>
	  			uartSent = 0;
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <main+0x198>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
	  if((myNRF.RX_Buffer[0] != 0x00) && !myNRF.Busy && uartSent)
 80055f4:	e7bd      	b.n	8005572 <main+0xea>
 80055f6:	bf00      	nop
 80055f8:	2000055c 	.word	0x2000055c
 80055fc:	20000590 	.word	0x20000590
 8005600:	08007dc0 	.word	0x08007dc0
 8005604:	08007dc8 	.word	0x08007dc8
 8005608:	2000051c 	.word	0x2000051c
 800560c:	200004fc 	.word	0x200004fc
 8005610:	48000800 	.word	0x48000800
 8005614:	48000400 	.word	0x48000400
 8005618:	08006fd0 	.word	0x08006fd0
 800561c:	08006fe8 	.word	0x08006fe8
 8005620:	200004f8 	.word	0x200004f8
 8005624:	08006ffc 	.word	0x08006ffc
 8005628:	20000008 	.word	0x20000008
 800562c:	08007018 	.word	0x08007018
 8005630:	08007024 	.word	0x08007024
 8005634:	08007030 	.word	0x08007030
 8005638:	2000053c 	.word	0x2000053c
 800563c:	08007034 	.word	0x08007034
 8005640:	0800703c 	.word	0x0800703c

08005644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b0b8      	sub	sp, #224	; 0xe0
 8005648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800564a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800564e:	2244      	movs	r2, #68	; 0x44
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fb0a 	bl	8005c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005658:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	605a      	str	r2, [r3, #4]
 8005662:	609a      	str	r2, [r3, #8]
 8005664:	60da      	str	r2, [r3, #12]
 8005666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005668:	463b      	mov	r3, r7
 800566a:	2288      	movs	r2, #136	; 0x88
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fafc 	bl	8005c6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005674:	2302      	movs	r3, #2
 8005676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800567a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800567e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005682:	2310      	movs	r3, #16
 8005684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005688:	2302      	movs	r3, #2
 800568a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800568e:	2302      	movs	r3, #2
 8005690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005694:	2301      	movs	r3, #1
 8005696:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800569a:	230a      	movs	r3, #10
 800569c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80056a0:	2307      	movs	r3, #7
 80056a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80056a6:	2302      	movs	r3, #2
 80056a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80056ac:	2302      	movs	r3, #2
 80056ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fb ffd6 	bl	8001668 <HAL_RCC_OscConfig>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80056c2:	f000 f865 	bl	8005790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056c6:	230f      	movs	r3, #15
 80056c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056cc:	2303      	movs	r3, #3
 80056ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80056e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80056e8:	2104      	movs	r1, #4
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fc fba2 	bl	8001e34 <HAL_RCC_ClockConfig>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80056f6:	f000 f84b 	bl	8005790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80056fa:	2342      	movs	r3, #66	; 0x42
 80056fc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005702:	2300      	movs	r3, #0
 8005704:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005706:	463b      	mov	r3, r7
 8005708:	4618      	mov	r0, r3
 800570a:	f7fc fd99 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005714:	f000 f83c 	bl	8005790 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005718:	f44f 7000 	mov.w	r0, #512	; 0x200
 800571c:	f7fb ff4e 	bl	80015bc <HAL_PWREx_ControlVoltageScaling>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8005726:	f000 f833 	bl	8005790 <Error_Handler>
  }
}
 800572a:	bf00      	nop
 800572c:	37e0      	adds	r7, #224	; 0xe0
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == nRF24_INT_Pin)
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005744:	d10a      	bne.n	800575c <HAL_GPIO_EXTI_Callback+0x28>
	{
		//HAL_UART_Transmit(&huart1, (uint8_t *)"Interrupt is OK!\r\n", 19, 250);
		if(HAL_nRF24L01P_IRQ_Handler((nRF24L01P *)&myNRF) != HAL_OK)
 8005746:	4807      	ldr	r0, [pc, #28]	; (8005764 <HAL_GPIO_EXTI_Callback+0x30>)
 8005748:	f7fe fc4d 	bl	8003fe6 <HAL_nRF24L01P_IRQ_Handler>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_GPIO_EXTI_Callback+0x22>
		{
			Error_Handler();
 8005752:	f000 f81d 	bl	8005790 <Error_Handler>
		}
		/*HAL_nRF24L01P_ReadRegister(&myNRF, nRF_STATUS, &regStatus);
		HAL_UART_Transmit(&huart1, (uint8_t *)"Status >", 8, 250);
		HAL_UART_Transmit(&huart1, &regStatus, 1, 250);
		HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 250);*/
		uartSent = 1;
 8005756:	4b04      	ldr	r3, [pc, #16]	; (8005768 <HAL_GPIO_EXTI_Callback+0x34>)
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
	}
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	2000055c 	.word	0x2000055c
 8005768:	200004f8 	.word	0x200004f8

0800576c <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8005774:	1d39      	adds	r1, r7, #4
 8005776:	2364      	movs	r3, #100	; 0x64
 8005778:	2201      	movs	r2, #1
 800577a:	4804      	ldr	r0, [pc, #16]	; (800578c <__io_putchar+0x20>)
 800577c:	f7fd fe7c 	bl	8003478 <HAL_UART_Transmit>

return ch;
 8005780:	687b      	ldr	r3, [r7, #4]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200005f4 	.word	0x200005f4

08005790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005794:	b672      	cpsid	i
}
 8005796:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  while(1) {
	  	printf("There was something wrong!\n\r");
 8005798:	4803      	ldr	r0, [pc, #12]	; (80057a8 <Error_Handler+0x18>)
 800579a:	f000 fa6f 	bl	8005c7c <iprintf>
	  		HAL_Delay(1000);
 800579e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057a2:	f7fa ff55 	bl	8000650 <HAL_Delay>
	  	printf("There was something wrong!\n\r");
 80057a6:	e7f7      	b.n	8005798 <Error_Handler+0x8>
 80057a8:	08007044 	.word	0x08007044

080057ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <MX_SPI1_Init+0x74>)
 80057b2:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <MX_SPI1_Init+0x78>)
 80057b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <MX_SPI1_Init+0x74>)
 80057b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80057bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80057be:	4b18      	ldr	r3, [pc, #96]	; (8005820 <MX_SPI1_Init+0x74>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80057c4:	4b16      	ldr	r3, [pc, #88]	; (8005820 <MX_SPI1_Init+0x74>)
 80057c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80057ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <MX_SPI1_Init+0x74>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <MX_SPI1_Init+0x74>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80057d8:	4b11      	ldr	r3, [pc, #68]	; (8005820 <MX_SPI1_Init+0x74>)
 80057da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80057e0:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <MX_SPI1_Init+0x74>)
 80057e2:	2218      	movs	r2, #24
 80057e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80057e6:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <MX_SPI1_Init+0x74>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <MX_SPI1_Init+0x74>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <MX_SPI1_Init+0x74>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80057f8:	4b09      	ldr	r3, [pc, #36]	; (8005820 <MX_SPI1_Init+0x74>)
 80057fa:	2207      	movs	r2, #7
 80057fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <MX_SPI1_Init+0x74>)
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <MX_SPI1_Init+0x74>)
 8005806:	2208      	movs	r2, #8
 8005808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800580a:	4805      	ldr	r0, [pc, #20]	; (8005820 <MX_SPI1_Init+0x74>)
 800580c:	f7fd f9d4 	bl	8002bb8 <HAL_SPI_Init>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005816:	f7ff ffbb 	bl	8005790 <Error_Handler>
  }

}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000590 	.word	0x20000590
 8005824:	40013000 	.word	0x40013000

08005828 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08a      	sub	sp, #40	; 0x28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005830:	f107 0314 	add.w	r3, r7, #20
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <HAL_SPI_MspInit+0x7c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d128      	bne.n	800589c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <HAL_SPI_MspInit+0x80>)
 800584c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584e:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <HAL_SPI_MspInit+0x80>)
 8005850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005854:	6613      	str	r3, [r2, #96]	; 0x60
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <HAL_SPI_MspInit+0x80>)
 8005858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005862:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <HAL_SPI_MspInit+0x80>)
 8005864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005866:	4a10      	ldr	r2, [pc, #64]	; (80058a8 <HAL_SPI_MspInit+0x80>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800586e:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <HAL_SPI_MspInit+0x80>)
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800587a:	23e0      	movs	r3, #224	; 0xe0
 800587c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587e:	2302      	movs	r3, #2
 8005880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005886:	2303      	movs	r3, #3
 8005888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800588a:	2305      	movs	r3, #5
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	4619      	mov	r1, r3
 8005894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005898:	f7fb f810 	bl	80008bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800589c:	bf00      	nop
 800589e:	3728      	adds	r7, #40	; 0x28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40013000 	.word	0x40013000
 80058a8:	40021000 	.word	0x40021000

080058ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <HAL_MspInit+0x44>)
 80058b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b6:	4a0e      	ldr	r2, [pc, #56]	; (80058f0 <HAL_MspInit+0x44>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	6613      	str	r3, [r2, #96]	; 0x60
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <HAL_MspInit+0x44>)
 80058c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_MspInit+0x44>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <HAL_MspInit+0x44>)
 80058d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d4:	6593      	str	r3, [r2, #88]	; 0x58
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <HAL_MspInit+0x44>)
 80058d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80058e2:	2005      	movs	r0, #5
 80058e4:	f7fa ffa8 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058e8:	bf00      	nop
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40021000 	.word	0x40021000

080058f4 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058f8:	bf00      	nop
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005902:	b480      	push	{r7}
 8005904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005914:	f7fa fe7c 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005918:	bf00      	nop
 800591a:	bd80      	pop	{r7, pc}

0800591c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005920:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005924:	f7fb f98c 	bl	8000c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005928:	bf00      	nop
 800592a:	bd80      	pop	{r7, pc}

0800592c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e00a      	b.n	8005954 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800593e:	f3af 8000 	nop.w
 8005942:	4601      	mov	r1, r0
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	60ba      	str	r2, [r7, #8]
 800594a:	b2ca      	uxtb	r2, r1
 800594c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3301      	adds	r3, #1
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	dbf0      	blt.n	800593e <_read+0x12>
	}

return len;
 800595c:	687b      	ldr	r3, [r7, #4]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e009      	b.n	800598c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	60ba      	str	r2, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fef3 	bl	800576c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	3301      	adds	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	dbf1      	blt.n	8005978 <_write+0x12>
	}
	return len;
 8005994:	687b      	ldr	r3, [r7, #4]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <_close>:

int _close(int file)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
	return -1;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059c6:	605a      	str	r2, [r3, #4]
	return 0;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <_isatty>:

int _isatty(int file)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
	return 1;
 80059de:	2301      	movs	r3, #1
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	return 0;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a10:	4a14      	ldr	r2, [pc, #80]	; (8005a64 <_sbrk+0x5c>)
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <_sbrk+0x60>)
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a1c:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <_sbrk+0x64>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d102      	bne.n	8005a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <_sbrk+0x64>)
 8005a26:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <_sbrk+0x68>)
 8005a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <_sbrk+0x64>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4413      	add	r3, r2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d207      	bcs.n	8005a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a38:	f000 f8ee 	bl	8005c18 <__errno>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	220c      	movs	r2, #12
 8005a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a46:	e009      	b.n	8005a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a48:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <_sbrk+0x64>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a4e:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <_sbrk+0x64>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4413      	add	r3, r2
 8005a56:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <_sbrk+0x64>)
 8005a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20018000 	.word	0x20018000
 8005a68:	00000600 	.word	0x00000600
 8005a6c:	2000049c 	.word	0x2000049c
 8005a70:	20000688 	.word	0x20000688

08005a74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <SystemInit+0x64>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <SystemInit+0x64>)
 8005a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005a88:	4b14      	ldr	r3, [pc, #80]	; (8005adc <SystemInit+0x68>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a13      	ldr	r2, [pc, #76]	; (8005adc <SystemInit+0x68>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <SystemInit+0x68>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <SystemInit+0x68>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a0f      	ldr	r2, [pc, #60]	; (8005adc <SystemInit+0x68>)
 8005aa0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005aa4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005aa8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <SystemInit+0x68>)
 8005aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ab0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <SystemInit+0x68>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a09      	ldr	r2, [pc, #36]	; (8005adc <SystemInit+0x68>)
 8005ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005abc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <SystemInit+0x68>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <SystemInit+0x64>)
 8005ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005aca:	609a      	str	r2, [r3, #8]
#endif
}
 8005acc:	bf00      	nop
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	e000ed00 	.word	0xe000ed00
 8005adc:	40021000 	.word	0x40021000

08005ae0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005ae4:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005ae6:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <MX_USART2_UART_Init+0x5c>)
 8005ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005af2:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005b06:	220c      	movs	r2, #12
 8005b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <MX_USART2_UART_Init+0x58>)
 8005b24:	f7fd fc5a 	bl	80033dc <HAL_UART_Init>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005b2e:	f7ff fe2f 	bl	8005790 <Error_Handler>
  }

}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	200005f4 	.word	0x200005f4
 8005b3c:	40004400 	.word	0x40004400

08005b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b48:	f107 0314 	add.w	r3, r7, #20
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <HAL_UART_MspInit+0x7c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d128      	bne.n	8005bb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b62:	4b17      	ldr	r3, [pc, #92]	; (8005bc0 <HAL_UART_MspInit+0x80>)
 8005b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b66:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <HAL_UART_MspInit+0x80>)
 8005b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b6e:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <HAL_UART_MspInit+0x80>)
 8005b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b7a:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <HAL_UART_MspInit+0x80>)
 8005b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <HAL_UART_MspInit+0x80>)
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b86:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <HAL_UART_MspInit+0x80>)
 8005b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b92:	230c      	movs	r3, #12
 8005b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b96:	2302      	movs	r3, #2
 8005b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ba2:	2307      	movs	r3, #7
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba6:	f107 0314 	add.w	r3, r7, #20
 8005baa:	4619      	mov	r1, r3
 8005bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bb0:	f7fa fe84 	bl	80008bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	3728      	adds	r7, #40	; 0x28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40004400 	.word	0x40004400
 8005bc0:	40021000 	.word	0x40021000

08005bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005bc8:	f7ff ff54 	bl	8005a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005bcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005bce:	e003      	b.n	8005bd8 <LoopCopyDataInit>

08005bd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005bd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005bd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005bd6:	3104      	adds	r1, #4

08005bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005bd8:	480a      	ldr	r0, [pc, #40]	; (8005c04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005bdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005bde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005be0:	d3f6      	bcc.n	8005bd0 <CopyDataInit>
	ldr	r2, =_sbss
 8005be2:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005be4:	e002      	b.n	8005bec <LoopFillZerobss>

08005be6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005be6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005be8:	f842 3b04 	str.w	r3, [r2], #4

08005bec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005bec:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <LoopForever+0x16>)
	cmp	r2, r3
 8005bee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005bf0:	d3f9      	bcc.n	8005be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005bf2:	f000 f817 	bl	8005c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005bf6:	f7ff fc47 	bl	8005488 <main>

08005bfa <LoopForever>:

LoopForever:
    b LoopForever
 8005bfa:	e7fe      	b.n	8005bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005bfc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005c00:	08007ec0 	.word	0x08007ec0
	ldr	r0, =_sdata
 8005c04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005c08:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8005c0c:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8005c10:	20000684 	.word	0x20000684

08005c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005c14:	e7fe      	b.n	8005c14 <ADC1_2_IRQHandler>
	...

08005c18 <__errno>:
 8005c18:	4b01      	ldr	r3, [pc, #4]	; (8005c20 <__errno+0x8>)
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000014 	.word	0x20000014

08005c24 <__libc_init_array>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	4d0d      	ldr	r5, [pc, #52]	; (8005c5c <__libc_init_array+0x38>)
 8005c28:	4c0d      	ldr	r4, [pc, #52]	; (8005c60 <__libc_init_array+0x3c>)
 8005c2a:	1b64      	subs	r4, r4, r5
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	2600      	movs	r6, #0
 8005c30:	42a6      	cmp	r6, r4
 8005c32:	d109      	bne.n	8005c48 <__libc_init_array+0x24>
 8005c34:	4d0b      	ldr	r5, [pc, #44]	; (8005c64 <__libc_init_array+0x40>)
 8005c36:	4c0c      	ldr	r4, [pc, #48]	; (8005c68 <__libc_init_array+0x44>)
 8005c38:	f001 f9be 	bl	8006fb8 <_init>
 8005c3c:	1b64      	subs	r4, r4, r5
 8005c3e:	10a4      	asrs	r4, r4, #2
 8005c40:	2600      	movs	r6, #0
 8005c42:	42a6      	cmp	r6, r4
 8005c44:	d105      	bne.n	8005c52 <__libc_init_array+0x2e>
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4c:	4798      	blx	r3
 8005c4e:	3601      	adds	r6, #1
 8005c50:	e7ee      	b.n	8005c30 <__libc_init_array+0xc>
 8005c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c56:	4798      	blx	r3
 8005c58:	3601      	adds	r6, #1
 8005c5a:	e7f2      	b.n	8005c42 <__libc_init_array+0x1e>
 8005c5c:	08007eb8 	.word	0x08007eb8
 8005c60:	08007eb8 	.word	0x08007eb8
 8005c64:	08007eb8 	.word	0x08007eb8
 8005c68:	08007ebc 	.word	0x08007ebc

08005c6c <memset>:
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d100      	bne.n	8005c76 <memset+0xa>
 8005c74:	4770      	bx	lr
 8005c76:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7a:	e7f9      	b.n	8005c70 <memset+0x4>

08005c7c <iprintf>:
 8005c7c:	b40f      	push	{r0, r1, r2, r3}
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <iprintf+0x2c>)
 8005c80:	b513      	push	{r0, r1, r4, lr}
 8005c82:	681c      	ldr	r4, [r3, #0]
 8005c84:	b124      	cbz	r4, 8005c90 <iprintf+0x14>
 8005c86:	69a3      	ldr	r3, [r4, #24]
 8005c88:	b913      	cbnz	r3, 8005c90 <iprintf+0x14>
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fa7e 	bl	800618c <__sinit>
 8005c90:	ab05      	add	r3, sp, #20
 8005c92:	9a04      	ldr	r2, [sp, #16]
 8005c94:	68a1      	ldr	r1, [r4, #8]
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fdab 	bl	80067f4 <_vfiprintf_r>
 8005c9e:	b002      	add	sp, #8
 8005ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca4:	b004      	add	sp, #16
 8005ca6:	4770      	bx	lr
 8005ca8:	20000014 	.word	0x20000014

08005cac <_puts_r>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	460e      	mov	r6, r1
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	b118      	cbz	r0, 8005cbc <_puts_r+0x10>
 8005cb4:	6983      	ldr	r3, [r0, #24]
 8005cb6:	b90b      	cbnz	r3, 8005cbc <_puts_r+0x10>
 8005cb8:	f000 fa68 	bl	800618c <__sinit>
 8005cbc:	69ab      	ldr	r3, [r5, #24]
 8005cbe:	68ac      	ldr	r4, [r5, #8]
 8005cc0:	b913      	cbnz	r3, 8005cc8 <_puts_r+0x1c>
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 fa62 	bl	800618c <__sinit>
 8005cc8:	4b2c      	ldr	r3, [pc, #176]	; (8005d7c <_puts_r+0xd0>)
 8005cca:	429c      	cmp	r4, r3
 8005ccc:	d120      	bne.n	8005d10 <_puts_r+0x64>
 8005cce:	686c      	ldr	r4, [r5, #4]
 8005cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cd2:	07db      	lsls	r3, r3, #31
 8005cd4:	d405      	bmi.n	8005ce2 <_puts_r+0x36>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	0598      	lsls	r0, r3, #22
 8005cda:	d402      	bmi.n	8005ce2 <_puts_r+0x36>
 8005cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cde:	f000 faf3 	bl	80062c8 <__retarget_lock_acquire_recursive>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	0719      	lsls	r1, r3, #28
 8005ce6:	d51d      	bpl.n	8005d24 <_puts_r+0x78>
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	b1db      	cbz	r3, 8005d24 <_puts_r+0x78>
 8005cec:	3e01      	subs	r6, #1
 8005cee:	68a3      	ldr	r3, [r4, #8]
 8005cf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	60a3      	str	r3, [r4, #8]
 8005cf8:	bb39      	cbnz	r1, 8005d4a <_puts_r+0x9e>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da38      	bge.n	8005d70 <_puts_r+0xc4>
 8005cfe:	4622      	mov	r2, r4
 8005d00:	210a      	movs	r1, #10
 8005d02:	4628      	mov	r0, r5
 8005d04:	f000 f868 	bl	8005dd8 <__swbuf_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d011      	beq.n	8005d30 <_puts_r+0x84>
 8005d0c:	250a      	movs	r5, #10
 8005d0e:	e011      	b.n	8005d34 <_puts_r+0x88>
 8005d10:	4b1b      	ldr	r3, [pc, #108]	; (8005d80 <_puts_r+0xd4>)
 8005d12:	429c      	cmp	r4, r3
 8005d14:	d101      	bne.n	8005d1a <_puts_r+0x6e>
 8005d16:	68ac      	ldr	r4, [r5, #8]
 8005d18:	e7da      	b.n	8005cd0 <_puts_r+0x24>
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <_puts_r+0xd8>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	bf08      	it	eq
 8005d20:	68ec      	ldreq	r4, [r5, #12]
 8005d22:	e7d5      	b.n	8005cd0 <_puts_r+0x24>
 8005d24:	4621      	mov	r1, r4
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 f8a8 	bl	8005e7c <__swsetup_r>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d0dd      	beq.n	8005cec <_puts_r+0x40>
 8005d30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d36:	07da      	lsls	r2, r3, #31
 8005d38:	d405      	bmi.n	8005d46 <_puts_r+0x9a>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	059b      	lsls	r3, r3, #22
 8005d3e:	d402      	bmi.n	8005d46 <_puts_r+0x9a>
 8005d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d42:	f000 fac2 	bl	80062ca <__retarget_lock_release_recursive>
 8005d46:	4628      	mov	r0, r5
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	da04      	bge.n	8005d58 <_puts_r+0xac>
 8005d4e:	69a2      	ldr	r2, [r4, #24]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	dc06      	bgt.n	8005d62 <_puts_r+0xb6>
 8005d54:	290a      	cmp	r1, #10
 8005d56:	d004      	beq.n	8005d62 <_puts_r+0xb6>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	6022      	str	r2, [r4, #0]
 8005d5e:	7019      	strb	r1, [r3, #0]
 8005d60:	e7c5      	b.n	8005cee <_puts_r+0x42>
 8005d62:	4622      	mov	r2, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	f000 f837 	bl	8005dd8 <__swbuf_r>
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d1bf      	bne.n	8005cee <_puts_r+0x42>
 8005d6e:	e7df      	b.n	8005d30 <_puts_r+0x84>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	250a      	movs	r5, #10
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	6022      	str	r2, [r4, #0]
 8005d78:	701d      	strb	r5, [r3, #0]
 8005d7a:	e7db      	b.n	8005d34 <_puts_r+0x88>
 8005d7c:	08007e3c 	.word	0x08007e3c
 8005d80:	08007e5c 	.word	0x08007e5c
 8005d84:	08007e1c 	.word	0x08007e1c

08005d88 <puts>:
 8005d88:	4b02      	ldr	r3, [pc, #8]	; (8005d94 <puts+0xc>)
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	f7ff bf8d 	b.w	8005cac <_puts_r>
 8005d92:	bf00      	nop
 8005d94:	20000014 	.word	0x20000014

08005d98 <siprintf>:
 8005d98:	b40e      	push	{r1, r2, r3}
 8005d9a:	b500      	push	{lr}
 8005d9c:	b09c      	sub	sp, #112	; 0x70
 8005d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8005da0:	9002      	str	r0, [sp, #8]
 8005da2:	9006      	str	r0, [sp, #24]
 8005da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005da8:	4809      	ldr	r0, [pc, #36]	; (8005dd0 <siprintf+0x38>)
 8005daa:	9107      	str	r1, [sp, #28]
 8005dac:	9104      	str	r1, [sp, #16]
 8005dae:	4909      	ldr	r1, [pc, #36]	; (8005dd4 <siprintf+0x3c>)
 8005db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db4:	9105      	str	r1, [sp, #20]
 8005db6:	6800      	ldr	r0, [r0, #0]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	a902      	add	r1, sp, #8
 8005dbc:	f000 fbf0 	bl	80065a0 <_svfiprintf_r>
 8005dc0:	9b02      	ldr	r3, [sp, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	b01c      	add	sp, #112	; 0x70
 8005dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dcc:	b003      	add	sp, #12
 8005dce:	4770      	bx	lr
 8005dd0:	20000014 	.word	0x20000014
 8005dd4:	ffff0208 	.word	0xffff0208

08005dd8 <__swbuf_r>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	460e      	mov	r6, r1
 8005ddc:	4614      	mov	r4, r2
 8005dde:	4605      	mov	r5, r0
 8005de0:	b118      	cbz	r0, 8005dea <__swbuf_r+0x12>
 8005de2:	6983      	ldr	r3, [r0, #24]
 8005de4:	b90b      	cbnz	r3, 8005dea <__swbuf_r+0x12>
 8005de6:	f000 f9d1 	bl	800618c <__sinit>
 8005dea:	4b21      	ldr	r3, [pc, #132]	; (8005e70 <__swbuf_r+0x98>)
 8005dec:	429c      	cmp	r4, r3
 8005dee:	d12b      	bne.n	8005e48 <__swbuf_r+0x70>
 8005df0:	686c      	ldr	r4, [r5, #4]
 8005df2:	69a3      	ldr	r3, [r4, #24]
 8005df4:	60a3      	str	r3, [r4, #8]
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	071a      	lsls	r2, r3, #28
 8005dfa:	d52f      	bpl.n	8005e5c <__swbuf_r+0x84>
 8005dfc:	6923      	ldr	r3, [r4, #16]
 8005dfe:	b36b      	cbz	r3, 8005e5c <__swbuf_r+0x84>
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	6820      	ldr	r0, [r4, #0]
 8005e04:	1ac0      	subs	r0, r0, r3
 8005e06:	6963      	ldr	r3, [r4, #20]
 8005e08:	b2f6      	uxtb	r6, r6
 8005e0a:	4283      	cmp	r3, r0
 8005e0c:	4637      	mov	r7, r6
 8005e0e:	dc04      	bgt.n	8005e1a <__swbuf_r+0x42>
 8005e10:	4621      	mov	r1, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f926 	bl	8006064 <_fflush_r>
 8005e18:	bb30      	cbnz	r0, 8005e68 <__swbuf_r+0x90>
 8005e1a:	68a3      	ldr	r3, [r4, #8]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	60a3      	str	r3, [r4, #8]
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	6022      	str	r2, [r4, #0]
 8005e26:	701e      	strb	r6, [r3, #0]
 8005e28:	6963      	ldr	r3, [r4, #20]
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	4283      	cmp	r3, r0
 8005e2e:	d004      	beq.n	8005e3a <__swbuf_r+0x62>
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	07db      	lsls	r3, r3, #31
 8005e34:	d506      	bpl.n	8005e44 <__swbuf_r+0x6c>
 8005e36:	2e0a      	cmp	r6, #10
 8005e38:	d104      	bne.n	8005e44 <__swbuf_r+0x6c>
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f000 f911 	bl	8006064 <_fflush_r>
 8005e42:	b988      	cbnz	r0, 8005e68 <__swbuf_r+0x90>
 8005e44:	4638      	mov	r0, r7
 8005e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <__swbuf_r+0x9c>)
 8005e4a:	429c      	cmp	r4, r3
 8005e4c:	d101      	bne.n	8005e52 <__swbuf_r+0x7a>
 8005e4e:	68ac      	ldr	r4, [r5, #8]
 8005e50:	e7cf      	b.n	8005df2 <__swbuf_r+0x1a>
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <__swbuf_r+0xa0>)
 8005e54:	429c      	cmp	r4, r3
 8005e56:	bf08      	it	eq
 8005e58:	68ec      	ldreq	r4, [r5, #12]
 8005e5a:	e7ca      	b.n	8005df2 <__swbuf_r+0x1a>
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 f80c 	bl	8005e7c <__swsetup_r>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d0cb      	beq.n	8005e00 <__swbuf_r+0x28>
 8005e68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e6c:	e7ea      	b.n	8005e44 <__swbuf_r+0x6c>
 8005e6e:	bf00      	nop
 8005e70:	08007e3c 	.word	0x08007e3c
 8005e74:	08007e5c 	.word	0x08007e5c
 8005e78:	08007e1c 	.word	0x08007e1c

08005e7c <__swsetup_r>:
 8005e7c:	4b32      	ldr	r3, [pc, #200]	; (8005f48 <__swsetup_r+0xcc>)
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	681d      	ldr	r5, [r3, #0]
 8005e82:	4606      	mov	r6, r0
 8005e84:	460c      	mov	r4, r1
 8005e86:	b125      	cbz	r5, 8005e92 <__swsetup_r+0x16>
 8005e88:	69ab      	ldr	r3, [r5, #24]
 8005e8a:	b913      	cbnz	r3, 8005e92 <__swsetup_r+0x16>
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f000 f97d 	bl	800618c <__sinit>
 8005e92:	4b2e      	ldr	r3, [pc, #184]	; (8005f4c <__swsetup_r+0xd0>)
 8005e94:	429c      	cmp	r4, r3
 8005e96:	d10f      	bne.n	8005eb8 <__swsetup_r+0x3c>
 8005e98:	686c      	ldr	r4, [r5, #4]
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ea0:	0719      	lsls	r1, r3, #28
 8005ea2:	d42c      	bmi.n	8005efe <__swsetup_r+0x82>
 8005ea4:	06dd      	lsls	r5, r3, #27
 8005ea6:	d411      	bmi.n	8005ecc <__swsetup_r+0x50>
 8005ea8:	2309      	movs	r3, #9
 8005eaa:	6033      	str	r3, [r6, #0]
 8005eac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005eb0:	81a3      	strh	r3, [r4, #12]
 8005eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb6:	e03e      	b.n	8005f36 <__swsetup_r+0xba>
 8005eb8:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <__swsetup_r+0xd4>)
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d101      	bne.n	8005ec2 <__swsetup_r+0x46>
 8005ebe:	68ac      	ldr	r4, [r5, #8]
 8005ec0:	e7eb      	b.n	8005e9a <__swsetup_r+0x1e>
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <__swsetup_r+0xd8>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	bf08      	it	eq
 8005ec8:	68ec      	ldreq	r4, [r5, #12]
 8005eca:	e7e6      	b.n	8005e9a <__swsetup_r+0x1e>
 8005ecc:	0758      	lsls	r0, r3, #29
 8005ece:	d512      	bpl.n	8005ef6 <__swsetup_r+0x7a>
 8005ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed2:	b141      	cbz	r1, 8005ee6 <__swsetup_r+0x6a>
 8005ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	d002      	beq.n	8005ee2 <__swsetup_r+0x66>
 8005edc:	4630      	mov	r0, r6
 8005ede:	f000 fa59 	bl	8006394 <_free_r>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f043 0308 	orr.w	r3, r3, #8
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	b94b      	cbnz	r3, 8005f16 <__swsetup_r+0x9a>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0c:	d003      	beq.n	8005f16 <__swsetup_r+0x9a>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4630      	mov	r0, r6
 8005f12:	f000 f9ff 	bl	8006314 <__smakebuf_r>
 8005f16:	89a0      	ldrh	r0, [r4, #12]
 8005f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f1c:	f010 0301 	ands.w	r3, r0, #1
 8005f20:	d00a      	beq.n	8005f38 <__swsetup_r+0xbc>
 8005f22:	2300      	movs	r3, #0
 8005f24:	60a3      	str	r3, [r4, #8]
 8005f26:	6963      	ldr	r3, [r4, #20]
 8005f28:	425b      	negs	r3, r3
 8005f2a:	61a3      	str	r3, [r4, #24]
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	b943      	cbnz	r3, 8005f42 <__swsetup_r+0xc6>
 8005f30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f34:	d1ba      	bne.n	8005eac <__swsetup_r+0x30>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	0781      	lsls	r1, r0, #30
 8005f3a:	bf58      	it	pl
 8005f3c:	6963      	ldrpl	r3, [r4, #20]
 8005f3e:	60a3      	str	r3, [r4, #8]
 8005f40:	e7f4      	b.n	8005f2c <__swsetup_r+0xb0>
 8005f42:	2000      	movs	r0, #0
 8005f44:	e7f7      	b.n	8005f36 <__swsetup_r+0xba>
 8005f46:	bf00      	nop
 8005f48:	20000014 	.word	0x20000014
 8005f4c:	08007e3c 	.word	0x08007e3c
 8005f50:	08007e5c 	.word	0x08007e5c
 8005f54:	08007e1c 	.word	0x08007e1c

08005f58 <__sflush_r>:
 8005f58:	898a      	ldrh	r2, [r1, #12]
 8005f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5e:	4605      	mov	r5, r0
 8005f60:	0710      	lsls	r0, r2, #28
 8005f62:	460c      	mov	r4, r1
 8005f64:	d458      	bmi.n	8006018 <__sflush_r+0xc0>
 8005f66:	684b      	ldr	r3, [r1, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dc05      	bgt.n	8005f78 <__sflush_r+0x20>
 8005f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dc02      	bgt.n	8005f78 <__sflush_r+0x20>
 8005f72:	2000      	movs	r0, #0
 8005f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	d0f9      	beq.n	8005f72 <__sflush_r+0x1a>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f84:	682f      	ldr	r7, [r5, #0]
 8005f86:	602b      	str	r3, [r5, #0]
 8005f88:	d032      	beq.n	8005ff0 <__sflush_r+0x98>
 8005f8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	075a      	lsls	r2, r3, #29
 8005f90:	d505      	bpl.n	8005f9e <__sflush_r+0x46>
 8005f92:	6863      	ldr	r3, [r4, #4]
 8005f94:	1ac0      	subs	r0, r0, r3
 8005f96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f98:	b10b      	cbz	r3, 8005f9e <__sflush_r+0x46>
 8005f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f9c:	1ac0      	subs	r0, r0, r3
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fa4:	6a21      	ldr	r1, [r4, #32]
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b0      	blx	r6
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	d106      	bne.n	8005fbe <__sflush_r+0x66>
 8005fb0:	6829      	ldr	r1, [r5, #0]
 8005fb2:	291d      	cmp	r1, #29
 8005fb4:	d82c      	bhi.n	8006010 <__sflush_r+0xb8>
 8005fb6:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <__sflush_r+0x108>)
 8005fb8:	40ca      	lsrs	r2, r1
 8005fba:	07d6      	lsls	r6, r2, #31
 8005fbc:	d528      	bpl.n	8006010 <__sflush_r+0xb8>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	6062      	str	r2, [r4, #4]
 8005fc2:	04d9      	lsls	r1, r3, #19
 8005fc4:	6922      	ldr	r2, [r4, #16]
 8005fc6:	6022      	str	r2, [r4, #0]
 8005fc8:	d504      	bpl.n	8005fd4 <__sflush_r+0x7c>
 8005fca:	1c42      	adds	r2, r0, #1
 8005fcc:	d101      	bne.n	8005fd2 <__sflush_r+0x7a>
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	b903      	cbnz	r3, 8005fd4 <__sflush_r+0x7c>
 8005fd2:	6560      	str	r0, [r4, #84]	; 0x54
 8005fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fd6:	602f      	str	r7, [r5, #0]
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d0ca      	beq.n	8005f72 <__sflush_r+0x1a>
 8005fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	d002      	beq.n	8005fea <__sflush_r+0x92>
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f000 f9d5 	bl	8006394 <_free_r>
 8005fea:	2000      	movs	r0, #0
 8005fec:	6360      	str	r0, [r4, #52]	; 0x34
 8005fee:	e7c1      	b.n	8005f74 <__sflush_r+0x1c>
 8005ff0:	6a21      	ldr	r1, [r4, #32]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b0      	blx	r6
 8005ff8:	1c41      	adds	r1, r0, #1
 8005ffa:	d1c7      	bne.n	8005f8c <__sflush_r+0x34>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0c4      	beq.n	8005f8c <__sflush_r+0x34>
 8006002:	2b1d      	cmp	r3, #29
 8006004:	d001      	beq.n	800600a <__sflush_r+0xb2>
 8006006:	2b16      	cmp	r3, #22
 8006008:	d101      	bne.n	800600e <__sflush_r+0xb6>
 800600a:	602f      	str	r7, [r5, #0]
 800600c:	e7b1      	b.n	8005f72 <__sflush_r+0x1a>
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006014:	81a3      	strh	r3, [r4, #12]
 8006016:	e7ad      	b.n	8005f74 <__sflush_r+0x1c>
 8006018:	690f      	ldr	r7, [r1, #16]
 800601a:	2f00      	cmp	r7, #0
 800601c:	d0a9      	beq.n	8005f72 <__sflush_r+0x1a>
 800601e:	0793      	lsls	r3, r2, #30
 8006020:	680e      	ldr	r6, [r1, #0]
 8006022:	bf08      	it	eq
 8006024:	694b      	ldreq	r3, [r1, #20]
 8006026:	600f      	str	r7, [r1, #0]
 8006028:	bf18      	it	ne
 800602a:	2300      	movne	r3, #0
 800602c:	eba6 0807 	sub.w	r8, r6, r7
 8006030:	608b      	str	r3, [r1, #8]
 8006032:	f1b8 0f00 	cmp.w	r8, #0
 8006036:	dd9c      	ble.n	8005f72 <__sflush_r+0x1a>
 8006038:	6a21      	ldr	r1, [r4, #32]
 800603a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800603c:	4643      	mov	r3, r8
 800603e:	463a      	mov	r2, r7
 8006040:	4628      	mov	r0, r5
 8006042:	47b0      	blx	r6
 8006044:	2800      	cmp	r0, #0
 8006046:	dc06      	bgt.n	8006056 <__sflush_r+0xfe>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800604e:	81a3      	strh	r3, [r4, #12]
 8006050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006054:	e78e      	b.n	8005f74 <__sflush_r+0x1c>
 8006056:	4407      	add	r7, r0
 8006058:	eba8 0800 	sub.w	r8, r8, r0
 800605c:	e7e9      	b.n	8006032 <__sflush_r+0xda>
 800605e:	bf00      	nop
 8006060:	20400001 	.word	0x20400001

08006064 <_fflush_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	690b      	ldr	r3, [r1, #16]
 8006068:	4605      	mov	r5, r0
 800606a:	460c      	mov	r4, r1
 800606c:	b913      	cbnz	r3, 8006074 <_fflush_r+0x10>
 800606e:	2500      	movs	r5, #0
 8006070:	4628      	mov	r0, r5
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	b118      	cbz	r0, 800607e <_fflush_r+0x1a>
 8006076:	6983      	ldr	r3, [r0, #24]
 8006078:	b90b      	cbnz	r3, 800607e <_fflush_r+0x1a>
 800607a:	f000 f887 	bl	800618c <__sinit>
 800607e:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <_fflush_r+0x6c>)
 8006080:	429c      	cmp	r4, r3
 8006082:	d11b      	bne.n	80060bc <_fflush_r+0x58>
 8006084:	686c      	ldr	r4, [r5, #4]
 8006086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0ef      	beq.n	800606e <_fflush_r+0xa>
 800608e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006090:	07d0      	lsls	r0, r2, #31
 8006092:	d404      	bmi.n	800609e <_fflush_r+0x3a>
 8006094:	0599      	lsls	r1, r3, #22
 8006096:	d402      	bmi.n	800609e <_fflush_r+0x3a>
 8006098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800609a:	f000 f915 	bl	80062c8 <__retarget_lock_acquire_recursive>
 800609e:	4628      	mov	r0, r5
 80060a0:	4621      	mov	r1, r4
 80060a2:	f7ff ff59 	bl	8005f58 <__sflush_r>
 80060a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060a8:	07da      	lsls	r2, r3, #31
 80060aa:	4605      	mov	r5, r0
 80060ac:	d4e0      	bmi.n	8006070 <_fflush_r+0xc>
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	059b      	lsls	r3, r3, #22
 80060b2:	d4dd      	bmi.n	8006070 <_fflush_r+0xc>
 80060b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060b6:	f000 f908 	bl	80062ca <__retarget_lock_release_recursive>
 80060ba:	e7d9      	b.n	8006070 <_fflush_r+0xc>
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <_fflush_r+0x70>)
 80060be:	429c      	cmp	r4, r3
 80060c0:	d101      	bne.n	80060c6 <_fflush_r+0x62>
 80060c2:	68ac      	ldr	r4, [r5, #8]
 80060c4:	e7df      	b.n	8006086 <_fflush_r+0x22>
 80060c6:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <_fflush_r+0x74>)
 80060c8:	429c      	cmp	r4, r3
 80060ca:	bf08      	it	eq
 80060cc:	68ec      	ldreq	r4, [r5, #12]
 80060ce:	e7da      	b.n	8006086 <_fflush_r+0x22>
 80060d0:	08007e3c 	.word	0x08007e3c
 80060d4:	08007e5c 	.word	0x08007e5c
 80060d8:	08007e1c 	.word	0x08007e1c

080060dc <std>:
 80060dc:	2300      	movs	r3, #0
 80060de:	b510      	push	{r4, lr}
 80060e0:	4604      	mov	r4, r0
 80060e2:	e9c0 3300 	strd	r3, r3, [r0]
 80060e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ea:	6083      	str	r3, [r0, #8]
 80060ec:	8181      	strh	r1, [r0, #12]
 80060ee:	6643      	str	r3, [r0, #100]	; 0x64
 80060f0:	81c2      	strh	r2, [r0, #14]
 80060f2:	6183      	str	r3, [r0, #24]
 80060f4:	4619      	mov	r1, r3
 80060f6:	2208      	movs	r2, #8
 80060f8:	305c      	adds	r0, #92	; 0x5c
 80060fa:	f7ff fdb7 	bl	8005c6c <memset>
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <std+0x38>)
 8006100:	6263      	str	r3, [r4, #36]	; 0x24
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <std+0x3c>)
 8006104:	62a3      	str	r3, [r4, #40]	; 0x28
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <std+0x40>)
 8006108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800610a:	4b05      	ldr	r3, [pc, #20]	; (8006120 <std+0x44>)
 800610c:	6224      	str	r4, [r4, #32]
 800610e:	6323      	str	r3, [r4, #48]	; 0x30
 8006110:	bd10      	pop	{r4, pc}
 8006112:	bf00      	nop
 8006114:	08006d9d 	.word	0x08006d9d
 8006118:	08006dbf 	.word	0x08006dbf
 800611c:	08006df7 	.word	0x08006df7
 8006120:	08006e1b 	.word	0x08006e1b

08006124 <_cleanup_r>:
 8006124:	4901      	ldr	r1, [pc, #4]	; (800612c <_cleanup_r+0x8>)
 8006126:	f000 b8af 	b.w	8006288 <_fwalk_reent>
 800612a:	bf00      	nop
 800612c:	08006065 	.word	0x08006065

08006130 <__sfmoreglue>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	1e4a      	subs	r2, r1, #1
 8006134:	2568      	movs	r5, #104	; 0x68
 8006136:	4355      	muls	r5, r2
 8006138:	460e      	mov	r6, r1
 800613a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800613e:	f000 f979 	bl	8006434 <_malloc_r>
 8006142:	4604      	mov	r4, r0
 8006144:	b140      	cbz	r0, 8006158 <__sfmoreglue+0x28>
 8006146:	2100      	movs	r1, #0
 8006148:	e9c0 1600 	strd	r1, r6, [r0]
 800614c:	300c      	adds	r0, #12
 800614e:	60a0      	str	r0, [r4, #8]
 8006150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006154:	f7ff fd8a 	bl	8005c6c <memset>
 8006158:	4620      	mov	r0, r4
 800615a:	bd70      	pop	{r4, r5, r6, pc}

0800615c <__sfp_lock_acquire>:
 800615c:	4801      	ldr	r0, [pc, #4]	; (8006164 <__sfp_lock_acquire+0x8>)
 800615e:	f000 b8b3 	b.w	80062c8 <__retarget_lock_acquire_recursive>
 8006162:	bf00      	nop
 8006164:	2000067c 	.word	0x2000067c

08006168 <__sfp_lock_release>:
 8006168:	4801      	ldr	r0, [pc, #4]	; (8006170 <__sfp_lock_release+0x8>)
 800616a:	f000 b8ae 	b.w	80062ca <__retarget_lock_release_recursive>
 800616e:	bf00      	nop
 8006170:	2000067c 	.word	0x2000067c

08006174 <__sinit_lock_acquire>:
 8006174:	4801      	ldr	r0, [pc, #4]	; (800617c <__sinit_lock_acquire+0x8>)
 8006176:	f000 b8a7 	b.w	80062c8 <__retarget_lock_acquire_recursive>
 800617a:	bf00      	nop
 800617c:	20000677 	.word	0x20000677

08006180 <__sinit_lock_release>:
 8006180:	4801      	ldr	r0, [pc, #4]	; (8006188 <__sinit_lock_release+0x8>)
 8006182:	f000 b8a2 	b.w	80062ca <__retarget_lock_release_recursive>
 8006186:	bf00      	nop
 8006188:	20000677 	.word	0x20000677

0800618c <__sinit>:
 800618c:	b510      	push	{r4, lr}
 800618e:	4604      	mov	r4, r0
 8006190:	f7ff fff0 	bl	8006174 <__sinit_lock_acquire>
 8006194:	69a3      	ldr	r3, [r4, #24]
 8006196:	b11b      	cbz	r3, 80061a0 <__sinit+0x14>
 8006198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619c:	f7ff bff0 	b.w	8006180 <__sinit_lock_release>
 80061a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061a4:	6523      	str	r3, [r4, #80]	; 0x50
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <__sinit+0x68>)
 80061a8:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <__sinit+0x6c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	bf04      	itt	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	61a3      	streq	r3, [r4, #24]
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 f820 	bl	80061fc <__sfp>
 80061bc:	6060      	str	r0, [r4, #4]
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 f81c 	bl	80061fc <__sfp>
 80061c4:	60a0      	str	r0, [r4, #8]
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 f818 	bl	80061fc <__sfp>
 80061cc:	2200      	movs	r2, #0
 80061ce:	60e0      	str	r0, [r4, #12]
 80061d0:	2104      	movs	r1, #4
 80061d2:	6860      	ldr	r0, [r4, #4]
 80061d4:	f7ff ff82 	bl	80060dc <std>
 80061d8:	68a0      	ldr	r0, [r4, #8]
 80061da:	2201      	movs	r2, #1
 80061dc:	2109      	movs	r1, #9
 80061de:	f7ff ff7d 	bl	80060dc <std>
 80061e2:	68e0      	ldr	r0, [r4, #12]
 80061e4:	2202      	movs	r2, #2
 80061e6:	2112      	movs	r1, #18
 80061e8:	f7ff ff78 	bl	80060dc <std>
 80061ec:	2301      	movs	r3, #1
 80061ee:	61a3      	str	r3, [r4, #24]
 80061f0:	e7d2      	b.n	8006198 <__sinit+0xc>
 80061f2:	bf00      	nop
 80061f4:	08007e18 	.word	0x08007e18
 80061f8:	08006125 	.word	0x08006125

080061fc <__sfp>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	4607      	mov	r7, r0
 8006200:	f7ff ffac 	bl	800615c <__sfp_lock_acquire>
 8006204:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <__sfp+0x84>)
 8006206:	681e      	ldr	r6, [r3, #0]
 8006208:	69b3      	ldr	r3, [r6, #24]
 800620a:	b913      	cbnz	r3, 8006212 <__sfp+0x16>
 800620c:	4630      	mov	r0, r6
 800620e:	f7ff ffbd 	bl	800618c <__sinit>
 8006212:	3648      	adds	r6, #72	; 0x48
 8006214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006218:	3b01      	subs	r3, #1
 800621a:	d503      	bpl.n	8006224 <__sfp+0x28>
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	b30b      	cbz	r3, 8006264 <__sfp+0x68>
 8006220:	6836      	ldr	r6, [r6, #0]
 8006222:	e7f7      	b.n	8006214 <__sfp+0x18>
 8006224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006228:	b9d5      	cbnz	r5, 8006260 <__sfp+0x64>
 800622a:	4b16      	ldr	r3, [pc, #88]	; (8006284 <__sfp+0x88>)
 800622c:	60e3      	str	r3, [r4, #12]
 800622e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006232:	6665      	str	r5, [r4, #100]	; 0x64
 8006234:	f000 f847 	bl	80062c6 <__retarget_lock_init_recursive>
 8006238:	f7ff ff96 	bl	8006168 <__sfp_lock_release>
 800623c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006244:	6025      	str	r5, [r4, #0]
 8006246:	61a5      	str	r5, [r4, #24]
 8006248:	2208      	movs	r2, #8
 800624a:	4629      	mov	r1, r5
 800624c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006250:	f7ff fd0c 	bl	8005c6c <memset>
 8006254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800625c:	4620      	mov	r0, r4
 800625e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006260:	3468      	adds	r4, #104	; 0x68
 8006262:	e7d9      	b.n	8006218 <__sfp+0x1c>
 8006264:	2104      	movs	r1, #4
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ff62 	bl	8006130 <__sfmoreglue>
 800626c:	4604      	mov	r4, r0
 800626e:	6030      	str	r0, [r6, #0]
 8006270:	2800      	cmp	r0, #0
 8006272:	d1d5      	bne.n	8006220 <__sfp+0x24>
 8006274:	f7ff ff78 	bl	8006168 <__sfp_lock_release>
 8006278:	230c      	movs	r3, #12
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	e7ee      	b.n	800625c <__sfp+0x60>
 800627e:	bf00      	nop
 8006280:	08007e18 	.word	0x08007e18
 8006284:	ffff0001 	.word	0xffff0001

08006288 <_fwalk_reent>:
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800628c:	4606      	mov	r6, r0
 800628e:	4688      	mov	r8, r1
 8006290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006294:	2700      	movs	r7, #0
 8006296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800629a:	f1b9 0901 	subs.w	r9, r9, #1
 800629e:	d505      	bpl.n	80062ac <_fwalk_reent+0x24>
 80062a0:	6824      	ldr	r4, [r4, #0]
 80062a2:	2c00      	cmp	r4, #0
 80062a4:	d1f7      	bne.n	8006296 <_fwalk_reent+0xe>
 80062a6:	4638      	mov	r0, r7
 80062a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ac:	89ab      	ldrh	r3, [r5, #12]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d907      	bls.n	80062c2 <_fwalk_reent+0x3a>
 80062b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062b6:	3301      	adds	r3, #1
 80062b8:	d003      	beq.n	80062c2 <_fwalk_reent+0x3a>
 80062ba:	4629      	mov	r1, r5
 80062bc:	4630      	mov	r0, r6
 80062be:	47c0      	blx	r8
 80062c0:	4307      	orrs	r7, r0
 80062c2:	3568      	adds	r5, #104	; 0x68
 80062c4:	e7e9      	b.n	800629a <_fwalk_reent+0x12>

080062c6 <__retarget_lock_init_recursive>:
 80062c6:	4770      	bx	lr

080062c8 <__retarget_lock_acquire_recursive>:
 80062c8:	4770      	bx	lr

080062ca <__retarget_lock_release_recursive>:
 80062ca:	4770      	bx	lr

080062cc <__swhatbuf_r>:
 80062cc:	b570      	push	{r4, r5, r6, lr}
 80062ce:	460e      	mov	r6, r1
 80062d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d4:	2900      	cmp	r1, #0
 80062d6:	b096      	sub	sp, #88	; 0x58
 80062d8:	4614      	mov	r4, r2
 80062da:	461d      	mov	r5, r3
 80062dc:	da07      	bge.n	80062ee <__swhatbuf_r+0x22>
 80062de:	2300      	movs	r3, #0
 80062e0:	602b      	str	r3, [r5, #0]
 80062e2:	89b3      	ldrh	r3, [r6, #12]
 80062e4:	061a      	lsls	r2, r3, #24
 80062e6:	d410      	bmi.n	800630a <__swhatbuf_r+0x3e>
 80062e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ec:	e00e      	b.n	800630c <__swhatbuf_r+0x40>
 80062ee:	466a      	mov	r2, sp
 80062f0:	f000 fdba 	bl	8006e68 <_fstat_r>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	dbf2      	blt.n	80062de <__swhatbuf_r+0x12>
 80062f8:	9a01      	ldr	r2, [sp, #4]
 80062fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006302:	425a      	negs	r2, r3
 8006304:	415a      	adcs	r2, r3
 8006306:	602a      	str	r2, [r5, #0]
 8006308:	e7ee      	b.n	80062e8 <__swhatbuf_r+0x1c>
 800630a:	2340      	movs	r3, #64	; 0x40
 800630c:	2000      	movs	r0, #0
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	b016      	add	sp, #88	; 0x58
 8006312:	bd70      	pop	{r4, r5, r6, pc}

08006314 <__smakebuf_r>:
 8006314:	898b      	ldrh	r3, [r1, #12]
 8006316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006318:	079d      	lsls	r5, r3, #30
 800631a:	4606      	mov	r6, r0
 800631c:	460c      	mov	r4, r1
 800631e:	d507      	bpl.n	8006330 <__smakebuf_r+0x1c>
 8006320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	6123      	str	r3, [r4, #16]
 8006328:	2301      	movs	r3, #1
 800632a:	6163      	str	r3, [r4, #20]
 800632c:	b002      	add	sp, #8
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	ab01      	add	r3, sp, #4
 8006332:	466a      	mov	r2, sp
 8006334:	f7ff ffca 	bl	80062cc <__swhatbuf_r>
 8006338:	9900      	ldr	r1, [sp, #0]
 800633a:	4605      	mov	r5, r0
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f879 	bl	8006434 <_malloc_r>
 8006342:	b948      	cbnz	r0, 8006358 <__smakebuf_r+0x44>
 8006344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006348:	059a      	lsls	r2, r3, #22
 800634a:	d4ef      	bmi.n	800632c <__smakebuf_r+0x18>
 800634c:	f023 0303 	bic.w	r3, r3, #3
 8006350:	f043 0302 	orr.w	r3, r3, #2
 8006354:	81a3      	strh	r3, [r4, #12]
 8006356:	e7e3      	b.n	8006320 <__smakebuf_r+0xc>
 8006358:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <__smakebuf_r+0x7c>)
 800635a:	62b3      	str	r3, [r6, #40]	; 0x28
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	6020      	str	r0, [r4, #0]
 8006360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	9b00      	ldr	r3, [sp, #0]
 8006368:	6163      	str	r3, [r4, #20]
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	6120      	str	r0, [r4, #16]
 800636e:	b15b      	cbz	r3, 8006388 <__smakebuf_r+0x74>
 8006370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006374:	4630      	mov	r0, r6
 8006376:	f000 fd89 	bl	8006e8c <_isatty_r>
 800637a:	b128      	cbz	r0, 8006388 <__smakebuf_r+0x74>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	89a0      	ldrh	r0, [r4, #12]
 800638a:	4305      	orrs	r5, r0
 800638c:	81a5      	strh	r5, [r4, #12]
 800638e:	e7cd      	b.n	800632c <__smakebuf_r+0x18>
 8006390:	08006125 	.word	0x08006125

08006394 <_free_r>:
 8006394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006396:	2900      	cmp	r1, #0
 8006398:	d048      	beq.n	800642c <_free_r+0x98>
 800639a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800639e:	9001      	str	r0, [sp, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f1a1 0404 	sub.w	r4, r1, #4
 80063a6:	bfb8      	it	lt
 80063a8:	18e4      	addlt	r4, r4, r3
 80063aa:	f000 fdb9 	bl	8006f20 <__malloc_lock>
 80063ae:	4a20      	ldr	r2, [pc, #128]	; (8006430 <_free_r+0x9c>)
 80063b0:	9801      	ldr	r0, [sp, #4]
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	4615      	mov	r5, r2
 80063b6:	b933      	cbnz	r3, 80063c6 <_free_r+0x32>
 80063b8:	6063      	str	r3, [r4, #4]
 80063ba:	6014      	str	r4, [r2, #0]
 80063bc:	b003      	add	sp, #12
 80063be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c2:	f000 bdb3 	b.w	8006f2c <__malloc_unlock>
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	d90b      	bls.n	80063e2 <_free_r+0x4e>
 80063ca:	6821      	ldr	r1, [r4, #0]
 80063cc:	1862      	adds	r2, r4, r1
 80063ce:	4293      	cmp	r3, r2
 80063d0:	bf04      	itt	eq
 80063d2:	681a      	ldreq	r2, [r3, #0]
 80063d4:	685b      	ldreq	r3, [r3, #4]
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	bf04      	itt	eq
 80063da:	1852      	addeq	r2, r2, r1
 80063dc:	6022      	streq	r2, [r4, #0]
 80063de:	602c      	str	r4, [r5, #0]
 80063e0:	e7ec      	b.n	80063bc <_free_r+0x28>
 80063e2:	461a      	mov	r2, r3
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b10b      	cbz	r3, 80063ec <_free_r+0x58>
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d9fa      	bls.n	80063e2 <_free_r+0x4e>
 80063ec:	6811      	ldr	r1, [r2, #0]
 80063ee:	1855      	adds	r5, r2, r1
 80063f0:	42a5      	cmp	r5, r4
 80063f2:	d10b      	bne.n	800640c <_free_r+0x78>
 80063f4:	6824      	ldr	r4, [r4, #0]
 80063f6:	4421      	add	r1, r4
 80063f8:	1854      	adds	r4, r2, r1
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	6011      	str	r1, [r2, #0]
 80063fe:	d1dd      	bne.n	80063bc <_free_r+0x28>
 8006400:	681c      	ldr	r4, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	6053      	str	r3, [r2, #4]
 8006406:	4421      	add	r1, r4
 8006408:	6011      	str	r1, [r2, #0]
 800640a:	e7d7      	b.n	80063bc <_free_r+0x28>
 800640c:	d902      	bls.n	8006414 <_free_r+0x80>
 800640e:	230c      	movs	r3, #12
 8006410:	6003      	str	r3, [r0, #0]
 8006412:	e7d3      	b.n	80063bc <_free_r+0x28>
 8006414:	6825      	ldr	r5, [r4, #0]
 8006416:	1961      	adds	r1, r4, r5
 8006418:	428b      	cmp	r3, r1
 800641a:	bf04      	itt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	bf04      	itt	eq
 8006424:	1949      	addeq	r1, r1, r5
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	6054      	str	r4, [r2, #4]
 800642a:	e7c7      	b.n	80063bc <_free_r+0x28>
 800642c:	b003      	add	sp, #12
 800642e:	bd30      	pop	{r4, r5, pc}
 8006430:	200004a0 	.word	0x200004a0

08006434 <_malloc_r>:
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006436:	1ccd      	adds	r5, r1, #3
 8006438:	f025 0503 	bic.w	r5, r5, #3
 800643c:	3508      	adds	r5, #8
 800643e:	2d0c      	cmp	r5, #12
 8006440:	bf38      	it	cc
 8006442:	250c      	movcc	r5, #12
 8006444:	2d00      	cmp	r5, #0
 8006446:	4606      	mov	r6, r0
 8006448:	db01      	blt.n	800644e <_malloc_r+0x1a>
 800644a:	42a9      	cmp	r1, r5
 800644c:	d903      	bls.n	8006456 <_malloc_r+0x22>
 800644e:	230c      	movs	r3, #12
 8006450:	6033      	str	r3, [r6, #0]
 8006452:	2000      	movs	r0, #0
 8006454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006456:	f000 fd63 	bl	8006f20 <__malloc_lock>
 800645a:	4921      	ldr	r1, [pc, #132]	; (80064e0 <_malloc_r+0xac>)
 800645c:	680a      	ldr	r2, [r1, #0]
 800645e:	4614      	mov	r4, r2
 8006460:	b99c      	cbnz	r4, 800648a <_malloc_r+0x56>
 8006462:	4f20      	ldr	r7, [pc, #128]	; (80064e4 <_malloc_r+0xb0>)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	b923      	cbnz	r3, 8006472 <_malloc_r+0x3e>
 8006468:	4621      	mov	r1, r4
 800646a:	4630      	mov	r0, r6
 800646c:	f000 fc86 	bl	8006d7c <_sbrk_r>
 8006470:	6038      	str	r0, [r7, #0]
 8006472:	4629      	mov	r1, r5
 8006474:	4630      	mov	r0, r6
 8006476:	f000 fc81 	bl	8006d7c <_sbrk_r>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	d123      	bne.n	80064c6 <_malloc_r+0x92>
 800647e:	230c      	movs	r3, #12
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	4630      	mov	r0, r6
 8006484:	f000 fd52 	bl	8006f2c <__malloc_unlock>
 8006488:	e7e3      	b.n	8006452 <_malloc_r+0x1e>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	1b5b      	subs	r3, r3, r5
 800648e:	d417      	bmi.n	80064c0 <_malloc_r+0x8c>
 8006490:	2b0b      	cmp	r3, #11
 8006492:	d903      	bls.n	800649c <_malloc_r+0x68>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	441c      	add	r4, r3
 8006498:	6025      	str	r5, [r4, #0]
 800649a:	e004      	b.n	80064a6 <_malloc_r+0x72>
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	42a2      	cmp	r2, r4
 80064a0:	bf0c      	ite	eq
 80064a2:	600b      	streq	r3, [r1, #0]
 80064a4:	6053      	strne	r3, [r2, #4]
 80064a6:	4630      	mov	r0, r6
 80064a8:	f000 fd40 	bl	8006f2c <__malloc_unlock>
 80064ac:	f104 000b 	add.w	r0, r4, #11
 80064b0:	1d23      	adds	r3, r4, #4
 80064b2:	f020 0007 	bic.w	r0, r0, #7
 80064b6:	1ac2      	subs	r2, r0, r3
 80064b8:	d0cc      	beq.n	8006454 <_malloc_r+0x20>
 80064ba:	1a1b      	subs	r3, r3, r0
 80064bc:	50a3      	str	r3, [r4, r2]
 80064be:	e7c9      	b.n	8006454 <_malloc_r+0x20>
 80064c0:	4622      	mov	r2, r4
 80064c2:	6864      	ldr	r4, [r4, #4]
 80064c4:	e7cc      	b.n	8006460 <_malloc_r+0x2c>
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d0e3      	beq.n	8006498 <_malloc_r+0x64>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 fc52 	bl	8006d7c <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d1dd      	bne.n	8006498 <_malloc_r+0x64>
 80064dc:	e7cf      	b.n	800647e <_malloc_r+0x4a>
 80064de:	bf00      	nop
 80064e0:	200004a0 	.word	0x200004a0
 80064e4:	200004a4 	.word	0x200004a4

080064e8 <__ssputs_r>:
 80064e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	688e      	ldr	r6, [r1, #8]
 80064ee:	429e      	cmp	r6, r3
 80064f0:	4682      	mov	sl, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	4690      	mov	r8, r2
 80064f6:	461f      	mov	r7, r3
 80064f8:	d838      	bhi.n	800656c <__ssputs_r+0x84>
 80064fa:	898a      	ldrh	r2, [r1, #12]
 80064fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006500:	d032      	beq.n	8006568 <__ssputs_r+0x80>
 8006502:	6825      	ldr	r5, [r4, #0]
 8006504:	6909      	ldr	r1, [r1, #16]
 8006506:	eba5 0901 	sub.w	r9, r5, r1
 800650a:	6965      	ldr	r5, [r4, #20]
 800650c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006514:	3301      	adds	r3, #1
 8006516:	444b      	add	r3, r9
 8006518:	106d      	asrs	r5, r5, #1
 800651a:	429d      	cmp	r5, r3
 800651c:	bf38      	it	cc
 800651e:	461d      	movcc	r5, r3
 8006520:	0553      	lsls	r3, r2, #21
 8006522:	d531      	bpl.n	8006588 <__ssputs_r+0xa0>
 8006524:	4629      	mov	r1, r5
 8006526:	f7ff ff85 	bl	8006434 <_malloc_r>
 800652a:	4606      	mov	r6, r0
 800652c:	b950      	cbnz	r0, 8006544 <__ssputs_r+0x5c>
 800652e:	230c      	movs	r3, #12
 8006530:	f8ca 3000 	str.w	r3, [sl]
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653a:	81a3      	strh	r3, [r4, #12]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006544:	6921      	ldr	r1, [r4, #16]
 8006546:	464a      	mov	r2, r9
 8006548:	f000 fcc2 	bl	8006ed0 <memcpy>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	6126      	str	r6, [r4, #16]
 800655a:	6165      	str	r5, [r4, #20]
 800655c:	444e      	add	r6, r9
 800655e:	eba5 0509 	sub.w	r5, r5, r9
 8006562:	6026      	str	r6, [r4, #0]
 8006564:	60a5      	str	r5, [r4, #8]
 8006566:	463e      	mov	r6, r7
 8006568:	42be      	cmp	r6, r7
 800656a:	d900      	bls.n	800656e <__ssputs_r+0x86>
 800656c:	463e      	mov	r6, r7
 800656e:	4632      	mov	r2, r6
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	4641      	mov	r1, r8
 8006574:	f000 fcba 	bl	8006eec <memmove>
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	1b9b      	subs	r3, r3, r6
 800657e:	4432      	add	r2, r6
 8006580:	60a3      	str	r3, [r4, #8]
 8006582:	6022      	str	r2, [r4, #0]
 8006584:	2000      	movs	r0, #0
 8006586:	e7db      	b.n	8006540 <__ssputs_r+0x58>
 8006588:	462a      	mov	r2, r5
 800658a:	f000 fcd5 	bl	8006f38 <_realloc_r>
 800658e:	4606      	mov	r6, r0
 8006590:	2800      	cmp	r0, #0
 8006592:	d1e1      	bne.n	8006558 <__ssputs_r+0x70>
 8006594:	6921      	ldr	r1, [r4, #16]
 8006596:	4650      	mov	r0, sl
 8006598:	f7ff fefc 	bl	8006394 <_free_r>
 800659c:	e7c7      	b.n	800652e <__ssputs_r+0x46>
	...

080065a0 <_svfiprintf_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	4698      	mov	r8, r3
 80065a6:	898b      	ldrh	r3, [r1, #12]
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	b09d      	sub	sp, #116	; 0x74
 80065ac:	4607      	mov	r7, r0
 80065ae:	460d      	mov	r5, r1
 80065b0:	4614      	mov	r4, r2
 80065b2:	d50e      	bpl.n	80065d2 <_svfiprintf_r+0x32>
 80065b4:	690b      	ldr	r3, [r1, #16]
 80065b6:	b963      	cbnz	r3, 80065d2 <_svfiprintf_r+0x32>
 80065b8:	2140      	movs	r1, #64	; 0x40
 80065ba:	f7ff ff3b 	bl	8006434 <_malloc_r>
 80065be:	6028      	str	r0, [r5, #0]
 80065c0:	6128      	str	r0, [r5, #16]
 80065c2:	b920      	cbnz	r0, 80065ce <_svfiprintf_r+0x2e>
 80065c4:	230c      	movs	r3, #12
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065cc:	e0d1      	b.n	8006772 <_svfiprintf_r+0x1d2>
 80065ce:	2340      	movs	r3, #64	; 0x40
 80065d0:	616b      	str	r3, [r5, #20]
 80065d2:	2300      	movs	r3, #0
 80065d4:	9309      	str	r3, [sp, #36]	; 0x24
 80065d6:	2320      	movs	r3, #32
 80065d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80065e0:	2330      	movs	r3, #48	; 0x30
 80065e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800678c <_svfiprintf_r+0x1ec>
 80065e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ea:	f04f 0901 	mov.w	r9, #1
 80065ee:	4623      	mov	r3, r4
 80065f0:	469a      	mov	sl, r3
 80065f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f6:	b10a      	cbz	r2, 80065fc <_svfiprintf_r+0x5c>
 80065f8:	2a25      	cmp	r2, #37	; 0x25
 80065fa:	d1f9      	bne.n	80065f0 <_svfiprintf_r+0x50>
 80065fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006600:	d00b      	beq.n	800661a <_svfiprintf_r+0x7a>
 8006602:	465b      	mov	r3, fp
 8006604:	4622      	mov	r2, r4
 8006606:	4629      	mov	r1, r5
 8006608:	4638      	mov	r0, r7
 800660a:	f7ff ff6d 	bl	80064e8 <__ssputs_r>
 800660e:	3001      	adds	r0, #1
 8006610:	f000 80aa 	beq.w	8006768 <_svfiprintf_r+0x1c8>
 8006614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006616:	445a      	add	r2, fp
 8006618:	9209      	str	r2, [sp, #36]	; 0x24
 800661a:	f89a 3000 	ldrb.w	r3, [sl]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 80a2 	beq.w	8006768 <_svfiprintf_r+0x1c8>
 8006624:	2300      	movs	r3, #0
 8006626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800662a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662e:	f10a 0a01 	add.w	sl, sl, #1
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	9307      	str	r3, [sp, #28]
 8006636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800663a:	931a      	str	r3, [sp, #104]	; 0x68
 800663c:	4654      	mov	r4, sl
 800663e:	2205      	movs	r2, #5
 8006640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006644:	4851      	ldr	r0, [pc, #324]	; (800678c <_svfiprintf_r+0x1ec>)
 8006646:	f7f9 fdc3 	bl	80001d0 <memchr>
 800664a:	9a04      	ldr	r2, [sp, #16]
 800664c:	b9d8      	cbnz	r0, 8006686 <_svfiprintf_r+0xe6>
 800664e:	06d0      	lsls	r0, r2, #27
 8006650:	bf44      	itt	mi
 8006652:	2320      	movmi	r3, #32
 8006654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006658:	0711      	lsls	r1, r2, #28
 800665a:	bf44      	itt	mi
 800665c:	232b      	movmi	r3, #43	; 0x2b
 800665e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006662:	f89a 3000 	ldrb.w	r3, [sl]
 8006666:	2b2a      	cmp	r3, #42	; 0x2a
 8006668:	d015      	beq.n	8006696 <_svfiprintf_r+0xf6>
 800666a:	9a07      	ldr	r2, [sp, #28]
 800666c:	4654      	mov	r4, sl
 800666e:	2000      	movs	r0, #0
 8006670:	f04f 0c0a 	mov.w	ip, #10
 8006674:	4621      	mov	r1, r4
 8006676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800667a:	3b30      	subs	r3, #48	; 0x30
 800667c:	2b09      	cmp	r3, #9
 800667e:	d94e      	bls.n	800671e <_svfiprintf_r+0x17e>
 8006680:	b1b0      	cbz	r0, 80066b0 <_svfiprintf_r+0x110>
 8006682:	9207      	str	r2, [sp, #28]
 8006684:	e014      	b.n	80066b0 <_svfiprintf_r+0x110>
 8006686:	eba0 0308 	sub.w	r3, r0, r8
 800668a:	fa09 f303 	lsl.w	r3, r9, r3
 800668e:	4313      	orrs	r3, r2
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	46a2      	mov	sl, r4
 8006694:	e7d2      	b.n	800663c <_svfiprintf_r+0x9c>
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	1d19      	adds	r1, r3, #4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	9103      	str	r1, [sp, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bfbb      	ittet	lt
 80066a2:	425b      	neglt	r3, r3
 80066a4:	f042 0202 	orrlt.w	r2, r2, #2
 80066a8:	9307      	strge	r3, [sp, #28]
 80066aa:	9307      	strlt	r3, [sp, #28]
 80066ac:	bfb8      	it	lt
 80066ae:	9204      	strlt	r2, [sp, #16]
 80066b0:	7823      	ldrb	r3, [r4, #0]
 80066b2:	2b2e      	cmp	r3, #46	; 0x2e
 80066b4:	d10c      	bne.n	80066d0 <_svfiprintf_r+0x130>
 80066b6:	7863      	ldrb	r3, [r4, #1]
 80066b8:	2b2a      	cmp	r3, #42	; 0x2a
 80066ba:	d135      	bne.n	8006728 <_svfiprintf_r+0x188>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	1d1a      	adds	r2, r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	9203      	str	r2, [sp, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bfb8      	it	lt
 80066c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80066cc:	3402      	adds	r4, #2
 80066ce:	9305      	str	r3, [sp, #20]
 80066d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800679c <_svfiprintf_r+0x1fc>
 80066d4:	7821      	ldrb	r1, [r4, #0]
 80066d6:	2203      	movs	r2, #3
 80066d8:	4650      	mov	r0, sl
 80066da:	f7f9 fd79 	bl	80001d0 <memchr>
 80066de:	b140      	cbz	r0, 80066f2 <_svfiprintf_r+0x152>
 80066e0:	2340      	movs	r3, #64	; 0x40
 80066e2:	eba0 000a 	sub.w	r0, r0, sl
 80066e6:	fa03 f000 	lsl.w	r0, r3, r0
 80066ea:	9b04      	ldr	r3, [sp, #16]
 80066ec:	4303      	orrs	r3, r0
 80066ee:	3401      	adds	r4, #1
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f6:	4826      	ldr	r0, [pc, #152]	; (8006790 <_svfiprintf_r+0x1f0>)
 80066f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066fc:	2206      	movs	r2, #6
 80066fe:	f7f9 fd67 	bl	80001d0 <memchr>
 8006702:	2800      	cmp	r0, #0
 8006704:	d038      	beq.n	8006778 <_svfiprintf_r+0x1d8>
 8006706:	4b23      	ldr	r3, [pc, #140]	; (8006794 <_svfiprintf_r+0x1f4>)
 8006708:	bb1b      	cbnz	r3, 8006752 <_svfiprintf_r+0x1b2>
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	3307      	adds	r3, #7
 800670e:	f023 0307 	bic.w	r3, r3, #7
 8006712:	3308      	adds	r3, #8
 8006714:	9303      	str	r3, [sp, #12]
 8006716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006718:	4433      	add	r3, r6
 800671a:	9309      	str	r3, [sp, #36]	; 0x24
 800671c:	e767      	b.n	80065ee <_svfiprintf_r+0x4e>
 800671e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006722:	460c      	mov	r4, r1
 8006724:	2001      	movs	r0, #1
 8006726:	e7a5      	b.n	8006674 <_svfiprintf_r+0xd4>
 8006728:	2300      	movs	r3, #0
 800672a:	3401      	adds	r4, #1
 800672c:	9305      	str	r3, [sp, #20]
 800672e:	4619      	mov	r1, r3
 8006730:	f04f 0c0a 	mov.w	ip, #10
 8006734:	4620      	mov	r0, r4
 8006736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800673a:	3a30      	subs	r2, #48	; 0x30
 800673c:	2a09      	cmp	r2, #9
 800673e:	d903      	bls.n	8006748 <_svfiprintf_r+0x1a8>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0c5      	beq.n	80066d0 <_svfiprintf_r+0x130>
 8006744:	9105      	str	r1, [sp, #20]
 8006746:	e7c3      	b.n	80066d0 <_svfiprintf_r+0x130>
 8006748:	fb0c 2101 	mla	r1, ip, r1, r2
 800674c:	4604      	mov	r4, r0
 800674e:	2301      	movs	r3, #1
 8006750:	e7f0      	b.n	8006734 <_svfiprintf_r+0x194>
 8006752:	ab03      	add	r3, sp, #12
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	462a      	mov	r2, r5
 8006758:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <_svfiprintf_r+0x1f8>)
 800675a:	a904      	add	r1, sp, #16
 800675c:	4638      	mov	r0, r7
 800675e:	f3af 8000 	nop.w
 8006762:	1c42      	adds	r2, r0, #1
 8006764:	4606      	mov	r6, r0
 8006766:	d1d6      	bne.n	8006716 <_svfiprintf_r+0x176>
 8006768:	89ab      	ldrh	r3, [r5, #12]
 800676a:	065b      	lsls	r3, r3, #25
 800676c:	f53f af2c 	bmi.w	80065c8 <_svfiprintf_r+0x28>
 8006770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006772:	b01d      	add	sp, #116	; 0x74
 8006774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006778:	ab03      	add	r3, sp, #12
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	462a      	mov	r2, r5
 800677e:	4b06      	ldr	r3, [pc, #24]	; (8006798 <_svfiprintf_r+0x1f8>)
 8006780:	a904      	add	r1, sp, #16
 8006782:	4638      	mov	r0, r7
 8006784:	f000 f9d4 	bl	8006b30 <_printf_i>
 8006788:	e7eb      	b.n	8006762 <_svfiprintf_r+0x1c2>
 800678a:	bf00      	nop
 800678c:	08007e7c 	.word	0x08007e7c
 8006790:	08007e86 	.word	0x08007e86
 8006794:	00000000 	.word	0x00000000
 8006798:	080064e9 	.word	0x080064e9
 800679c:	08007e82 	.word	0x08007e82

080067a0 <__sfputc_r>:
 80067a0:	6893      	ldr	r3, [r2, #8]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	b410      	push	{r4}
 80067a8:	6093      	str	r3, [r2, #8]
 80067aa:	da08      	bge.n	80067be <__sfputc_r+0x1e>
 80067ac:	6994      	ldr	r4, [r2, #24]
 80067ae:	42a3      	cmp	r3, r4
 80067b0:	db01      	blt.n	80067b6 <__sfputc_r+0x16>
 80067b2:	290a      	cmp	r1, #10
 80067b4:	d103      	bne.n	80067be <__sfputc_r+0x1e>
 80067b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ba:	f7ff bb0d 	b.w	8005dd8 <__swbuf_r>
 80067be:	6813      	ldr	r3, [r2, #0]
 80067c0:	1c58      	adds	r0, r3, #1
 80067c2:	6010      	str	r0, [r2, #0]
 80067c4:	7019      	strb	r1, [r3, #0]
 80067c6:	4608      	mov	r0, r1
 80067c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <__sfputs_r>:
 80067ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	4614      	mov	r4, r2
 80067d6:	18d5      	adds	r5, r2, r3
 80067d8:	42ac      	cmp	r4, r5
 80067da:	d101      	bne.n	80067e0 <__sfputs_r+0x12>
 80067dc:	2000      	movs	r0, #0
 80067de:	e007      	b.n	80067f0 <__sfputs_r+0x22>
 80067e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e4:	463a      	mov	r2, r7
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ffda 	bl	80067a0 <__sfputc_r>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d1f3      	bne.n	80067d8 <__sfputs_r+0xa>
 80067f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067f4 <_vfiprintf_r>:
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	460d      	mov	r5, r1
 80067fa:	b09d      	sub	sp, #116	; 0x74
 80067fc:	4614      	mov	r4, r2
 80067fe:	4698      	mov	r8, r3
 8006800:	4606      	mov	r6, r0
 8006802:	b118      	cbz	r0, 800680c <_vfiprintf_r+0x18>
 8006804:	6983      	ldr	r3, [r0, #24]
 8006806:	b90b      	cbnz	r3, 800680c <_vfiprintf_r+0x18>
 8006808:	f7ff fcc0 	bl	800618c <__sinit>
 800680c:	4b89      	ldr	r3, [pc, #548]	; (8006a34 <_vfiprintf_r+0x240>)
 800680e:	429d      	cmp	r5, r3
 8006810:	d11b      	bne.n	800684a <_vfiprintf_r+0x56>
 8006812:	6875      	ldr	r5, [r6, #4]
 8006814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006816:	07d9      	lsls	r1, r3, #31
 8006818:	d405      	bmi.n	8006826 <_vfiprintf_r+0x32>
 800681a:	89ab      	ldrh	r3, [r5, #12]
 800681c:	059a      	lsls	r2, r3, #22
 800681e:	d402      	bmi.n	8006826 <_vfiprintf_r+0x32>
 8006820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006822:	f7ff fd51 	bl	80062c8 <__retarget_lock_acquire_recursive>
 8006826:	89ab      	ldrh	r3, [r5, #12]
 8006828:	071b      	lsls	r3, r3, #28
 800682a:	d501      	bpl.n	8006830 <_vfiprintf_r+0x3c>
 800682c:	692b      	ldr	r3, [r5, #16]
 800682e:	b9eb      	cbnz	r3, 800686c <_vfiprintf_r+0x78>
 8006830:	4629      	mov	r1, r5
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff fb22 	bl	8005e7c <__swsetup_r>
 8006838:	b1c0      	cbz	r0, 800686c <_vfiprintf_r+0x78>
 800683a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800683c:	07dc      	lsls	r4, r3, #31
 800683e:	d50e      	bpl.n	800685e <_vfiprintf_r+0x6a>
 8006840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006844:	b01d      	add	sp, #116	; 0x74
 8006846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684a:	4b7b      	ldr	r3, [pc, #492]	; (8006a38 <_vfiprintf_r+0x244>)
 800684c:	429d      	cmp	r5, r3
 800684e:	d101      	bne.n	8006854 <_vfiprintf_r+0x60>
 8006850:	68b5      	ldr	r5, [r6, #8]
 8006852:	e7df      	b.n	8006814 <_vfiprintf_r+0x20>
 8006854:	4b79      	ldr	r3, [pc, #484]	; (8006a3c <_vfiprintf_r+0x248>)
 8006856:	429d      	cmp	r5, r3
 8006858:	bf08      	it	eq
 800685a:	68f5      	ldreq	r5, [r6, #12]
 800685c:	e7da      	b.n	8006814 <_vfiprintf_r+0x20>
 800685e:	89ab      	ldrh	r3, [r5, #12]
 8006860:	0598      	lsls	r0, r3, #22
 8006862:	d4ed      	bmi.n	8006840 <_vfiprintf_r+0x4c>
 8006864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006866:	f7ff fd30 	bl	80062ca <__retarget_lock_release_recursive>
 800686a:	e7e9      	b.n	8006840 <_vfiprintf_r+0x4c>
 800686c:	2300      	movs	r3, #0
 800686e:	9309      	str	r3, [sp, #36]	; 0x24
 8006870:	2320      	movs	r3, #32
 8006872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006876:	f8cd 800c 	str.w	r8, [sp, #12]
 800687a:	2330      	movs	r3, #48	; 0x30
 800687c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006a40 <_vfiprintf_r+0x24c>
 8006880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006884:	f04f 0901 	mov.w	r9, #1
 8006888:	4623      	mov	r3, r4
 800688a:	469a      	mov	sl, r3
 800688c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006890:	b10a      	cbz	r2, 8006896 <_vfiprintf_r+0xa2>
 8006892:	2a25      	cmp	r2, #37	; 0x25
 8006894:	d1f9      	bne.n	800688a <_vfiprintf_r+0x96>
 8006896:	ebba 0b04 	subs.w	fp, sl, r4
 800689a:	d00b      	beq.n	80068b4 <_vfiprintf_r+0xc0>
 800689c:	465b      	mov	r3, fp
 800689e:	4622      	mov	r2, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff ff93 	bl	80067ce <__sfputs_r>
 80068a8:	3001      	adds	r0, #1
 80068aa:	f000 80aa 	beq.w	8006a02 <_vfiprintf_r+0x20e>
 80068ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b0:	445a      	add	r2, fp
 80068b2:	9209      	str	r2, [sp, #36]	; 0x24
 80068b4:	f89a 3000 	ldrb.w	r3, [sl]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80a2 	beq.w	8006a02 <_vfiprintf_r+0x20e>
 80068be:	2300      	movs	r3, #0
 80068c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c8:	f10a 0a01 	add.w	sl, sl, #1
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	9307      	str	r3, [sp, #28]
 80068d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068d4:	931a      	str	r3, [sp, #104]	; 0x68
 80068d6:	4654      	mov	r4, sl
 80068d8:	2205      	movs	r2, #5
 80068da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068de:	4858      	ldr	r0, [pc, #352]	; (8006a40 <_vfiprintf_r+0x24c>)
 80068e0:	f7f9 fc76 	bl	80001d0 <memchr>
 80068e4:	9a04      	ldr	r2, [sp, #16]
 80068e6:	b9d8      	cbnz	r0, 8006920 <_vfiprintf_r+0x12c>
 80068e8:	06d1      	lsls	r1, r2, #27
 80068ea:	bf44      	itt	mi
 80068ec:	2320      	movmi	r3, #32
 80068ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f2:	0713      	lsls	r3, r2, #28
 80068f4:	bf44      	itt	mi
 80068f6:	232b      	movmi	r3, #43	; 0x2b
 80068f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006900:	2b2a      	cmp	r3, #42	; 0x2a
 8006902:	d015      	beq.n	8006930 <_vfiprintf_r+0x13c>
 8006904:	9a07      	ldr	r2, [sp, #28]
 8006906:	4654      	mov	r4, sl
 8006908:	2000      	movs	r0, #0
 800690a:	f04f 0c0a 	mov.w	ip, #10
 800690e:	4621      	mov	r1, r4
 8006910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006914:	3b30      	subs	r3, #48	; 0x30
 8006916:	2b09      	cmp	r3, #9
 8006918:	d94e      	bls.n	80069b8 <_vfiprintf_r+0x1c4>
 800691a:	b1b0      	cbz	r0, 800694a <_vfiprintf_r+0x156>
 800691c:	9207      	str	r2, [sp, #28]
 800691e:	e014      	b.n	800694a <_vfiprintf_r+0x156>
 8006920:	eba0 0308 	sub.w	r3, r0, r8
 8006924:	fa09 f303 	lsl.w	r3, r9, r3
 8006928:	4313      	orrs	r3, r2
 800692a:	9304      	str	r3, [sp, #16]
 800692c:	46a2      	mov	sl, r4
 800692e:	e7d2      	b.n	80068d6 <_vfiprintf_r+0xe2>
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	1d19      	adds	r1, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	9103      	str	r1, [sp, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	bfbb      	ittet	lt
 800693c:	425b      	neglt	r3, r3
 800693e:	f042 0202 	orrlt.w	r2, r2, #2
 8006942:	9307      	strge	r3, [sp, #28]
 8006944:	9307      	strlt	r3, [sp, #28]
 8006946:	bfb8      	it	lt
 8006948:	9204      	strlt	r2, [sp, #16]
 800694a:	7823      	ldrb	r3, [r4, #0]
 800694c:	2b2e      	cmp	r3, #46	; 0x2e
 800694e:	d10c      	bne.n	800696a <_vfiprintf_r+0x176>
 8006950:	7863      	ldrb	r3, [r4, #1]
 8006952:	2b2a      	cmp	r3, #42	; 0x2a
 8006954:	d135      	bne.n	80069c2 <_vfiprintf_r+0x1ce>
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	1d1a      	adds	r2, r3, #4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	9203      	str	r2, [sp, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	bfb8      	it	lt
 8006962:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006966:	3402      	adds	r4, #2
 8006968:	9305      	str	r3, [sp, #20]
 800696a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006a50 <_vfiprintf_r+0x25c>
 800696e:	7821      	ldrb	r1, [r4, #0]
 8006970:	2203      	movs	r2, #3
 8006972:	4650      	mov	r0, sl
 8006974:	f7f9 fc2c 	bl	80001d0 <memchr>
 8006978:	b140      	cbz	r0, 800698c <_vfiprintf_r+0x198>
 800697a:	2340      	movs	r3, #64	; 0x40
 800697c:	eba0 000a 	sub.w	r0, r0, sl
 8006980:	fa03 f000 	lsl.w	r0, r3, r0
 8006984:	9b04      	ldr	r3, [sp, #16]
 8006986:	4303      	orrs	r3, r0
 8006988:	3401      	adds	r4, #1
 800698a:	9304      	str	r3, [sp, #16]
 800698c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006990:	482c      	ldr	r0, [pc, #176]	; (8006a44 <_vfiprintf_r+0x250>)
 8006992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006996:	2206      	movs	r2, #6
 8006998:	f7f9 fc1a 	bl	80001d0 <memchr>
 800699c:	2800      	cmp	r0, #0
 800699e:	d03f      	beq.n	8006a20 <_vfiprintf_r+0x22c>
 80069a0:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <_vfiprintf_r+0x254>)
 80069a2:	bb1b      	cbnz	r3, 80069ec <_vfiprintf_r+0x1f8>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	3307      	adds	r3, #7
 80069a8:	f023 0307 	bic.w	r3, r3, #7
 80069ac:	3308      	adds	r3, #8
 80069ae:	9303      	str	r3, [sp, #12]
 80069b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b2:	443b      	add	r3, r7
 80069b4:	9309      	str	r3, [sp, #36]	; 0x24
 80069b6:	e767      	b.n	8006888 <_vfiprintf_r+0x94>
 80069b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80069bc:	460c      	mov	r4, r1
 80069be:	2001      	movs	r0, #1
 80069c0:	e7a5      	b.n	800690e <_vfiprintf_r+0x11a>
 80069c2:	2300      	movs	r3, #0
 80069c4:	3401      	adds	r4, #1
 80069c6:	9305      	str	r3, [sp, #20]
 80069c8:	4619      	mov	r1, r3
 80069ca:	f04f 0c0a 	mov.w	ip, #10
 80069ce:	4620      	mov	r0, r4
 80069d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069d4:	3a30      	subs	r2, #48	; 0x30
 80069d6:	2a09      	cmp	r2, #9
 80069d8:	d903      	bls.n	80069e2 <_vfiprintf_r+0x1ee>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0c5      	beq.n	800696a <_vfiprintf_r+0x176>
 80069de:	9105      	str	r1, [sp, #20]
 80069e0:	e7c3      	b.n	800696a <_vfiprintf_r+0x176>
 80069e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e6:	4604      	mov	r4, r0
 80069e8:	2301      	movs	r3, #1
 80069ea:	e7f0      	b.n	80069ce <_vfiprintf_r+0x1da>
 80069ec:	ab03      	add	r3, sp, #12
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	462a      	mov	r2, r5
 80069f2:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <_vfiprintf_r+0x258>)
 80069f4:	a904      	add	r1, sp, #16
 80069f6:	4630      	mov	r0, r6
 80069f8:	f3af 8000 	nop.w
 80069fc:	4607      	mov	r7, r0
 80069fe:	1c78      	adds	r0, r7, #1
 8006a00:	d1d6      	bne.n	80069b0 <_vfiprintf_r+0x1bc>
 8006a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a04:	07d9      	lsls	r1, r3, #31
 8006a06:	d405      	bmi.n	8006a14 <_vfiprintf_r+0x220>
 8006a08:	89ab      	ldrh	r3, [r5, #12]
 8006a0a:	059a      	lsls	r2, r3, #22
 8006a0c:	d402      	bmi.n	8006a14 <_vfiprintf_r+0x220>
 8006a0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a10:	f7ff fc5b 	bl	80062ca <__retarget_lock_release_recursive>
 8006a14:	89ab      	ldrh	r3, [r5, #12]
 8006a16:	065b      	lsls	r3, r3, #25
 8006a18:	f53f af12 	bmi.w	8006840 <_vfiprintf_r+0x4c>
 8006a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a1e:	e711      	b.n	8006844 <_vfiprintf_r+0x50>
 8006a20:	ab03      	add	r3, sp, #12
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	462a      	mov	r2, r5
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <_vfiprintf_r+0x258>)
 8006a28:	a904      	add	r1, sp, #16
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f000 f880 	bl	8006b30 <_printf_i>
 8006a30:	e7e4      	b.n	80069fc <_vfiprintf_r+0x208>
 8006a32:	bf00      	nop
 8006a34:	08007e3c 	.word	0x08007e3c
 8006a38:	08007e5c 	.word	0x08007e5c
 8006a3c:	08007e1c 	.word	0x08007e1c
 8006a40:	08007e7c 	.word	0x08007e7c
 8006a44:	08007e86 	.word	0x08007e86
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	080067cf 	.word	0x080067cf
 8006a50:	08007e82 	.word	0x08007e82

08006a54 <_printf_common>:
 8006a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	4616      	mov	r6, r2
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	688a      	ldr	r2, [r1, #8]
 8006a5e:	690b      	ldr	r3, [r1, #16]
 8006a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	bfb8      	it	lt
 8006a68:	4613      	movlt	r3, r2
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a70:	4607      	mov	r7, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	b10a      	cbz	r2, 8006a7a <_printf_common+0x26>
 8006a76:	3301      	adds	r3, #1
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	0699      	lsls	r1, r3, #26
 8006a7e:	bf42      	ittt	mi
 8006a80:	6833      	ldrmi	r3, [r6, #0]
 8006a82:	3302      	addmi	r3, #2
 8006a84:	6033      	strmi	r3, [r6, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	f015 0506 	ands.w	r5, r5, #6
 8006a8c:	d106      	bne.n	8006a9c <_printf_common+0x48>
 8006a8e:	f104 0a19 	add.w	sl, r4, #25
 8006a92:	68e3      	ldr	r3, [r4, #12]
 8006a94:	6832      	ldr	r2, [r6, #0]
 8006a96:	1a9b      	subs	r3, r3, r2
 8006a98:	42ab      	cmp	r3, r5
 8006a9a:	dc26      	bgt.n	8006aea <_printf_common+0x96>
 8006a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aa0:	1e13      	subs	r3, r2, #0
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	bf18      	it	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	0692      	lsls	r2, r2, #26
 8006aaa:	d42b      	bmi.n	8006b04 <_printf_common+0xb0>
 8006aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	47c0      	blx	r8
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d01e      	beq.n	8006af8 <_printf_common+0xa4>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	68e5      	ldr	r5, [r4, #12]
 8006abe:	6832      	ldr	r2, [r6, #0]
 8006ac0:	f003 0306 	and.w	r3, r3, #6
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	bf08      	it	eq
 8006ac8:	1aad      	subeq	r5, r5, r2
 8006aca:	68a3      	ldr	r3, [r4, #8]
 8006acc:	6922      	ldr	r2, [r4, #16]
 8006ace:	bf0c      	ite	eq
 8006ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad4:	2500      	movne	r5, #0
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	bfc4      	itt	gt
 8006ada:	1a9b      	subgt	r3, r3, r2
 8006adc:	18ed      	addgt	r5, r5, r3
 8006ade:	2600      	movs	r6, #0
 8006ae0:	341a      	adds	r4, #26
 8006ae2:	42b5      	cmp	r5, r6
 8006ae4:	d11a      	bne.n	8006b1c <_printf_common+0xc8>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e008      	b.n	8006afc <_printf_common+0xa8>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4652      	mov	r2, sl
 8006aee:	4649      	mov	r1, r9
 8006af0:	4638      	mov	r0, r7
 8006af2:	47c0      	blx	r8
 8006af4:	3001      	adds	r0, #1
 8006af6:	d103      	bne.n	8006b00 <_printf_common+0xac>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b00:	3501      	adds	r5, #1
 8006b02:	e7c6      	b.n	8006a92 <_printf_common+0x3e>
 8006b04:	18e1      	adds	r1, r4, r3
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	2030      	movs	r0, #48	; 0x30
 8006b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b0e:	4422      	add	r2, r4
 8006b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b18:	3302      	adds	r3, #2
 8006b1a:	e7c7      	b.n	8006aac <_printf_common+0x58>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4622      	mov	r2, r4
 8006b20:	4649      	mov	r1, r9
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c0      	blx	r8
 8006b26:	3001      	adds	r0, #1
 8006b28:	d0e6      	beq.n	8006af8 <_printf_common+0xa4>
 8006b2a:	3601      	adds	r6, #1
 8006b2c:	e7d9      	b.n	8006ae2 <_printf_common+0x8e>
	...

08006b30 <_printf_i>:
 8006b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	460c      	mov	r4, r1
 8006b36:	4691      	mov	r9, r2
 8006b38:	7e27      	ldrb	r7, [r4, #24]
 8006b3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b3c:	2f78      	cmp	r7, #120	; 0x78
 8006b3e:	4680      	mov	r8, r0
 8006b40:	469a      	mov	sl, r3
 8006b42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b46:	d807      	bhi.n	8006b58 <_printf_i+0x28>
 8006b48:	2f62      	cmp	r7, #98	; 0x62
 8006b4a:	d80a      	bhi.n	8006b62 <_printf_i+0x32>
 8006b4c:	2f00      	cmp	r7, #0
 8006b4e:	f000 80d8 	beq.w	8006d02 <_printf_i+0x1d2>
 8006b52:	2f58      	cmp	r7, #88	; 0x58
 8006b54:	f000 80a3 	beq.w	8006c9e <_printf_i+0x16e>
 8006b58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b60:	e03a      	b.n	8006bd8 <_printf_i+0xa8>
 8006b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b66:	2b15      	cmp	r3, #21
 8006b68:	d8f6      	bhi.n	8006b58 <_printf_i+0x28>
 8006b6a:	a001      	add	r0, pc, #4	; (adr r0, 8006b70 <_printf_i+0x40>)
 8006b6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b70:	08006bc9 	.word	0x08006bc9
 8006b74:	08006bdd 	.word	0x08006bdd
 8006b78:	08006b59 	.word	0x08006b59
 8006b7c:	08006b59 	.word	0x08006b59
 8006b80:	08006b59 	.word	0x08006b59
 8006b84:	08006b59 	.word	0x08006b59
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006b59 	.word	0x08006b59
 8006b90:	08006b59 	.word	0x08006b59
 8006b94:	08006b59 	.word	0x08006b59
 8006b98:	08006b59 	.word	0x08006b59
 8006b9c:	08006ce9 	.word	0x08006ce9
 8006ba0:	08006c0d 	.word	0x08006c0d
 8006ba4:	08006ccb 	.word	0x08006ccb
 8006ba8:	08006b59 	.word	0x08006b59
 8006bac:	08006b59 	.word	0x08006b59
 8006bb0:	08006d0b 	.word	0x08006d0b
 8006bb4:	08006b59 	.word	0x08006b59
 8006bb8:	08006c0d 	.word	0x08006c0d
 8006bbc:	08006b59 	.word	0x08006b59
 8006bc0:	08006b59 	.word	0x08006b59
 8006bc4:	08006cd3 	.word	0x08006cd3
 8006bc8:	680b      	ldr	r3, [r1, #0]
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	600a      	str	r2, [r1, #0]
 8006bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0a3      	b.n	8006d24 <_printf_i+0x1f4>
 8006bdc:	6825      	ldr	r5, [r4, #0]
 8006bde:	6808      	ldr	r0, [r1, #0]
 8006be0:	062e      	lsls	r6, r5, #24
 8006be2:	f100 0304 	add.w	r3, r0, #4
 8006be6:	d50a      	bpl.n	8006bfe <_printf_i+0xce>
 8006be8:	6805      	ldr	r5, [r0, #0]
 8006bea:	600b      	str	r3, [r1, #0]
 8006bec:	2d00      	cmp	r5, #0
 8006bee:	da03      	bge.n	8006bf8 <_printf_i+0xc8>
 8006bf0:	232d      	movs	r3, #45	; 0x2d
 8006bf2:	426d      	negs	r5, r5
 8006bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf8:	485e      	ldr	r0, [pc, #376]	; (8006d74 <_printf_i+0x244>)
 8006bfa:	230a      	movs	r3, #10
 8006bfc:	e019      	b.n	8006c32 <_printf_i+0x102>
 8006bfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c02:	6805      	ldr	r5, [r0, #0]
 8006c04:	600b      	str	r3, [r1, #0]
 8006c06:	bf18      	it	ne
 8006c08:	b22d      	sxthne	r5, r5
 8006c0a:	e7ef      	b.n	8006bec <_printf_i+0xbc>
 8006c0c:	680b      	ldr	r3, [r1, #0]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	1d18      	adds	r0, r3, #4
 8006c12:	6008      	str	r0, [r1, #0]
 8006c14:	0628      	lsls	r0, r5, #24
 8006c16:	d501      	bpl.n	8006c1c <_printf_i+0xec>
 8006c18:	681d      	ldr	r5, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <_printf_i+0xf2>
 8006c1c:	0669      	lsls	r1, r5, #25
 8006c1e:	d5fb      	bpl.n	8006c18 <_printf_i+0xe8>
 8006c20:	881d      	ldrh	r5, [r3, #0]
 8006c22:	4854      	ldr	r0, [pc, #336]	; (8006d74 <_printf_i+0x244>)
 8006c24:	2f6f      	cmp	r7, #111	; 0x6f
 8006c26:	bf0c      	ite	eq
 8006c28:	2308      	moveq	r3, #8
 8006c2a:	230a      	movne	r3, #10
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c32:	6866      	ldr	r6, [r4, #4]
 8006c34:	60a6      	str	r6, [r4, #8]
 8006c36:	2e00      	cmp	r6, #0
 8006c38:	bfa2      	ittt	ge
 8006c3a:	6821      	ldrge	r1, [r4, #0]
 8006c3c:	f021 0104 	bicge.w	r1, r1, #4
 8006c40:	6021      	strge	r1, [r4, #0]
 8006c42:	b90d      	cbnz	r5, 8006c48 <_printf_i+0x118>
 8006c44:	2e00      	cmp	r6, #0
 8006c46:	d04d      	beq.n	8006ce4 <_printf_i+0x1b4>
 8006c48:	4616      	mov	r6, r2
 8006c4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c4e:	fb03 5711 	mls	r7, r3, r1, r5
 8006c52:	5dc7      	ldrb	r7, [r0, r7]
 8006c54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c58:	462f      	mov	r7, r5
 8006c5a:	42bb      	cmp	r3, r7
 8006c5c:	460d      	mov	r5, r1
 8006c5e:	d9f4      	bls.n	8006c4a <_printf_i+0x11a>
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d10b      	bne.n	8006c7c <_printf_i+0x14c>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	07df      	lsls	r7, r3, #31
 8006c68:	d508      	bpl.n	8006c7c <_printf_i+0x14c>
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	6861      	ldr	r1, [r4, #4]
 8006c6e:	4299      	cmp	r1, r3
 8006c70:	bfde      	ittt	le
 8006c72:	2330      	movle	r3, #48	; 0x30
 8006c74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c78:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006c7c:	1b92      	subs	r2, r2, r6
 8006c7e:	6122      	str	r2, [r4, #16]
 8006c80:	f8cd a000 	str.w	sl, [sp]
 8006c84:	464b      	mov	r3, r9
 8006c86:	aa03      	add	r2, sp, #12
 8006c88:	4621      	mov	r1, r4
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f7ff fee2 	bl	8006a54 <_printf_common>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d14c      	bne.n	8006d2e <_printf_i+0x1fe>
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c98:	b004      	add	sp, #16
 8006c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9e:	4835      	ldr	r0, [pc, #212]	; (8006d74 <_printf_i+0x244>)
 8006ca0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	680e      	ldr	r6, [r1, #0]
 8006ca8:	061f      	lsls	r7, r3, #24
 8006caa:	f856 5b04 	ldr.w	r5, [r6], #4
 8006cae:	600e      	str	r6, [r1, #0]
 8006cb0:	d514      	bpl.n	8006cdc <_printf_i+0x1ac>
 8006cb2:	07d9      	lsls	r1, r3, #31
 8006cb4:	bf44      	itt	mi
 8006cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cba:	6023      	strmi	r3, [r4, #0]
 8006cbc:	b91d      	cbnz	r5, 8006cc6 <_printf_i+0x196>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f023 0320 	bic.w	r3, r3, #32
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	e7b0      	b.n	8006c2c <_printf_i+0xfc>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	f043 0320 	orr.w	r3, r3, #32
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	2378      	movs	r3, #120	; 0x78
 8006cd4:	4828      	ldr	r0, [pc, #160]	; (8006d78 <_printf_i+0x248>)
 8006cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cda:	e7e3      	b.n	8006ca4 <_printf_i+0x174>
 8006cdc:	065e      	lsls	r6, r3, #25
 8006cde:	bf48      	it	mi
 8006ce0:	b2ad      	uxthmi	r5, r5
 8006ce2:	e7e6      	b.n	8006cb2 <_printf_i+0x182>
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	e7bb      	b.n	8006c60 <_printf_i+0x130>
 8006ce8:	680b      	ldr	r3, [r1, #0]
 8006cea:	6826      	ldr	r6, [r4, #0]
 8006cec:	6960      	ldr	r0, [r4, #20]
 8006cee:	1d1d      	adds	r5, r3, #4
 8006cf0:	600d      	str	r5, [r1, #0]
 8006cf2:	0635      	lsls	r5, r6, #24
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	d501      	bpl.n	8006cfc <_printf_i+0x1cc>
 8006cf8:	6018      	str	r0, [r3, #0]
 8006cfa:	e002      	b.n	8006d02 <_printf_i+0x1d2>
 8006cfc:	0671      	lsls	r1, r6, #25
 8006cfe:	d5fb      	bpl.n	8006cf8 <_printf_i+0x1c8>
 8006d00:	8018      	strh	r0, [r3, #0]
 8006d02:	2300      	movs	r3, #0
 8006d04:	6123      	str	r3, [r4, #16]
 8006d06:	4616      	mov	r6, r2
 8006d08:	e7ba      	b.n	8006c80 <_printf_i+0x150>
 8006d0a:	680b      	ldr	r3, [r1, #0]
 8006d0c:	1d1a      	adds	r2, r3, #4
 8006d0e:	600a      	str	r2, [r1, #0]
 8006d10:	681e      	ldr	r6, [r3, #0]
 8006d12:	6862      	ldr	r2, [r4, #4]
 8006d14:	2100      	movs	r1, #0
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7f9 fa5a 	bl	80001d0 <memchr>
 8006d1c:	b108      	cbz	r0, 8006d22 <_printf_i+0x1f2>
 8006d1e:	1b80      	subs	r0, r0, r6
 8006d20:	6060      	str	r0, [r4, #4]
 8006d22:	6863      	ldr	r3, [r4, #4]
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	2300      	movs	r3, #0
 8006d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d2c:	e7a8      	b.n	8006c80 <_printf_i+0x150>
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	4632      	mov	r2, r6
 8006d32:	4649      	mov	r1, r9
 8006d34:	4640      	mov	r0, r8
 8006d36:	47d0      	blx	sl
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d0ab      	beq.n	8006c94 <_printf_i+0x164>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	079b      	lsls	r3, r3, #30
 8006d40:	d413      	bmi.n	8006d6a <_printf_i+0x23a>
 8006d42:	68e0      	ldr	r0, [r4, #12]
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	4298      	cmp	r0, r3
 8006d48:	bfb8      	it	lt
 8006d4a:	4618      	movlt	r0, r3
 8006d4c:	e7a4      	b.n	8006c98 <_printf_i+0x168>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4632      	mov	r2, r6
 8006d52:	4649      	mov	r1, r9
 8006d54:	4640      	mov	r0, r8
 8006d56:	47d0      	blx	sl
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d09b      	beq.n	8006c94 <_printf_i+0x164>
 8006d5c:	3501      	adds	r5, #1
 8006d5e:	68e3      	ldr	r3, [r4, #12]
 8006d60:	9903      	ldr	r1, [sp, #12]
 8006d62:	1a5b      	subs	r3, r3, r1
 8006d64:	42ab      	cmp	r3, r5
 8006d66:	dcf2      	bgt.n	8006d4e <_printf_i+0x21e>
 8006d68:	e7eb      	b.n	8006d42 <_printf_i+0x212>
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	f104 0619 	add.w	r6, r4, #25
 8006d70:	e7f5      	b.n	8006d5e <_printf_i+0x22e>
 8006d72:	bf00      	nop
 8006d74:	08007e8d 	.word	0x08007e8d
 8006d78:	08007e9e 	.word	0x08007e9e

08006d7c <_sbrk_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d06      	ldr	r5, [pc, #24]	; (8006d98 <_sbrk_r+0x1c>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	f7fe fe3e 	bl	8005a08 <_sbrk>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_sbrk_r+0x1a>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_sbrk_r+0x1a>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	20000680 	.word	0x20000680

08006d9c <__sread>:
 8006d9c:	b510      	push	{r4, lr}
 8006d9e:	460c      	mov	r4, r1
 8006da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da4:	f000 f8ee 	bl	8006f84 <_read_r>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	bfab      	itete	ge
 8006dac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dae:	89a3      	ldrhlt	r3, [r4, #12]
 8006db0:	181b      	addge	r3, r3, r0
 8006db2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006db6:	bfac      	ite	ge
 8006db8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dba:	81a3      	strhlt	r3, [r4, #12]
 8006dbc:	bd10      	pop	{r4, pc}

08006dbe <__swrite>:
 8006dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc2:	461f      	mov	r7, r3
 8006dc4:	898b      	ldrh	r3, [r1, #12]
 8006dc6:	05db      	lsls	r3, r3, #23
 8006dc8:	4605      	mov	r5, r0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	4616      	mov	r6, r2
 8006dce:	d505      	bpl.n	8006ddc <__swrite+0x1e>
 8006dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f000 f868 	bl	8006eac <_lseek_r>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	4632      	mov	r2, r6
 8006dea:	463b      	mov	r3, r7
 8006dec:	4628      	mov	r0, r5
 8006dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006df2:	f000 b817 	b.w	8006e24 <_write_r>

08006df6 <__sseek>:
 8006df6:	b510      	push	{r4, lr}
 8006df8:	460c      	mov	r4, r1
 8006dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dfe:	f000 f855 	bl	8006eac <_lseek_r>
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	bf15      	itete	ne
 8006e08:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e12:	81a3      	strheq	r3, [r4, #12]
 8006e14:	bf18      	it	ne
 8006e16:	81a3      	strhne	r3, [r4, #12]
 8006e18:	bd10      	pop	{r4, pc}

08006e1a <__sclose>:
 8006e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1e:	f000 b813 	b.w	8006e48 <_close_r>
	...

08006e24 <_write_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	; (8006e44 <_write_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7fe fd97 	bl	8005966 <_write>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_write_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_write_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	20000680 	.word	0x20000680

08006e48 <_close_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d06      	ldr	r5, [pc, #24]	; (8006e64 <_close_r+0x1c>)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	f7fe fda3 	bl	800599e <_close>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_close_r+0x1a>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_close_r+0x1a>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	20000680 	.word	0x20000680

08006e68 <_fstat_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d07      	ldr	r5, [pc, #28]	; (8006e88 <_fstat_r+0x20>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	602b      	str	r3, [r5, #0]
 8006e76:	f7fe fd9e 	bl	80059b6 <_fstat>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	d102      	bne.n	8006e84 <_fstat_r+0x1c>
 8006e7e:	682b      	ldr	r3, [r5, #0]
 8006e80:	b103      	cbz	r3, 8006e84 <_fstat_r+0x1c>
 8006e82:	6023      	str	r3, [r4, #0]
 8006e84:	bd38      	pop	{r3, r4, r5, pc}
 8006e86:	bf00      	nop
 8006e88:	20000680 	.word	0x20000680

08006e8c <_isatty_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4d06      	ldr	r5, [pc, #24]	; (8006ea8 <_isatty_r+0x1c>)
 8006e90:	2300      	movs	r3, #0
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	602b      	str	r3, [r5, #0]
 8006e98:	f7fe fd9d 	bl	80059d6 <_isatty>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_isatty_r+0x1a>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_isatty_r+0x1a>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	20000680 	.word	0x20000680

08006eac <_lseek_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d07      	ldr	r5, [pc, #28]	; (8006ecc <_lseek_r+0x20>)
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	602a      	str	r2, [r5, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f7fe fd96 	bl	80059ec <_lseek>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_lseek_r+0x1e>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_lseek_r+0x1e>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20000680 	.word	0x20000680

08006ed0 <memcpy>:
 8006ed0:	440a      	add	r2, r1
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ed8:	d100      	bne.n	8006edc <memcpy+0xc>
 8006eda:	4770      	bx	lr
 8006edc:	b510      	push	{r4, lr}
 8006ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee6:	4291      	cmp	r1, r2
 8006ee8:	d1f9      	bne.n	8006ede <memcpy+0xe>
 8006eea:	bd10      	pop	{r4, pc}

08006eec <memmove>:
 8006eec:	4288      	cmp	r0, r1
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	eb01 0402 	add.w	r4, r1, r2
 8006ef4:	d902      	bls.n	8006efc <memmove+0x10>
 8006ef6:	4284      	cmp	r4, r0
 8006ef8:	4623      	mov	r3, r4
 8006efa:	d807      	bhi.n	8006f0c <memmove+0x20>
 8006efc:	1e43      	subs	r3, r0, #1
 8006efe:	42a1      	cmp	r1, r4
 8006f00:	d008      	beq.n	8006f14 <memmove+0x28>
 8006f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f0a:	e7f8      	b.n	8006efe <memmove+0x12>
 8006f0c:	4402      	add	r2, r0
 8006f0e:	4601      	mov	r1, r0
 8006f10:	428a      	cmp	r2, r1
 8006f12:	d100      	bne.n	8006f16 <memmove+0x2a>
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f1e:	e7f7      	b.n	8006f10 <memmove+0x24>

08006f20 <__malloc_lock>:
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <__malloc_lock+0x8>)
 8006f22:	f7ff b9d1 	b.w	80062c8 <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	20000678 	.word	0x20000678

08006f2c <__malloc_unlock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__malloc_unlock+0x8>)
 8006f2e:	f7ff b9cc 	b.w	80062ca <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	20000678 	.word	0x20000678

08006f38 <_realloc_r>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	460e      	mov	r6, r1
 8006f40:	b921      	cbnz	r1, 8006f4c <_realloc_r+0x14>
 8006f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f46:	4611      	mov	r1, r2
 8006f48:	f7ff ba74 	b.w	8006434 <_malloc_r>
 8006f4c:	b922      	cbnz	r2, 8006f58 <_realloc_r+0x20>
 8006f4e:	f7ff fa21 	bl	8006394 <_free_r>
 8006f52:	4625      	mov	r5, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f58:	f000 f826 	bl	8006fa8 <_malloc_usable_size_r>
 8006f5c:	42a0      	cmp	r0, r4
 8006f5e:	d20f      	bcs.n	8006f80 <_realloc_r+0x48>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4638      	mov	r0, r7
 8006f64:	f7ff fa66 	bl	8006434 <_malloc_r>
 8006f68:	4605      	mov	r5, r0
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d0f2      	beq.n	8006f54 <_realloc_r+0x1c>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4622      	mov	r2, r4
 8006f72:	f7ff ffad 	bl	8006ed0 <memcpy>
 8006f76:	4631      	mov	r1, r6
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff fa0b 	bl	8006394 <_free_r>
 8006f7e:	e7e9      	b.n	8006f54 <_realloc_r+0x1c>
 8006f80:	4635      	mov	r5, r6
 8006f82:	e7e7      	b.n	8006f54 <_realloc_r+0x1c>

08006f84 <_read_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d07      	ldr	r5, [pc, #28]	; (8006fa4 <_read_r+0x20>)
 8006f88:	4604      	mov	r4, r0
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	602a      	str	r2, [r5, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f7fe fcca 	bl	800592c <_read>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_read_r+0x1e>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_read_r+0x1e>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20000680 	.word	0x20000680

08006fa8 <_malloc_usable_size_r>:
 8006fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fac:	1f18      	subs	r0, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bfbc      	itt	lt
 8006fb2:	580b      	ldrlt	r3, [r1, r0]
 8006fb4:	18c0      	addlt	r0, r0, r3
 8006fb6:	4770      	bx	lr

08006fb8 <_init>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr

08006fc4 <_fini>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr
